import{_ as s,c as n,o as a,a as l}from"./app.9e1597b0.js";const F=JSON.parse('{"title":"RabbitMQ","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":2,"title":"RabbitMQ高级特性","slug":"rabbitmq高级特性","link":"#rabbitmq高级特性","children":[{"level":3,"title":"消息可靠性投递","slug":"消息可靠性投递","link":"#消息可靠性投递","children":[]},{"level":3,"title":"Consumer ACK","slug":"consumer-ack","link":"#consumer-ack","children":[]},{"level":3,"title":"消费端限流","slug":"消费端限流","link":"#消费端限流","children":[]},{"level":3,"title":"TTL","slug":"ttl","link":"#ttl","children":[]},{"level":3,"title":"死信队列","slug":"死信队列","link":"#死信队列","children":[]},{"level":3,"title":"延迟队列","slug":"延迟队列","link":"#延迟队列","children":[]},{"level":3,"title":"RabbitMQ日志","slug":"rabbitmq日志","link":"#rabbitmq日志","children":[]},{"level":3,"title":"消息追踪","slug":"消息追踪","link":"#消息追踪","children":[]}]},{"level":2,"title":"RabbitMQ应用问题","slug":"rabbitmq应用问题","link":"#rabbitmq应用问题","children":[{"level":3,"title":"消息可靠性保障","slug":"消息可靠性保障","link":"#消息可靠性保障","children":[]},{"level":3,"title":"消息幂等性处理","slug":"消息幂等性处理","link":"#消息幂等性处理","children":[]},{"level":3,"title":"惰性队列","slug":"惰性队列","link":"#惰性队列","children":[]},{"level":3,"title":"基于注解声明LazyQueue","slug":"基于注解声明lazyqueue","link":"#基于注解声明lazyqueue","children":[]}]},{"level":2,"title":"RabbitMQ集群搭建","slug":"rabbitmq集群搭建","link":"#rabbitmq集群搭建","children":[{"level":3,"title":"普通集群","slug":"普通集群","link":"#普通集群","children":[]},{"level":3,"title":"镜像集群","slug":"镜像集群","link":"#镜像集群","children":[]},{"level":3,"title":"仲裁队列","slug":"仲裁队列","link":"#仲裁队列","children":[]},{"level":3,"title":"SpringAMQP连接MQ集群","slug":"springamqp连接mq集群","link":"#springamqp连接mq集群","children":[]}]},{"level":2,"title":"常见问题","slug":"常见问题","link":"#常见问题","children":[{"level":3,"title":"控制台","slug":"控制台","link":"#控制台","children":[]}]}],"relativePath":"spring/springboot/rabbitMQ.md","lastUpdated":1673958748000}'),p={name:"spring/springboot/rabbitMQ.md"},e=l(`<h1 id="rabbitmq" tabindex="-1">RabbitMQ <a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a></h1><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-hidden="true">#</a></h2><ol><li>引入依赖</li></ol><div class="language-groovy line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">implementation </span><span style="color:#A5D6FF;">&#39;org.springframework.boot:spring-boot-starter-amqp&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>添加配置</li></ol><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">rabbitmq</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">addresses</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">127.0.0.1</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">port</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">5672</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">username</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">guest</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">password</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">guest</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="3"><li>声明配置类</li></ol><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">@Configuration</span></span>
<span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">RabbitMQConfig</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">companion</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">object</span><span style="color:#C9D1D9;">{</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">EXCHANGE_NAME</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;boot_topic_exchange&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">QUEUE_NAME</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;boot_queue&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">@Bean</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;bootExchange&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">bootExchange</span><span style="color:#C9D1D9;">()</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Exchange</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ExchangeBuilder</span><span style="color:#C9D1D9;">.topicExchange(</span><span style="color:#FFA657;">EXCHANGE_NAME</span><span style="color:#C9D1D9;">).durable(</span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">).build()</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">@Bean</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;bootQueue&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">bootQueue</span><span style="color:#C9D1D9;">()</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Queue</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">QueueBuilder</span><span style="color:#C9D1D9;">.durable(</span><span style="color:#FFA657;">QUEUE_NAME</span><span style="color:#C9D1D9;">).build()</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">@Bean</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">bindQueueExchange</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">@Qualifier</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;bootQueue&quot;</span><span style="color:#C9D1D9;">) queue</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Queue</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">@Qualifier</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;bootExchange&quot;</span><span style="color:#C9D1D9;">) exchange</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Exchange</span></span>
<span class="line"><span style="color:#C9D1D9;">    )</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Binding</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">BindingBuilder</span><span style="color:#C9D1D9;">.bind(queue).to(exchange).</span><span style="color:#79C0FF;">with</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;boot.#&quot;</span><span style="color:#C9D1D9;">).noargs()</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ol start="4"><li>消息生产者</li></ol><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">@RestController</span></span>
<span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">HelloController</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">// 自动注入</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> rabbitTemplate</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">RabbitTemplate</span></span>
<span class="line"><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">@GetMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">testSend</span><span style="color:#C9D1D9;">()</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">String</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// 发送消息</span></span>
<span class="line"><span style="color:#C9D1D9;">        rabbitTemplate.convertAndSend(</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// 交换机</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FFA657;">RabbitMQConfig</span><span style="color:#C9D1D9;">.</span><span style="color:#FFA657;">EXCHANGE_NAME</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// 路由key</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#A5D6FF;">&quot;boot.haha&quot;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// 消息内容</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#A5D6FF;">&quot;boot mq hello&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">        )</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;hello&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ol start="5"><li>消息消费者</li></ol><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 侦听器</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">@RabbitListener</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">queues</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#A5D6FF;">&quot;boot_queue&quot;</span><span style="color:#C9D1D9;">])</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">listenerQueue</span><span style="color:#C9D1D9;">(message</span><span style="color:#FF7B72;">:</span><span style="color:#FFA657;">Message</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#8B949E;">// 消息对象</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(message)</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#8B949E;">// 消息体</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">String</span><span style="color:#C9D1D9;">(message.body))</span></span>
<span class="line"><span style="color:#C9D1D9;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">可使用以下方式替代<code>3.</code> <code>5.</code>步</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">@RabbitListener</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// 声明绑定关系</span></span>
<span class="line"><span style="color:#C9D1D9;">        bindings </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">[ </span><span style="color:#FFA657;">QueueBinding</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// 声明队列</span></span>
<span class="line"><span style="color:#C9D1D9;">            value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Queue</span><span style="color:#C9D1D9;">(value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;order-queue&quot;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// 声明交换机</span></span>
<span class="line"><span style="color:#C9D1D9;">            exchange </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Exchange</span><span style="color:#C9D1D9;">(value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;order-exchange&quot;</span><span style="color:#C9D1D9;">, type </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;topic&quot;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// 声明路由键</span></span>
<span class="line"><span style="color:#C9D1D9;">            key </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#A5D6FF;">&quot;order.*&quot;</span><span style="color:#C9D1D9;">]</span></span>
<span class="line"><span style="color:#C9D1D9;">        )]</span></span>
<span class="line"><span style="color:#C9D1D9;">    )</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div><h2 id="rabbitmq高级特性" tabindex="-1">RabbitMQ高级特性 <a class="header-anchor" href="#rabbitmq高级特性" aria-hidden="true">#</a></h2><h3 id="消息可靠性投递" tabindex="-1">消息可靠性投递 <a class="header-anchor" href="#消息可靠性投递" aria-hidden="true">#</a></h3><ul><li><code>confirm</code> 确认模式</li><li><code>return</code> 退回模式</li></ul><p>rabbitmq 的消息投递路径为: <code>producer</code> -&gt; <code>rabbitmq broker</code> -&gt; <code>exchange</code> -&gt; <code>queue</code> -&gt; <code>consumer</code></p><ul><li>消息从 <code>producer</code> 到 <code>exchange</code> 则会返回一个 <code>confirmCallback</code></li><li>消息从 <code>exchange</code> -&gt; <code>queue</code> 投递失败则会返回一个 <code>returnCallback</code></li></ul><h4 id="确认模式" tabindex="-1">确认模式 <a class="header-anchor" href="#确认模式" aria-hidden="true">#</a></h4><ol><li>开启确认模式</li></ol><ul><li>publish-confirm-type: 开启publisher-confirm,这里支持两种类型: <ul><li>simple:同步等待confirm结果,直到超时</li><li>correlated:异步回调,定义ConfirmCallback,MQ返回结果时会回调这个ConfirmCallback</li></ul></li></ul><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">rabbitmq</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">publisher-confirm-type</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">correlated</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol><li>设置ConfirmCallback</li></ol><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">/**</span></span>
<span class="line"><span style="color:#8B949E;">   * correlationData 配置信息</span></span>
<span class="line"><span style="color:#8B949E;">   * ack 交换机是否收到消息. true 成功, false 失败</span></span>
<span class="line"><span style="color:#8B949E;">   * cause 失败原因</span></span>
<span class="line"><span style="color:#8B949E;">   */</span></span>
<span class="line"><span style="color:#C9D1D9;">    rabbitTemplate.setConfirmCallback { correlationData, ack, cause </span><span style="color:#FF7B72;">-&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;confirm方法被执行了...&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">    rabbitTemplate.convertAndSend(</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FFA657;">RabbitMQConfig</span><span style="color:#C9D1D9;">.</span><span style="color:#FFA657;">EXCHANGE_NAME</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#A5D6FF;">&quot;boot.haha&quot;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#A5D6FF;">&quot;boot mq hello&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="回退模式" tabindex="-1">回退模式 <a class="header-anchor" href="#回退模式" aria-hidden="true">#</a></h4><ol><li>开启回退模式</li></ol><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">rabbitmq</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;"># 开启publish-return功能</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">publisher-returns</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">true</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;"># 定义消息路由失败时的策略. true,则调用ReturnCallback</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">template</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#7EE787;">mandatory</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol><li>设置ReturnCallBack(可用<a href="#%E5%85%A8%E5%B1%80callback">全局Callback</a>)</li><li>设置Exchange处理消息的模式: (失败) <ol><li>丢弃消息</li><li>返回给消息的发送方ReturnCallBack (默认)</li></ol></li></ol><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">rabbitTemplate.</span><span style="color:#79C0FF;">run</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    setMandatory(</span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    setReturnsCallback { returnedMessage</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ReturnedMessage</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">-&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(returnedMessage.message)   </span><span style="color:#8B949E;">// 消息对象</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(returnedMessage.replyCode) </span><span style="color:#8B949E;">// 错误码</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(returnedMessage.replyText) </span><span style="color:#8B949E;">// 错误信息</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(returnedMessage.exchange)  </span><span style="color:#8B949E;">// 交换机</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(returnedMessage.routingKey)</span><span style="color:#8B949E;">// 路由键</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">    convertAndSend(</span><span style="color:#FFA657;">RabbitMQConfig</span><span style="color:#C9D1D9;">.</span><span style="color:#FFA657;">EXCHANGE_NAME</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;boot.haha&quot;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;boot mq hello&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="全局callback" tabindex="-1">全局Callback <a class="header-anchor" href="#全局callback" aria-hidden="true">#</a></h4><blockquote><p>由于每个RabbitTemplate只能配置一个ReturnCallback,因此推荐用以下方法统一配置</p></blockquote><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">@Configuration</span></span>
<span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">CommonConfig</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">ApplicationContextAware</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">override</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">setApplicationContext</span><span style="color:#C9D1D9;">(applicationContext</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ApplicationContext</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">var</span><span style="color:#C9D1D9;"> rabbitTemplate </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> applicationContext.getBean(RabbitTemplate::</span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">.java)</span></span>
<span class="line"><span style="color:#C9D1D9;">        rabbitTemplate.setReturnsCallback {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(it.replyText)</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="consumer-ack" tabindex="-1">Consumer ACK <a class="header-anchor" href="#consumer-ack" aria-hidden="true">#</a></h3><blockquote><p>ack指Acknowledge,确认。表示消费端收到消息后的确认方式。</p></blockquote><p>有三种确认方式：</p><ul><li>自动确认：<code>acknowledge=&quot;none&quot;</code></li><li>手动确认：<code>acknowledge=&quot;manual&quot;</code></li><li>根据异常情况确认：<code>acknowledge=&quot;auto&quot;</code> (这种方式使用麻烦)</li></ul><p>其中自动确认是指，当消息一旦被<code>Consumer</code>接收到，则自动确认收到，并将相应<code>message</code>从<code>RabbitMQ</code>的 消息缓存中移除。但是在实际业务处理中，很可能消息接收到，业务处理出现异常，那么该消息就会丢失。如 果设置了手动确认方式，则需要在业务处理成功后，调用<code>channel.basicAck()</code>,手动签收，如果出现异常，则 调用<code>channel.basicNack()</code>方法，让其自动重新发送消息。</p><ol><li>设置手动签收</li></ol><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">rabbitmq</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">listener</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#7EE787;">simple</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#7EE787;">acknowledge-mode</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">manual</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>监听器接收<code>Channel</code>对象</li></ol><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark has-highlighted-lines"><code><span class="line"><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">@RabbitListener</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">queues</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#A5D6FF;">&quot;boot_queue&quot;</span><span style="color:#C9D1D9;">])</span></span>
<span class="line highlighted"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">listenerQueue</span><span style="color:#C9D1D9;">(map</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Map</span><span style="color:#FF7B72;">&lt;</span><span style="color:#79C0FF;">String</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">Any</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">, message</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Message</span><span style="color:#C9D1D9;">, channel</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Channel</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;处理业务逻辑....&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">var</span><span style="color:#C9D1D9;"> deliveryTag </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> message.messageProperties.deliveryTag</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// 抛出异常</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#79C0FF;">1</span><span style="color:#FF7B72;">/</span><span style="color:#79C0FF;">0</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// 3. 如果消息处理成功, 则签收</span></span>
<span class="line"><span style="color:#C9D1D9;">            channel.basicAck(deliveryTag, </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">        } </span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;"> (e</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Exception</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// 4. 如果消息处理失败,则拒绝签收,broker重新发送给consumer</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// deliveryTag: 当前消息的tag</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// multiple: true 签收当前消息前面的所有消息</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// requeue: 重回队列</span></span>
<span class="line"><span style="color:#C9D1D9;">            channel.basicNack(deliveryTag,</span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="spring失败重试" tabindex="-1">spring失败重试 <a class="header-anchor" href="#spring失败重试" aria-hidden="true">#</a></h4><blockquote><p>当消费者出现异常后,消息会不断requeue(重新入队)到队列,再重新发送给消费者,然后再次异常,再次requeue,无限循环,导致mq的消息处理飙升,带来不必要的压力 因此可以采用spring的retry机制,在异常时利用本地重试,而不是无限制的requeue到mq队列</p></blockquote><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">rabbitmq</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">listener</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#7EE787;">simple</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#7EE787;">acknowledge-mode</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">manual</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#7EE787;">retry</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">          </span><span style="color:#7EE787;">enabled</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;"># 开启消费者失败重试</span></span>
<span class="line"><span style="color:#C9D1D9;">          </span><span style="color:#7EE787;">initial-interval</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">1000</span><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;"># 初次的失败等待时长为1秒</span></span>
<span class="line"><span style="color:#C9D1D9;">          </span><span style="color:#7EE787;">multiplier</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">     </span><span style="color:#8B949E;"># 下次失败的等待时长倍数,下次等待时长 = multiplier * last-interval</span></span>
<span class="line"><span style="color:#C9D1D9;">          </span><span style="color:#7EE787;">max-attempts</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">3</span><span style="color:#C9D1D9;">   </span><span style="color:#8B949E;"># 最大重试次数</span></span>
<span class="line"><span style="color:#C9D1D9;">          </span><span style="color:#7EE787;">stateless</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">   </span><span style="color:#8B949E;"># true为无状态;false有状态,如果业务中包含事务,这里改为false</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="失败消息处理策略" tabindex="-1">失败消息处理策略 <a class="header-anchor" href="#失败消息处理策略" aria-hidden="true">#</a></h4><blockquote><p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有MessageRecoverer:接口来处理，它包含三种不同的实现</p></blockquote><ul><li>RejectAndDontRequeueRecoverer:重试耗尽后，直接reject,丢弃消息。默认就是这种方式</li><li>ImmediateRequeueMessageRecoverer:重试耗尽后，返回nack,消息重新入队</li><li>RepublishMessageRecoverer:重试耗尽后，将失败消息投递到指定的交换机</li></ul><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">@Bean</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">messageRecover</span><span style="color:#C9D1D9;">(rabbitTemplate</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">RabbitTemplate</span><span style="color:#C9D1D9;">)</span><span style="color:#FF7B72;">:</span><span style="color:#FFA657;">MessageRecoverer</span><span style="color:#C9D1D9;">{</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;">  </span><span style="color:#FFA657;">RepublishMessageRecoverer</span><span style="color:#C9D1D9;">(rabbitTemplate,</span><span style="color:#A5D6FF;">&quot;exchange&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;route_key&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="消费端限流" tabindex="-1">消费端限流 <a class="header-anchor" href="#消费端限流" aria-hidden="true">#</a></h3><h4 id="限流" tabindex="-1">限流 <a class="header-anchor" href="#限流" aria-hidden="true">#</a></h4><p><code>Consumer</code> 限流机制</p><ol><li>确保ack机制为手动确认</li><li>配置 <code>perfetch: 1</code> 表示消费者每次从mq拉取一条消息来消费,确认签收后,才会继续拉下一条消息</li></ol><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">rabbitmq</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">listener</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#7EE787;">simple</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#7EE787;">acknowledge-mode</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">manual</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#7EE787;">prefetch</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="并发" tabindex="-1">并发 <a class="header-anchor" href="#并发" aria-hidden="true">#</a></h4><p><code>concurrency</code>消费端的监听个数（既<code>@RabbitListener</code>开启几个线程去处理数据）</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">// 两个线程</span></span>
<span class="line"><span style="color:#FF7B72;">@RabbitListener</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">queues</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;limitingQueue&quot;</span><span style="color:#C9D1D9;">,concurrency </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;2&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#8B949E;">// 最小并发数是5，10代表最大并发</span></span>
<span class="line"><span style="color:#FF7B72;">@RabbitListener</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">queues</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;limitingQueue&quot;</span><span style="color:#C9D1D9;">,concurrency </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;5-10&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="ttl" tabindex="-1">TTL <a class="header-anchor" href="#ttl" aria-hidden="true">#</a></h3><blockquote><p>RabbitMQ可以对消息设置过期时间,也可以对整个队列(Queue)设置过期时间</p></blockquote><ul><li>对整个队列设置过期时间</li></ul><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">// arguments 队列参数数组</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">// Argument  队列单数   name:属性值 value:值  type:值类型</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">// x-message-ttl 过期时间, 值为毫秒,type 为 Long </span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">@RabbitListener</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">        bindings </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#FFA657;">QueueBinding</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">            value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Queue</span><span style="color:#C9D1D9;">(value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;ttl_queue&quot;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">                arguments </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#FFA657;">Argument</span><span style="color:#C9D1D9;">(name </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;x-message-ttl&quot;</span><span style="color:#C9D1D9;">,value</span><span style="color:#FF7B72;">=</span><span style="color:#A5D6FF;">&quot;10000&quot;</span><span style="color:#C9D1D9;">, type </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;java.lang.Long&quot;</span><span style="color:#C9D1D9;">)]),</span></span>
<span class="line"><span style="color:#C9D1D9;">            exchange </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Exchange</span><span style="color:#C9D1D9;">(value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;ttl_exchange&quot;</span><span style="color:#C9D1D9;">, type </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;topic&quot;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">            key </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#A5D6FF;">&quot;ttl.*&quot;</span><span style="color:#C9D1D9;">]</span></span>
<span class="line"><span style="color:#C9D1D9;">        )]</span></span>
<span class="line"><span style="color:#C9D1D9;">    )</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ttlListenerQueue</span><span style="color:#C9D1D9;">(user</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">User</span><span style="color:#C9D1D9;">, message</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Message</span><span style="color:#C9D1D9;">, channel</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Channel</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        ...</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li>对消息设置过期时间</li></ul><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">convertAndSend(</span><span style="color:#A5D6FF;">&quot;ttl_exchange&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;ttl.haha&quot;</span><span style="color:#C9D1D9;">,user) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">// 消息后处理回调 给meesage对象设置过期时间为5000毫秒</span></span>
<span class="line"><span style="color:#C9D1D9;">    it.messageProperties.expiration </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;5000&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return@convertAndSend</span><span style="color:#C9D1D9;"> it</span></span>
<span class="line"><span style="color:#C9D1D9;">  }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果设置了消息的过期时间,也设置了队列的过期时间,它以时间短的为准.</p><p>如果触发队列过期时间,消息过期立刻就会被移除.</p><p>如果是消息中设置的过期时间,只有在队列顶端,才会去判断是否过期(移除掉)</p></div><h3 id="死信队列" tabindex="-1">死信队列 <a class="header-anchor" href="#死信队列" aria-hidden="true">#</a></h3><blockquote><p>死信队列: Dead Letter Exchange(死信交换机) 当消息成为 Dead message后,可以被重新发送到另一个交换机,这个交换机就是DLX.</p></blockquote><h4 id="消息成为死信的三种情况" tabindex="-1">消息成为死信的三种情况 <a class="header-anchor" href="#消息成为死信的三种情况" aria-hidden="true">#</a></h4><ol><li>队列消息长度到达限制；</li><li>消费者拒接消费消息，<code>basicNack/basicReject</code>,并且不把消息重新放入原目标队列，<code>requeue=false</code>;</li><li>原队列存在消息过期设置，消息到达超时时间未被消费：</li></ol><h4 id="基本使用-1" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用-1" aria-hidden="true">#</a></h4><ol><li>声明死信交换机</li></ol><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">@RabbitListener</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">  bindings </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#FFA657;">QueueBinding</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">    value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Queue</span><span style="color:#C9D1D9;">(value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;queue_dlx&quot;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">    exchange </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Exchange</span><span style="color:#C9D1D9;">(value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;exchange_dlx&quot;</span><span style="color:#C9D1D9;">, type </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;topic&quot;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">    key </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#A5D6FF;">&quot;dlx.*&quot;</span><span style="color:#C9D1D9;">]</span></span>
<span class="line"><span style="color:#C9D1D9;">  )]</span></span>
<span class="line"><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">queueDlx</span><span style="color:#C9D1D9;">(user</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">User</span><span style="color:#C9D1D9;">, message</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Message</span><span style="color:#C9D1D9;">, channel</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Channel</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(user)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;死信交换机消费了...&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    channel.basicAck(message.messageProperties.deliveryTag, </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ol start="2"><li>声明正常交换机</li></ol><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">@RabbitListener</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">  bindings </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#FFA657;">QueueBinding</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">    value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Queue</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">      value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;test_queue&quot;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">      arguments </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// 死信交换机名称</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FFA657;">Argument</span><span style="color:#C9D1D9;">(name </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;x-dead-letter-exchange&quot;</span><span style="color:#C9D1D9;">, value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;exchange_dlx&quot;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// 发给死信交换机的路由键</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FFA657;">Argument</span><span style="color:#C9D1D9;">(name </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;x-dead-letter-routing-key&quot;</span><span style="color:#C9D1D9;">, value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;dlx.hehe&quot;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FFA657;">Argument</span><span style="color:#C9D1D9;">(name </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;x-message-ttl&quot;</span><span style="color:#C9D1D9;">, value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;10000&quot;</span><span style="color:#C9D1D9;">, type </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;java.lang.Integer&quot;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FFA657;">Argument</span><span style="color:#C9D1D9;">(name </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;x-max-length&quot;</span><span style="color:#C9D1D9;">, value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;10&quot;</span><span style="color:#C9D1D9;">, type </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;java.lang.Integer&quot;</span><span style="color:#C9D1D9;">)]</span></span>
<span class="line"><span style="color:#C9D1D9;">    ),</span></span>
<span class="line"><span style="color:#C9D1D9;">    exchange </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Exchange</span><span style="color:#C9D1D9;">(value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;test_exchange&quot;</span><span style="color:#C9D1D9;">, type </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;topic&quot;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">    key </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#A5D6FF;">&quot;test.dxl.*&quot;</span><span style="color:#C9D1D9;">]</span></span>
<span class="line"><span style="color:#C9D1D9;">  )]</span></span>
<span class="line"><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">testQueue</span><span style="color:#C9D1D9;">(user</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">User</span><span style="color:#C9D1D9;">, message</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Message</span><span style="color:#C9D1D9;">, channel</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Channel</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(user)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;正常交换机消费了...&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    channel.basicReject(message.messageProperties.deliveryTag, </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;正常交换机拒绝了...&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>当消息成为死信后,如果该队列绑定了死信交换机,则消息会被死信交换机重新路由到死信队列</p><h3 id="延迟队列" tabindex="-1">延迟队列 <a class="header-anchor" href="#延迟队列" aria-hidden="true">#</a></h3><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果使用在消息属性上设置 TTL 的方式，消息可能并不会按时“死亡”，因为 RabbitMQ 只会检查第一个消息是否过期，如果过期则丢到死信队列，如果第一个消息的延时时长很长，而第二个消息的延时时长很短，第二个消息并不会优先得到执行。 引入 <code>Rabbitmq</code> 插件实现在消息粒度上的 TTL，并使其在设置的 TTL 时间及时死亡，设计成一个通用的延时队列。</p></div><ol><li>安装插件</li></ol><p><a href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases" target="_blank" rel="noreferrer">github下载直达</a></p><ol start="2"><li>安装插件</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;"># 拷贝插件</span></span>
<span class="line"><span style="color:#FFA657;">docker</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">cp</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">/opt/soft-ware/rabbitmq_delayed_message_exchange-3.9.0.ez</span><span style="color:#C9D1D9;">  </span><span style="color:#A5D6FF;">rabbitmq:/opt/rabbitmq/plugins/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;"># 进入容器内</span></span>
<span class="line"><span style="color:#FFA657;">docker</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">exec</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">-it</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">rabbitmq</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;"># 查看插件列表</span></span>
<span class="line"><span style="color:#FFA657;">rabbitmq-plugins</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">list</span><span style="color:#C9D1D9;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;"># 开启插件支持 </span></span>
<span class="line"><span style="color:#FFA657;">rabbitmq-plugins</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">enable</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">rabbitmq_delayed_message_exchange</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;"># 退出容器</span></span>
<span class="line"><span style="color:#FFA657;">ctrl</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">+</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">p</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">+q</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;"># 重启容器</span></span>
<span class="line"><span style="color:#FFA657;">docker</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">restart</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">rabbitmq</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol start="3"><li>查看控制台 进入<code>rabbitmq</code>控制台页面，查看<code>exchange</code>类型，如果出现<code>x-delayed-message</code> 则安装成功! <img src="https://cdn.azhiyuan.com.cn/markdown/img/2023/01/17/20230117154047.png" alt="安装成功"></li></ol><ul><li>消费者</li></ul><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">@RabbitListener</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">bindings</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#FFA657;">QueueBinding</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">        value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Queue</span><span style="color:#C9D1D9;">(value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;delay_queue&quot;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// 指定交换机类型为 x-delayed-message</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// x-delayed-type 指定交换机路由类型</span></span>
<span class="line"><span style="color:#C9D1D9;">        exchange </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Exchange</span><span style="color:#C9D1D9;">(value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;delay_Exchange&quot;</span><span style="color:#C9D1D9;">, delayed </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;true&quot;</span><span style="color:#C9D1D9;">, arguments </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">[</span><span style="color:#FFA657;">Argument</span><span style="color:#C9D1D9;">(name </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;x-delayed-type&quot;</span><span style="color:#C9D1D9;">, value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;topic&quot;</span><span style="color:#C9D1D9;">)] ),</span></span>
<span class="line"><span style="color:#C9D1D9;">        key </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#A5D6FF;">&quot;delay.*&quot;</span><span style="color:#C9D1D9;">]</span></span>
<span class="line"><span style="color:#C9D1D9;">    )])</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">delayListener</span><span style="color:#C9D1D9;">(map</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Map</span><span style="color:#FF7B72;">&lt;</span><span style="color:#79C0FF;">String</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">Any</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">,message</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Message</span><span style="color:#C9D1D9;">, channel</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Channel</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(map)</span></span>
<span class="line"><span style="color:#C9D1D9;">        channel.basicAck(message.messageProperties.deliveryTag,</span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>生产者</li></ul><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">@GetMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/{message}/{delaytime}&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">testSend</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">@PathVariable</span><span style="color:#C9D1D9;"> message</span><span style="color:#FF7B72;">:</span><span style="color:#79C0FF;">String</span><span style="color:#C9D1D9;">,</span><span style="color:#FF7B72;">@PathVariable</span><span style="color:#C9D1D9;"> delaytime</span><span style="color:#FF7B72;">:</span><span style="color:#79C0FF;">Int</span><span style="color:#C9D1D9;"> )</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">String</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">var</span><span style="color:#C9D1D9;"> map </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">mapOf</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;message&quot;</span><span style="color:#C9D1D9;"> to message, </span><span style="color:#A5D6FF;">&quot;delaytime&quot;</span><span style="color:#C9D1D9;"> to delaytime)</span></span>
<span class="line"><span style="color:#C9D1D9;">        rabbitTemplate.convertAndSend(</span><span style="color:#A5D6FF;">&quot;delay_Exchange&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;delay.haha&quot;</span><span style="color:#C9D1D9;">,map) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">// 设置延迟时间</span></span>
<span class="line"><span style="color:#C9D1D9;">            it.messageProperties.delay</span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">delaytime</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">return@convertAndSend</span><span style="color:#C9D1D9;"> it</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;发送成功&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ul><li>注意:这种方式会触发returnCallback失败</li></ul><p>可通过以下方法判断是否是延迟消息</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">rabbitTemplate.setReturnsCallback {</span></span>
<span class="line"><span style="color:#C9D1D9;">     </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;">(it.message.messageProperties.receivedDelay</span><span style="color:#FF7B72;">&gt;</span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">         </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;延迟消息&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">     }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="rabbitmq日志" tabindex="-1">RabbitMQ日志 <a class="header-anchor" href="#rabbitmq日志" aria-hidden="true">#</a></h3><p>RabbitMQ默认日志存放路径：var/log/rabbitmq/rabbit@xxx.log 日志包含了RabbitMQ的版本号、Erlang的版本号、RabbitMQ服务节点名称、cookie的hash值、 RabbitMQ配置文件地址、内存限制、磁盘限制、默认账户guest的创建以及权限配置等等。</p><h3 id="消息追踪" tabindex="-1">消息追踪 <a class="header-anchor" href="#消息追踪" aria-hidden="true">#</a></h3><h4 id="firehose" tabindex="-1">Firehose <a class="header-anchor" href="#firehose" aria-hidden="true">#</a></h4><p>firehose的机制是将生产者投递给rabbitmg的消息，rabbitmg投递给消费者的消息按照指定的格式发送到默认的exchange.上。这个默认的exchange的名称为amq.rabbitmg.trace,它是一个topic类型的exchange。发送到这个exchange.上的消息的routing key为publish.exchangename和deliver.queuename 其中exchangename和queuename为实际exchange和queue的名称，分别对应生产者投递到exchange的消息，和消费者从queue上获取的消息。</p><p>注意：打开trace会影响消息写入功能，适当打开后请关闭。</p><p><code>rabbitmgctl trace on</code>:开启Firehose命令</p><p><code>rabbitmgctl trace off</code>:关闭Firehose命令</p><h4 id="rabbitmq-tracing" tabindex="-1">rabbitmq_tracing <a class="header-anchor" href="#rabbitmq-tracing" aria-hidden="true">#</a></h4><p>启用插件：<code>rabbitmq-plugins enable rabbitmq_tracing</code><img src="https://cdn.azhiyuan.com.cn/markdown/img/2023/01/17/20230117182837.png" alt=""> 在此处添加 <code>trace</code> 进行监控</p><h2 id="rabbitmq应用问题" tabindex="-1">RabbitMQ应用问题 <a class="header-anchor" href="#rabbitmq应用问题" aria-hidden="true">#</a></h2><h3 id="消息可靠性保障" tabindex="-1">消息可靠性保障 <a class="header-anchor" href="#消息可靠性保障" aria-hidden="true">#</a></h3><p><img src="https://cdn.azhiyuan.com.cn/markdown/img/2023/01/17/20230117183604.png" alt=""></p><h3 id="消息幂等性处理" tabindex="-1">消息幂等性处理 <a class="header-anchor" href="#消息幂等性处理" aria-hidden="true">#</a></h3><p><img src="https://cdn.azhiyuan.com.cn/markdown/img/2023/01/17/20230117184910.png" alt=""></p><h3 id="惰性队列" tabindex="-1">惰性队列 <a class="header-anchor" href="#惰性队列" aria-hidden="true">#</a></h3><blockquote><p>从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的概念，也就是惰性队列。</p></blockquote><ul><li>接收到消息后直接存入磁盘而非内存</li><li>消费者要消费消息时才会从磁盘中读取并加载到内存</li><li>支持数百万条的消息存储</li></ul><h4 id="基于命令行设置lazy-queue" tabindex="-1">基于命令行设置lazy-queue <a class="header-anchor" href="#基于命令行设置lazy-queue" aria-hidden="true">#</a></h4><p>而要设置一个队列为惰性队列，只需要在声明队列时，指定x-queue-mode属性为lazy即可。可以通过命令行将一个运行中的队列修改为惰性队列：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">rabbitmqctl</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">set_policy</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">Lazy</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;^lazy-queue$&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;{&quot;queue-mode&quot;:&quot;lazy&quot;}&#39;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">--apply-to</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">queues</span><span style="color:#C9D1D9;">  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>命令解读：</p><ul><li><code>rabbitmqctl</code> ：RabbitMQ的命令行工具</li><li><code>set_policy</code> ：添加一个策略</li><li><code>Lazy</code> ：策略名称，可以自定义</li><li><code>&quot;^lazy-queue$&quot;</code> ：用正则表达式匹配队列的名字</li><li><code>&#39;{&quot;queue-mode&quot;:&quot;lazy&quot;}&#39;</code> ：设置队列模式为lazy模式</li><li><code>--apply-to queues</code>：策略的作用对象，是所有的队列</li></ul><h3 id="基于注解声明lazyqueue" tabindex="-1">基于注解声明LazyQueue <a class="header-anchor" href="#基于注解声明lazyqueue" aria-hidden="true">#</a></h3><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">@RabbitListener</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">bindings</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#FFA657;">QueueBinding</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">        value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Queue</span><span style="color:#C9D1D9;">(value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;delay_queue&quot;</span><span style="color:#C9D1D9;">),</span></span>
<span class="line"><span style="color:#C9D1D9;">        exchange </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Exchange</span><span style="color:#C9D1D9;">(value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;delay_Exchange&quot;</span><span style="color:#C9D1D9;">, delayed </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;true&quot;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">            arguments </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">[</span><span style="color:#FFA657;">Argument</span><span style="color:#C9D1D9;">(name </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;x-queue-mode&quot;</span><span style="color:#C9D1D9;">, value </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;lazy&quot;</span><span style="color:#C9D1D9;">)] ),</span></span>
<span class="line"><span style="color:#C9D1D9;">        key </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> [</span><span style="color:#A5D6FF;">&quot;delay.*&quot;</span><span style="color:#C9D1D9;">]</span></span>
<span class="line"><span style="color:#C9D1D9;">    )])</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">delayListener</span><span style="color:#C9D1D9;">(map</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Map</span><span style="color:#FF7B72;">&lt;</span><span style="color:#79C0FF;">String</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">Any</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">,message</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Message</span><span style="color:#C9D1D9;">, channel</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Channel</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">       ...</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="rabbitmq集群搭建" tabindex="-1">RabbitMQ集群搭建 <a class="header-anchor" href="#rabbitmq集群搭建" aria-hidden="true">#</a></h2><blockquote><p>RabbitMQ的是基于Erlang语言编写，而Erlang又是一个面向并发的语言，天然支持集群模式。RabbitMQ的集群有两种模式</p></blockquote><ul><li><p><strong>普通集群</strong>：是一种分布式集群，将队列分散到集群的各个节点，从而提高整个集群的并发能力。</p></li><li><p><strong>镜像集群</strong>：是一种主从集群，普通集群的基础上，添加了主从备份功能，提高集群的数据可用性。</p></li></ul><p>镜像集群虽然支持主从，但主从同步并不是强一致的，某些情况下可能有数据丢失的风险。因此在RabbitMQ的3.8版本以后，推出了新的功能：<strong>仲裁队列</strong>来代替镜像集群，底层采用Raft协议确保主从的数据一致性。</p><h3 id="普通集群" tabindex="-1">普通集群 <a class="header-anchor" href="#普通集群" aria-hidden="true">#</a></h3><h4 id="集群结构和特征" tabindex="-1">集群结构和特征 <a class="header-anchor" href="#集群结构和特征" aria-hidden="true">#</a></h4><p>普通集群，或者叫标准集群（classic cluster），具备下列特征：</p><ul><li>会在集群的各个节点间共享部分数据，包括：交换机、队列元信息。不包含队列中的消息。</li><li>当访问集群某节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回</li><li>队列所在节点宕机，队列中的消息就会丢失</li></ul><p>结构如图：</p><p><img src="https://cdn.azhiyuan.com.cn/markdown/img/2023/01/17/20230117202928.png" alt="image-20210718220843323"></p><h3 id="镜像集群" tabindex="-1">镜像集群 <a class="header-anchor" href="#镜像集群" aria-hidden="true">#</a></h3><h4 id="集群结构和特征-1" tabindex="-1">集群结构和特征 <a class="header-anchor" href="#集群结构和特征-1" aria-hidden="true">#</a></h4><p>镜像集群：本质是主从模式，具备下面的特征：</p><ul><li>交换机、队列、队列中的消息会在各个mq的镜像节点之间同步备份。</li><li>创建队列的节点被称为该队列的<strong>主节点，<strong>备份到的其它节点叫做该队列的</strong>镜像</strong>节点。</li><li>一个队列的主节点可能是另一个队列的镜像节点</li><li>所有操作都是主节点完成，然后同步给镜像节点</li><li>主宕机后，镜像节点会替代成新的主</li></ul><p>结构如图：</p><p><img src="https://cdn.azhiyuan.com.cn/markdown/img/2023/01/17/20230117202926.png" alt="image-20210718221039542"></p><h3 id="仲裁队列" tabindex="-1">仲裁队列 <a class="header-anchor" href="#仲裁队列" aria-hidden="true">#</a></h3><h4 id="集群特征" tabindex="-1">集群特征 <a class="header-anchor" href="#集群特征" aria-hidden="true">#</a></h4><p>仲裁队列：仲裁队列是3.8版本以后才有的新功能，用来替代镜像队列，具备下列特征：</p><ul><li>与镜像队列一样，都是主从模式，支持主从数据同步</li><li>使用非常简单，没有复杂的配置</li><li>主从同步基于Raft协议，强一致</li></ul><h4 id="java代码创建仲裁队列" tabindex="-1">Java代码创建仲裁队列 <a class="header-anchor" href="#java代码创建仲裁队列" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Bean</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Queue </span><span style="color:#D2A8FF;">quorumQueue</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> QueueBuilder</span></span>
<span class="line"><span style="color:#C9D1D9;">        .</span><span style="color:#D2A8FF;">durable</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;quorum.queue&quot;</span><span style="color:#C9D1D9;">) </span><span style="color:#8B949E;">// 持久化</span></span>
<span class="line"><span style="color:#C9D1D9;">        .</span><span style="color:#D2A8FF;">quorum</span><span style="color:#C9D1D9;">() </span><span style="color:#8B949E;">// 仲裁队列</span></span>
<span class="line"><span style="color:#C9D1D9;">        .</span><span style="color:#D2A8FF;">build</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="springamqp连接mq集群" tabindex="-1">SpringAMQP连接MQ集群 <a class="header-anchor" href="#springamqp连接mq集群" aria-hidden="true">#</a></h3><p>注意，这里用address来代替host、port方式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">spring</span><span style="color:#FF7B72;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  rabbitmq</span><span style="color:#FF7B72;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    addresses</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">192.168</span><span style="color:#C9D1D9;">.</span><span style="color:#FFA198;font-style:italic;">150</span><span style="color:#C9D1D9;">.</span><span style="color:#FFA198;font-style:italic;">105</span><span style="color:#FF7B72;">:</span><span style="color:#79C0FF;">8071</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">192.168</span><span style="color:#C9D1D9;">.</span><span style="color:#FFA198;font-style:italic;">150</span><span style="color:#C9D1D9;">.</span><span style="color:#FFA198;font-style:italic;">105</span><span style="color:#FF7B72;">:</span><span style="color:#79C0FF;">8072</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">192.168</span><span style="color:#C9D1D9;">.</span><span style="color:#FFA198;font-style:italic;">150</span><span style="color:#C9D1D9;">.</span><span style="color:#FFA198;font-style:italic;">105</span><span style="color:#FF7B72;">:</span><span style="color:#79C0FF;">8073</span></span>
<span class="line"><span style="color:#C9D1D9;">    username</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> guest</span></span>
<span class="line"><span style="color:#C9D1D9;">    password</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> guest</span></span>
<span class="line"><span style="color:#C9D1D9;">    virtual</span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;">host</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">/</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-hidden="true">#</a></h2><h3 id="控制台" tabindex="-1">控制台 <a class="header-anchor" href="#控制台" aria-hidden="true">#</a></h3><h4 id="management-api-returned-status-code-500" tabindex="-1">Management API returned status code 500 <a class="header-anchor" href="#management-api-returned-status-code-500" aria-hidden="true">#</a></h4><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">因为是使用docker</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">容器安装的，所有需要进入容器</span></span>
<span class="line"><span style="color:#FFA657;">docker</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">exec</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">-it</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">rabbitmq</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">/bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFA657;">进入目录</span></span>
<span class="line"><span style="color:#79C0FF;">cd</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">/etc/rabbitmq/conf.d/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFA657;">执行命令</span></span>
<span class="line"><span style="color:#79C0FF;">echo</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">management_agent.disable_metrics_collector</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">management_agent.disable_metrics_collector.conf</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFA657;">退出容器</span></span>
<span class="line"><span style="color:#79C0FF;">exit</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFA657;">重启rabbitmq</span></span>
<span class="line"><span style="color:#FFA657;">docker</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">restart</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">rabbitmq</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,141),o=[e];function r(c,t,i,D,y,u){return a(),n("div",null,o)}const C=s(p,[["render",r]]);export{F as __pageData,C as default};
