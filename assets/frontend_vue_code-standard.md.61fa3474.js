import{_ as s,c as n,o as a,a as l}from"./app.a9814699.js";const y=JSON.parse('{"title":"代码规范","description":"","frontmatter":{},"headers":[{"level":2,"title":"集成 editorconfig 配置","slug":"集成-editorconfig-配置","link":"#集成-editorconfig-配置","children":[]},{"level":2,"title":"使用 prettier 工具","slug":"使用-prettier-工具","link":"#使用-prettier-工具","children":[{"level":3,"title":"1 .安装 prettier","slug":"_1-安装-prettier","link":"#_1-安装-prettier","children":[]},{"level":3,"title":"2. 配置 .prettierrc 文件","slug":"_2-配置-prettierrc-文件","link":"#_2-配置-prettierrc-文件","children":[]},{"level":3,"title":"3. 创建 .prettierignore 忽略文件","slug":"_3-创建-prettierignore-忽略文件","link":"#_3-创建-prettierignore-忽略文件","children":[]},{"level":3,"title":"4. VSCode 安装 prettier 插件","slug":"_4-vscode-安装-prettier-插件","link":"#_4-vscode-安装-prettier-插件","children":[]},{"level":3,"title":"5. 在 Vscode 中设置","slug":"_5-在-vscode-中设置","link":"#_5-在-vscode-中设置","children":[]},{"level":3,"title":"6. 测试 prettier 是否生效","slug":"_6-测试-prettier-是否生效","link":"#_6-测试-prettier-是否生效","children":[]}]},{"level":2,"title":"使用 ESLint 检测","slug":"使用-eslint-检测","link":"#使用-eslint-检测","children":[{"level":3,"title":"1. 安装 ESLint","slug":"_1-安装-eslint","link":"#_1-安装-eslint","children":[]},{"level":3,"title":"2. VSCode 安装 ESLint 插件","slug":"_2-vscode-安装-eslint-插件","link":"#_2-vscode-安装-eslint-插件","children":[]},{"level":3,"title":"3. 解决 eslint 和 prettier 冲突的问题","slug":"_3-解决-eslint-和-prettier-冲突的问题","link":"#_3-解决-eslint-和-prettier-冲突的问题","children":[]},{"level":3,"title":"4.在 IDEA 或 WebStorm 中使用","slug":"_4-在-idea-或-webstorm-中使用","link":"#_4-在-idea-或-webstorm-中使用","children":[]}]},{"level":2,"title":"git Husky","slug":"git-husky","link":"#git-husky","children":[{"level":3,"title":"安装 husky","slug":"安装-husky","link":"#安装-husky","children":[]}]},{"level":2,"title":"git commit 规范","slug":"git-commit-规范","link":"#git-commit-规范","children":[{"level":3,"title":"代码提交风格","slug":"代码提交风格","link":"#代码提交风格","children":[]},{"level":3,"title":"代码提交验证","slug":"代码提交验证","link":"#代码提交验证","children":[]}]}],"relativePath":"frontend/vue/code-standard.md","lastUpdated":1672987619000}'),e={name:"frontend/vue/code-standard.md"},p=l(`<h1 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-hidden="true">#</a></h1><h2 id="集成-editorconfig-配置" tabindex="-1">集成 editorconfig 配置 <a class="header-anchor" href="#集成-editorconfig-配置" aria-hidden="true">#</a></h2><blockquote><p>EditorConfig 有助于为不同 IDE 编辑器上处理同一项目的多个开发人员维护一致的编码风格.</p></blockquote><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;"># http://editorconfig.org</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A5D6FF;">root = true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">[*] </span><span style="color:#8B949E;"># 表示所有文件适用</span></span>
<span class="line"><span style="color:#A5D6FF;">charset = utf-8</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;"># 设置文件字符集为 utf-8</span></span>
<span class="line"><span style="color:#A5D6FF;">indent_style = space</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;"># 缩进风格（tab | space）</span></span>
<span class="line"><span style="color:#A5D6FF;">indent_size = 2</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;"># 缩进大小</span></span>
<span class="line"><span style="color:#A5D6FF;">end_of_line = lf</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;"># 控制换行类型(lf | cr | crlf)</span></span>
<span class="line"><span style="color:#A5D6FF;">trim_trailing_whitespace = true</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;"># 去除行尾的任意空白字符</span></span>
<span class="line"><span style="color:#A5D6FF;">insert_final_newline = true</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;"># 始终在文件末尾插入一个新行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">[</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">.md] </span><span style="color:#8B949E;"># 表示仅 md 文件适用以下规则</span></span>
<span class="line"><span style="color:#A5D6FF;">max_line_length = off</span></span>
<span class="line"><span style="color:#A5D6FF;">trim_trailing_whitespace = false</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>VSCode 需要安装一个插件：EditorConfig for VS Code</p></div><p><img src="http://cdn.azhiyuan.com.cn/markdown/img/20230104171220.png" alt=""></p><h2 id="使用-prettier-工具" tabindex="-1">使用 prettier 工具 <a class="header-anchor" href="#使用-prettier-工具" aria-hidden="true">#</a></h2><div class="info custom-block"><p class="custom-block-title">介绍</p><p>Prettier 是一款强大的代码格式化工具，支持 JavaScript、TypeScript、CSS、SCSS、Less、JSX、Angular、Vue、GraphQL、JSON、Markdown 等语言，基本上前端能用到的文件格式它都可以搞定，是当下最流行的代码格式化工具。</p></div><h3 id="_1-安装-prettier" tabindex="-1">1 .安装 prettier <a class="header-anchor" href="#_1-安装-prettier" aria-hidden="true">#</a></h3><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">npm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">install</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">prettier</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-配置-prettierrc-文件" tabindex="-1">2. 配置 .prettierrc 文件 <a class="header-anchor" href="#_2-配置-prettierrc-文件" aria-hidden="true">#</a></h3><ul><li>useTabs：使用 tab 缩进还是空格缩进，选择 false；</li><li>tabWidth：tab 是空格的情况下，是几个空格，选择 2 个；</li><li>printWidth：当行字符的长度，推荐 100，也有人喜欢 120 或者 140；</li><li>singleQuote：使用单引号还是双引号，选 image.png 择 true，使用单引号；</li><li>trailingComma：在多行输入的尾逗号是否添加，设置为 <code>none</code>，比如对象类型的最后一个属性后面是否加一个 <code>,</code></li><li>semi：语句末尾是否要加分号，默认值 true，选择 false 表示不加；</li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">{</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">&quot;useTabs&quot;</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">&quot;tabWidth&quot;</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">&quot;printWidth&quot;</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">100</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">&quot;singleQuote&quot;</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">&quot;trailingComma&quot;</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">&quot;none&quot;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">&quot;semi&quot;</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">false</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-创建-prettierignore-忽略文件" tabindex="-1">3. 创建 <code>.prettierignore</code> 忽略文件 <a class="header-anchor" href="#_3-创建-prettierignore-忽略文件" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#c9d1d9;">*.log</span></span>
<span class="line"><span style="color:#c9d1d9;">*.tgz</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span>
<span class="line"><span style="color:#c9d1d9;">.idea.</span></span>
<span class="line"><span style="color:#c9d1d9;">.DS_Store</span></span>
<span class="line"><span style="color:#c9d1d9;">.vscode</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span>
<span class="line"><span style="color:#c9d1d9;">/dist/*</span></span>
<span class="line"><span style="color:#c9d1d9;">.local</span></span>
<span class="line"><span style="color:#c9d1d9;">.output.js</span></span>
<span class="line"><span style="color:#c9d1d9;">/node_modules/**</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span>
<span class="line"><span style="color:#c9d1d9;">**/*.svg</span></span>
<span class="line"><span style="color:#c9d1d9;">**/*.sh</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span>
<span class="line"><span style="color:#c9d1d9;">/public/*</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="_4-vscode-安装-prettier-插件" tabindex="-1">4. VSCode 安装 prettier 插件 <a class="header-anchor" href="#_4-vscode-安装-prettier-插件" aria-hidden="true">#</a></h3><p><img src="http://cdn.azhiyuan.com.cn/markdown/img/20230104172343.png" alt=""></p><h3 id="_5-在-vscode-中设置" tabindex="-1">5. 在 Vscode 中设置 <a class="header-anchor" href="#_5-在-vscode-中设置" aria-hidden="true">#</a></h3><ul><li>settings =&gt;format on save =&gt; 勾选上</li><li>settings =&gt; editor default format =&gt; 选择 prettier</li></ul><p><img src="http://cdn.azhiyuan.com.cn/markdown/img/20230104172651.png" alt=""></p><p><img src="http://cdn.azhiyuan.com.cn/markdown/img/20230104172751.png" alt=""></p><h3 id="_6-测试-prettier-是否生效" tabindex="-1">6. 测试 prettier 是否生效 <a class="header-anchor" href="#_6-测试-prettier-是否生效" aria-hidden="true">#</a></h3><ul><li>测试一：在代码中保存代码；</li><li>测试二：配置一次性修改的命令；</li></ul><p>在 package.json 中配置一个 scripts：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#A5D6FF;">&quot;prettier&quot;</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">&quot;prettier --write .&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="使用-eslint-检测" tabindex="-1">使用 ESLint 检测 <a class="header-anchor" href="#使用-eslint-检测" aria-hidden="true">#</a></h2><h3 id="_1-安装-eslint" tabindex="-1">1. 安装 ESLint <a class="header-anchor" href="#_1-安装-eslint" aria-hidden="true">#</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果创建项目的时候，选择了 ESLint，那么 Vue 会默认帮助我们配置需要的 ESLint 环境。</p></div><p>项目安装 ESLint</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">npm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">install</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">eslint</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_2-vscode-安装-eslint-插件" tabindex="-1">2. VSCode 安装 ESLint 插件 <a class="header-anchor" href="#_2-vscode-安装-eslint-插件" aria-hidden="true">#</a></h3><p><img src="http://cdn.azhiyuan.com.cn/markdown/img/20230104182321.png" alt=""><a href="http://cdn.azhiyuan.com.cn/markdown/img/2023/01/05/20230105001206.jpg" target="_blank" rel="noreferrer">http://cdn.azhiyuan.com.cn/markdown/img/2023/01/05/20230105001206.jpg</a></p><h3 id="_3-解决-eslint-和-prettier-冲突的问题" tabindex="-1">3. 解决 eslint 和 prettier 冲突的问题 <a class="header-anchor" href="#_3-解决-eslint-和-prettier-冲突的问题" aria-hidden="true">#</a></h3><blockquote><p>安装插件：（vue 在创建项目时，如果选择 prettier，那么这两个插件会自动安装）</p></blockquote><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">npm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">install</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">eslint-plugin-prettier</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">eslint-config-prettier</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>添加 prettier 插件：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">/* eslint-env node */</span></span>
<span class="line"><span style="color:#D2A8FF;">require</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;@rushstack/eslint-patch/modern-module-resolution&#39;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79C0FF;">module</span><span style="color:#C9D1D9;">.</span><span style="color:#79C0FF;">exports</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// ...</span></span>
<span class="line"><span style="color:#C9D1D9;">  extends: [</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#A5D6FF;">&#39;plugin:vue/vue3-essential&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#A5D6FF;">&#39;eslint:recommended&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#A5D6FF;">&#39;@vue/eslint-config-typescript&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#A5D6FF;">&#39;@vue/eslint-config-prettier&#39;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#A5D6FF;">&#39;plugin:prettier/recommended&#39;</span></span>
<span class="line"><span style="color:#C9D1D9;">  ],</span></span>
<span class="line"><span style="color:#C9D1D9;">  rules: {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">// 此处配置规则</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#A5D6FF;">&#39;vue/multi-word-component-names&#39;</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">&#39;off&#39;</span></span>
<span class="line"><span style="color:#C9D1D9;">  }</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// ...</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_4-在-idea-或-webstorm-中使用" tabindex="-1">4.在 IDEA 或 WebStorm 中使用 <a class="header-anchor" href="#_4-在-idea-或-webstorm-中使用" aria-hidden="true">#</a></h3><ul><li>在设置中搜索 ESLint 选择自动 ESLint 配置 和 保存时允许 eslint --fix</li></ul><p><img src="http://cdn.azhiyuan.com.cn/markdown/img/20230104193551.png" alt=""></p><p><img src="http://cdn.azhiyuan.com.cn/markdown/img/20230104193914.png" alt=""></p><h2 id="git-husky" tabindex="-1">git Husky <a class="header-anchor" href="#git-husky" aria-hidden="true">#</a></h2><blockquote><p>虽然我们已经要求项目使用 eslint 了，但是不能保证组员提交代码之前都将 eslint 中的问题解决掉</p></blockquote><ul><li><p>也就是我们希望保证代码仓库中的代码都是符合 eslint 规范的；</p></li><li><p>那么我们需要在组员执行 <code>git commit</code> 命令的时候对其进行校验，如果不符合 eslint 规范，那么自动通过规范进行修复；</p></li></ul><p>那么如何做到这一点呢？可以通过 Husky 工具：</p><ul><li>husky 是一个 git hook 工具，可以帮助我们触发 git 提交的各个阶段：pre-commit、commit-msg、pre-push</li></ul><h3 id="安装-husky" tabindex="-1">安装 husky <a class="header-anchor" href="#安装-husky" aria-hidden="true">#</a></h3><p>这里我们可以使用自动配置命令：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">npx</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">husky-init</span><span style="color:#C9D1D9;"> &amp;&amp; </span><span style="color:#FFA657;">npm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">install</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时会在项目目录下创建 <code>.husky</code> 文件夹</p><p>在 <code>.husky</code> 文件夹中创建 <code>pre-commit</code> 文件</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="color:#79C0FF;">.</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;$(</span><span style="color:#FFA657;">dirname</span><span style="color:#A5D6FF;"> </span><span style="color:#79C0FF;">--</span><span style="color:#A5D6FF;"> &quot;</span><span style="color:#79C0FF;">$0</span><span style="color:#A5D6FF;">&quot;)/_/husky.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;"># 执行 package.json 中的 lint脚本</span></span>
<span class="line"><span style="color:#FFA657;">npm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">run</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">lint</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这个时候执行 git commit 的时候会自动对代码进行 lint 校验。</p><h2 id="git-commit-规范" tabindex="-1">git commit 规范 <a class="header-anchor" href="#git-commit-规范" aria-hidden="true">#</a></h2><h3 id="代码提交风格" tabindex="-1">代码提交风格 <a class="header-anchor" href="#代码提交风格" aria-hidden="true">#</a></h3><blockquote><p>通常 git commit 会按照统一的风格提交，可以快速定位每次的提交内容，方便之后对版本进行控制。</p></blockquote><p>但是如果每次手动来编写这些是比较麻烦的事情，我们可以使用一个工具：Commitizen</p><ul><li>Commitizen 是一个帮助我们编写规范 commit message 的工具</li></ul><ol><li>安装 Commitizen</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">npm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">install</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">commitizen</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>安装 cz-conventional-changelog，并且初始化 cz-conventional-changelog</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">npx</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">commitizen</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">init</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">cz-conventional-changelog</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">--save-dev</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">--save-exact</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个命令会帮助我们安装 cz-conventional-changelog , 并且在 package.json 中进行配置</p><p>这个时候我们提交代码需要使用 <code>npx cz</code>：</p><ul><li>第一步是选择 type，本次更新的类型</li></ul><table><thead><tr><th>Type</th><th>作用</th></tr></thead><tbody><tr><td>feat</td><td>新增特性 (feature)</td></tr><tr><td>fix</td><td>修复 Bug(bug fix)</td></tr><tr><td>docs</td><td>修改文档 (documentation)</td></tr><tr><td>style</td><td>代码格式修改(white-space, formatting, missing semi colons, etc)</td></tr><tr><td>refactor</td><td>代码重构(refactor)</td></tr><tr><td>perf</td><td>改善性能(A code change that improves performance)</td></tr><tr><td>test</td><td>测试(when adding missing tests)</td></tr><tr><td>build</td><td>变更项目构建或外部依赖（例如 scopes: webpack、gulp、npm 等）</td></tr><tr><td>ci</td><td>更改持续集成软件的配置文件和 package 中的 scripts 命令，例如 scopes: Travis, Circle 等</td></tr><tr><td>chore</td><td>变更构建流程或辅助工具(比如更改测试环境)</td></tr><tr><td>revert</td><td>代码回退</td></tr></tbody></table><ul><li>第二步选择本次修改的范围（作用域）</li></ul><p><img src="http://cdn.azhiyuan.com.cn/markdown/img/20230104184328.png" alt=""></p><ul><li>第三步选择提交的信息</li></ul><p><img src="http://cdn.azhiyuan.com.cn/markdown/img/20230104184347.png" alt=""></p><ul><li>第四步提交详细的描述信息</li></ul><p><img src="http://cdn.azhiyuan.com.cn/markdown/img/20230104184356.png" alt=""></p><ul><li>第五步是否是一次重大的更改</li></ul><p><img src="http://cdn.azhiyuan.com.cn/markdown/img/20230104184410.png" alt=""></p><ul><li>第六步是否影响某个 open issue</li></ul><p><img src="http://cdn.azhiyuan.com.cn/markdown/img/20230104184416.png" alt=""></p><p>我们也可以在 <code>package.json</code> 的 <code>scripts</code> 中构建一个命令来执行 cz：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">{</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">&quot;scripts&quot;</span><span style="color:#C9D1D9;">: {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">// ...</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">&quot;commit&quot;</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">&quot;cz&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">  }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="代码提交验证" tabindex="-1">代码提交验证 <a class="header-anchor" href="#代码提交验证" aria-hidden="true">#</a></h3><blockquote><p>如果我们按照 cz 来规范了提交风格，但是依然有同事通过 <code>git commit</code> 按照不规范的格式提交应该怎么办呢？</p></blockquote><ul><li>我们可以通过 commitlint 来限制提交；</li></ul><ol><li>安装 @commitlint/config-conventional 和 @commitlint/cli</li></ol><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">npm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">i</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">@commitlint/config-conventional</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">@commitlint/cli</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">-D</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>在根目录创建 commitlint.config.js 文件，配置 commitlint</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79C0FF;">module</span><span style="color:#C9D1D9;">.</span><span style="color:#79C0FF;">exports</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  extends: [</span><span style="color:#A5D6FF;">&#39;@commitlint/config-conventional&#39;</span><span style="color:#C9D1D9;">]</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>3.使用 husky 生成 commit-msg 文件，验证提交信息：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">npx</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">husky</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">add</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">.husky/commit-msg</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;npx --no-install commitlint --edit </span><span style="color:#79C0FF;">$1</span><span style="color:#A5D6FF;">&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,87),t=[p];function r(o,i,c,d,u,m){return a(),n("div",null,t)}const h=s(e,[["render",r]]);export{y as __pageData,h as default};
