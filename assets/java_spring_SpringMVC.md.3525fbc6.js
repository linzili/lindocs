import{_ as s,c as n,o as a,a as l}from"./app.368cfe21.js";const C=JSON.parse('{"title":"SpringMVC-01","description":"","frontmatter":{},"headers":[{"level":2,"title":"1.SpringMVC概述","slug":"_1-springmvc概述","link":"#_1-springmvc概述","children":[]},{"level":2,"title":"2.入门案例","slug":"_2-入门案例","link":"#_2-入门案例","children":[{"level":3,"title":"①导入相关依赖","slug":"_1导入相关依赖","link":"#_1导入相关依赖","children":[]},{"level":3,"title":"②配置web.xml","slug":"_2配置web-xml","link":"#_2配置web-xml","children":[]},{"level":3,"title":"③配置SpringMVC","slug":"_3配置springmvc","link":"#_3配置springmvc","children":[]},{"level":3,"title":"④创建测试用的jsp页面","slug":"_4创建测试用的jsp页面","link":"#_4创建测试用的jsp页面","children":[]},{"level":3,"title":"⑤编写Controller","slug":"_5编写controller","link":"#_5编写controller","children":[]}]},{"level":2,"title":"3.设置请求映射规则@RequestMapping","slug":"_3-设置请求映射规则-requestmapping","link":"#_3-设置请求映射规则-requestmapping","children":[{"level":3,"title":"3.1 指定请求路径","slug":"_3-1-指定请求路径","link":"#_3-1-指定请求路径","children":[]},{"level":3,"title":"3.2 指定请求方式","slug":"_3-2-指定请求方式","link":"#_3-2-指定请求方式","children":[]},{"level":3,"title":"3.3 指定请求参数","slug":"_3-3-指定请求参数","link":"#_3-3-指定请求参数","children":[]},{"level":3,"title":"3.4 指定请求头","slug":"_3-4-指定请求头","link":"#_3-4-指定请求头","children":[]},{"level":3,"title":"3.5 指定请求头Content-Type","slug":"_3-5-指定请求头content-type","link":"#_3-5-指定请求头content-type","children":[]}]},{"level":2,"title":"4.RestFul风格","slug":"_4-restful风格","link":"#_4-restful风格","children":[]},{"level":2,"title":"5.获取请求参数","slug":"_5-获取请求参数","link":"#_5-获取请求参数","children":[{"level":3,"title":"5.1 获取路径参数","slug":"_5-1-获取路径参数","link":"#_5-1-获取路径参数","children":[]},{"level":3,"title":"5.2 获取请求体中的Json格式参数","slug":"_5-2-获取请求体中的json格式参数","link":"#_5-2-获取请求体中的json格式参数","children":[]},{"level":3,"title":"5.3 获取QueryString格式参数","slug":"_5-3-获取querystring格式参数","link":"#_5-3-获取querystring格式参数","children":[]},{"level":3,"title":"5.4  相关注解其他属性","slug":"_5-4-相关注解其他属性","link":"#_5-4-相关注解其他属性","children":[]}]},{"level":2,"title":"1.类型转换器","slug":"_1-类型转换器","link":"#_1-类型转换器","children":[{"level":3,"title":"1.1 自定义类型转换器","slug":"_1-1-自定义类型转换器","link":"#_1-1-自定义类型转换器","children":[]},{"level":3,"title":"1.2 日期转换简便解决方案","slug":"_1-2-日期转换简便解决方案","link":"#_1-2-日期转换简便解决方案","children":[]}]},{"level":2,"title":"2.响应体响应数据（重点）","slug":"_2-响应体响应数据-重点","link":"#_2-响应体响应数据-重点","children":[{"level":3,"title":"2.1 数据放到响应体","slug":"_2-1-数据放到响应体","link":"#_2-1-数据放到响应体","children":[]},{"level":3,"title":"2.3 范例","slug":"_2-3-范例","link":"#_2-3-范例","children":[]}]},{"level":2,"title":"3.页面跳转","slug":"_3-页面跳转","link":"#_3-页面跳转","children":[]},{"level":2,"title":"4.视图解析器","slug":"_4-视图解析器","link":"#_4-视图解析器","children":[{"level":3,"title":"4.1使用步骤","slug":"_4-1使用步骤","link":"#_4-1使用步骤","children":[]},{"level":3,"title":"4.2 不进行前后缀拼接","slug":"_4-2-不进行前后缀拼接","link":"#_4-2-不进行前后缀拼接","children":[]}]},{"level":2,"title":"5.获取原生对象及相关数据","slug":"_5-获取原生对象及相关数据","link":"#_5-获取原生对象及相关数据","children":[]},{"level":2,"title":"6.获取请求头和Cookie","slug":"_6-获取请求头和cookie","link":"#_6-获取请求头和cookie","children":[{"level":3,"title":"6.1获取请求头","slug":"_6-1获取请求头","link":"#_6-1获取请求头","children":[]},{"level":3,"title":"6.2 获取Cookie","slug":"_6-2-获取cookie","link":"#_6-2-获取cookie","children":[]}]},{"level":2,"title":"7.JSP开发模式（了解）","slug":"_7-jsp开发模式-了解","link":"#_7-jsp开发模式-了解","children":[{"level":3,"title":"7.1 往Request域存数据并跳转","slug":"_7-1-往request域存数据并跳转","link":"#_7-1-往request域存数据并跳转","children":[]},{"level":3,"title":"7.2 从Request域中获取数据","slug":"_7-2-从request域中获取数据","link":"#_7-2-从request域中获取数据","children":[]},{"level":3,"title":"7.3 往Session域存数据并跳转","slug":"_7-3-往session域存数据并跳转","link":"#_7-3-往session域存数据并跳转","children":[]}]},{"level":2,"title":"1.拦截器","slug":"_1-拦截器","link":"#_1-拦截器","children":[{"level":3,"title":"1.1 应用场景","slug":"_1-1-应用场景","link":"#_1-1-应用场景","children":[]},{"level":3,"title":"1.2 拦截器和过滤器的区别","slug":"_1-2-拦截器和过滤器的区别","link":"#_1-2-拦截器和过滤器的区别","children":[]},{"level":3,"title":"1.3 创建并配置拦截器","slug":"_1-3-创建并配置拦截器","link":"#_1-3-创建并配置拦截器","children":[]},{"level":3,"title":"1.4 拦截器方法及参数讲解","slug":"_1-4-拦截器方法及参数讲解","link":"#_1-4-拦截器方法及参数讲解","children":[]},{"level":3,"title":"1.5 案例-登录状态拦截器","slug":"_1-5-案例-登录状态拦截器","link":"#_1-5-案例-登录状态拦截器","children":[]},{"level":3,"title":"1.6 多拦截器执行顺序","slug":"_1-6-多拦截器执行顺序","link":"#_1-6-多拦截器执行顺序","children":[]}]},{"level":2,"title":"2.统一异常处理","slug":"_2-统一异常处理","link":"#_2-统一异常处理","children":[{"level":3,"title":"2.1 HandlerExceptionResolver","slug":"_2-1-handlerexceptionresolver","link":"#_2-1-handlerexceptionresolver","children":[]},{"level":3,"title":"2.2 @ControllerAdvice（重点）","slug":"_2-2-controlleradvice-重点","link":"#_2-2-controlleradvice-重点","children":[]},{"level":3,"title":"2.3 总结","slug":"_2-3-总结","link":"#_2-3-总结","children":[]}]},{"level":2,"title":"3.文件上传","slug":"_3-文件上传","link":"#_3-文件上传","children":[{"level":3,"title":"3.1 文件上传要求","slug":"_3-1-文件上传要求","link":"#_3-1-文件上传要求","children":[]},{"level":3,"title":"3.2 SpringMVC接收上传过来的文件","slug":"_3-2-springmvc接收上传过来的文件","link":"#_3-2-springmvc接收上传过来的文件","children":[]},{"level":3,"title":"3.3 MultipartFile常见用法","slug":"_3-3-multipartfile常见用法","link":"#_3-3-multipartfile常见用法","children":[]}]},{"level":2,"title":"4.文件下载","slug":"_4-文件下载","link":"#_4-文件下载","children":[{"level":3,"title":"4.1 文件下载的要求","slug":"_4-1-文件下载的要求","link":"#_4-1-文件下载的要求","children":[]},{"level":3,"title":"4.2 代码实现","slug":"_4-2-代码实现","link":"#_4-2-代码实现","children":[]}]},{"level":2,"title":"5.SpringMVC执行流程","slug":"_5-springmvc执行流程","link":"#_5-springmvc执行流程","children":[{"level":3,"title":"5.1 类JSP开发模式执行流程","slug":"_5-1-类jsp开发模式执行流程","link":"#_5-1-类jsp开发模式执行流程","children":[]},{"level":3,"title":"5.2 前后端分离开发模式执行流程","slug":"_5-2-前后端分离开发模式执行流程","link":"#_5-2-前后端分离开发模式执行流程","children":[]}]}],"relativePath":"java/spring/SpringMVC.md","lastUpdated":1673188353000}'),p={name:"java/spring/SpringMVC.md"},e=l(`<h1 id="springmvc-01" tabindex="-1">SpringMVC-01 <a class="header-anchor" href="#springmvc-01" aria-hidden="true">#</a></h1><h2 id="_1-springmvc概述" tabindex="-1">1.SpringMVC概述 <a class="header-anchor" href="#_1-springmvc概述" aria-hidden="true">#</a></h2><p>​ Spring为展现层提供的基于MVC设计理念的优秀Web框架，是目前最主流的MVC框架之一。</p><p>​ 一种轻量级的、基于MVC的Web层应用框架。他能让我们对请求数据的处理，响应数据的处理，页面的跳转等等常见的web操作变得更加简单方便。</p><h2 id="_2-入门案例" tabindex="-1">2.入门案例 <a class="header-anchor" href="#_2-入门案例" aria-hidden="true">#</a></h2><h3 id="_1导入相关依赖" tabindex="-1">①导入相关依赖 <a class="header-anchor" href="#_1导入相关依赖" aria-hidden="true">#</a></h3><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependencies</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!-- servlet依赖 --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;javax.servlet&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;javax.servlet-api&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;3.1.0&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">scope</span><span style="color:#C9D1D9;">&gt;provided&lt;/</span><span style="color:#7EE787;">scope</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--jsp依赖 --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;javax.servlet.jsp&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;jsp-api&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;2.1&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">scope</span><span style="color:#C9D1D9;">&gt;provided&lt;/</span><span style="color:#7EE787;">scope</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--springmvc的依赖--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-webmvc&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;5.1.9.RELEASE&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!-- jackson，帮助进行json转换--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;com.fasterxml.jackson.core&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;jackson-databind&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;2.9.0&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">dependencies</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">build</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">plugins</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">plugin</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.apache.tomcat.maven&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;tomcat7-maven-plugin&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;2.2&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">configuration</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                    </span><span style="color:#8B949E;">&lt;!--端口--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                    &lt;</span><span style="color:#7EE787;">port</span><span style="color:#C9D1D9;">&gt;81&lt;/</span><span style="color:#7EE787;">port</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                    </span><span style="color:#8B949E;">&lt;!--项目路径--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                    &lt;</span><span style="color:#7EE787;">path</span><span style="color:#C9D1D9;">&gt;/&lt;/</span><span style="color:#7EE787;">path</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                    </span><span style="color:#8B949E;">&lt;!--解决get请求中文乱码--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                    &lt;</span><span style="color:#7EE787;">uriEncoding</span><span style="color:#C9D1D9;">&gt;utf-8&lt;/</span><span style="color:#7EE787;">uriEncoding</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;/</span><span style="color:#7EE787;">configuration</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;/</span><span style="color:#7EE787;">plugin</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">plugins</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">build</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h3 id="_2配置web-xml" tabindex="-1">②配置web.xml <a class="header-anchor" href="#_2配置web-xml" aria-hidden="true">#</a></h3><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">servlet</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">servlet-name</span><span style="color:#C9D1D9;">&gt;DispatcherServlet&lt;/</span><span style="color:#7EE787;">servlet-name</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">servlet-class</span><span style="color:#C9D1D9;">&gt;org.springframework.web.servlet.DispatcherServlet&lt;/</span><span style="color:#7EE787;">servlet-class</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--</span></span>
<span class="line"><span style="color:#8B949E;">            为DispatcherServlet提供初始化参数的</span></span>
<span class="line"><span style="color:#8B949E;">            设置springmvc配置文件的路径</span></span>
<span class="line"><span style="color:#8B949E;">                name是固定的，必须是contextConfigLocation</span></span>
<span class="line"><span style="color:#8B949E;">                value指的是SpringMVC配置文件的位置</span></span>
<span class="line"><span style="color:#8B949E;">         --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">init-param</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">param-name</span><span style="color:#C9D1D9;">&gt;contextConfigLocation&lt;/</span><span style="color:#7EE787;">param-name</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">param-value</span><span style="color:#C9D1D9;">&gt;classpath:spring-mvc.xml&lt;/</span><span style="color:#7EE787;">param-value</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">init-param</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--</span></span>
<span class="line"><span style="color:#8B949E;">            指定项目启动就初始化DispatcherServlet</span></span>
<span class="line"><span style="color:#8B949E;">         --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">load-on-startup</span><span style="color:#C9D1D9;">&gt;1&lt;/</span><span style="color:#7EE787;">load-on-startup</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">servlet</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">servlet-mapping</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">servlet-name</span><span style="color:#C9D1D9;">&gt;DispatcherServlet&lt;/</span><span style="color:#7EE787;">servlet-name</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--</span></span>
<span class="line"><span style="color:#8B949E;">             /           表示当前servlet映射除jsp之外的所有请求（包含静态资源）</span></span>
<span class="line"><span style="color:#8B949E;">             *.do        表示.do结尾的请求路径才能被SpringMVC处理(老项目会出现)</span></span>
<span class="line"><span style="color:#8B949E;">             /*          表示当前servlet映射所有请求（包含静态资源,jsp），不应该使用其配置DispatcherServlet</span></span>
<span class="line"><span style="color:#8B949E;">         --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">url-pattern</span><span style="color:#C9D1D9;">&gt;/&lt;/</span><span style="color:#7EE787;">url-pattern</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">servlet-mapping</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--乱码处理过滤器，由SpringMVC提供--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!-- 处理post请求乱码 --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">filter</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">filter-name</span><span style="color:#C9D1D9;">&gt;CharacterEncodingFilter&lt;/</span><span style="color:#7EE787;">filter-name</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">filter-class</span><span style="color:#C9D1D9;">&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/</span><span style="color:#7EE787;">filter-class</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">init-param</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">&lt;!-- name固定不变，value值根据需要设置 --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">param-name</span><span style="color:#C9D1D9;">&gt;encoding&lt;/</span><span style="color:#7EE787;">param-name</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">param-value</span><span style="color:#C9D1D9;">&gt;UTF-8&lt;/</span><span style="color:#7EE787;">param-value</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">init-param</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">filter</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">filter-mapping</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">filter-name</span><span style="color:#C9D1D9;">&gt;CharacterEncodingFilter&lt;/</span><span style="color:#7EE787;">filter-name</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!-- 所有请求都设置utf-8的编码 --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">url-pattern</span><span style="color:#C9D1D9;">&gt;/*&lt;/</span><span style="color:#7EE787;">url-pattern</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">filter-mapping</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><h3 id="_3配置springmvc" tabindex="-1">③配置SpringMVC <a class="header-anchor" href="#_3配置springmvc" aria-hidden="true">#</a></h3><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">   </span><span style="color:#8B949E;">&lt;!--</span></span>
<span class="line"><span style="color:#8B949E;">    SpringMVC只扫描controller包即可</span></span>
<span class="line"><span style="color:#8B949E;">--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">   &lt;</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">base-package</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.controller&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">   </span><span style="color:#8B949E;">&lt;!-- 解决静态资源访问问题，如果不加mvc:annotation-driven会导致无法访问handler--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">   &lt;</span><span style="color:#7EE787;">mvc:default-servlet-handler</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">   </span><span style="color:#8B949E;">&lt;!--解决响应乱码--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">   &lt;</span><span style="color:#7EE787;">mvc:annotation-driven</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">       &lt;</span><span style="color:#7EE787;">mvc:message-converters</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">           &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">               &lt;</span><span style="color:#7EE787;">constructor-arg</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;utf-8&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">           &lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">       &lt;/</span><span style="color:#7EE787;">mvc:message-converters</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">   &lt;/</span><span style="color:#7EE787;">mvc:annotation-driven</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_4创建测试用的jsp页面" tabindex="-1">④创建测试用的jsp页面 <a class="header-anchor" href="#_4创建测试用的jsp页面" aria-hidden="true">#</a></h3><p>在webapp下创建success.jsp</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA198;font-style:italic;">&lt;</span><span style="color:#C9D1D9;">%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">html</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">head</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">title</span><span style="color:#C9D1D9;">&gt;Title&lt;/</span><span style="color:#7EE787;">title</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">head</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">body</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">成功</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">body</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">html</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_5编写controller" tabindex="-1">⑤编写Controller <a class="header-anchor" href="#_5编写controller" aria-hidden="true">#</a></h3><p>定义一个类，在类上加上@Controller注解，声明其是一个Controller。主要创建在之前注解扫描所配置的包下。</p><p>然后定义一个方法，在方法上加上@RequestMapping来指定哪些请求会被该方法处理。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/hello&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">hello</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">name</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Hello&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_3-设置请求映射规则-requestmapping" tabindex="-1">3.设置请求映射规则@RequestMapping <a class="header-anchor" href="#_3-设置请求映射规则-requestmapping" aria-hidden="true">#</a></h2><p>​ 该注解可以加到方法上或者是类上。（查看其源码可知）</p><p>​ 我们可以用其来设定所能匹配请求的要求。只有符合了设置的要求，请求才能被加了该注解的方法或类处理。</p><h3 id="_3-1-指定请求路径" tabindex="-1">3.1 指定请求路径 <a class="header-anchor" href="#_3-1-指定请求路径" aria-hidden="true">#</a></h3><p>​ path或者value属性都可以用来指定请求路径。</p><p>例如：</p><p>​ 我们期望让请求的资源路径为/test/testPath的请求能够被testPath方法处理则可以写如下代码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//这样写之后 类里面的所有方法前面的注解 都先加上此注解之后再加自己的注解 例如：</span></span>
<span class="line"><span style="color:#8B949E;">//test/testPath   /test/hello</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/hello&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">hello</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">name</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Hello&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testPath&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testPath</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testPath&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="_3-2-指定请求方式" tabindex="-1">3.2 指定请求方式 <a class="header-anchor" href="#_3-2-指定请求方式" aria-hidden="true">#</a></h3><p>​ method属性可以用来指定可处理的请求方式。</p><p>例如：</p><p>​ 我们期望让请求的资源路径为/test/testMethod的POST请求能够被testMethod方法处理。则可以写如下代码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//这样写之后 类里面的所有方法前面的注解 都先加上此注解之后再加自己的注解 例如：</span></span>
<span class="line"><span style="color:#8B949E;">//test/testPath   /test/hello</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testMethod&quot;</span><span style="color:#C9D1D9;"> ,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testMethod</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testMethod&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>注意：我们也可以运用如下注解来进行替换</p><ul><li><p>​ @PostMapping 等价于 @RequestMapping(method = RequestMethod.POST)</p></li><li><p>​ @GetMapping 等价于 @RequestMapping(method = RequestMethod.GET)</p></li><li><p>​ @PutMapping 等价于 @RequestMapping(method = RequestMethod.PUT)</p></li><li><p>​ @DeleteMapping 等价于 @RequestMapping(method = RequestMethod.DELETE)</p></li></ul><p>例如：</p><p>​ 上面的需求我们可以使用下面的写法实现</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">GetMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testMethod&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testMethod</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testMethod&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-3-指定请求参数" tabindex="-1">3.3 指定请求参数 <a class="header-anchor" href="#_3-3-指定请求参数" aria-hidden="true">#</a></h3><p>​ 我们可以使用params属性来对请求参数进行一些限制。可以要求必须具有某些参数，或者是某些参数必须是某个值，或者是某些参数必须不是某个值。</p><p><strong>注意：网页报错400类的信息都是请求的问题，要么是请求路径不对（404）要么是请求方式不对（405）等等</strong></p><p>例如：</p><p>​ 我们期望让请求的资源路径为/test/testParams的GET请求，并且请求参数中具有code参数的请求能够被testParams方法处理。则可以写如下代码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testParams&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">params</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;code&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testParams</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testParams处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果是要求<strong>不能有code</strong>这个参数可以改成如下形式:(只要在这个参数名前面加个&#39;!&#39;就好了)</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testParams&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">params</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;!code&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testParams</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testParams处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果要求有code这个参数，并且要求参数值<strong>必须是某个值</strong>可以改成如下形式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testParams&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">params</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;code=dxkj&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testParams</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testParams处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果要求有code这参数，并且这参数值必须不是某个值可以改成如下形式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testParams&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">params</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;code!=sgct&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testParams</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testParams处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_3-4-指定请求头" tabindex="-1">3.4 指定请求头 <a class="header-anchor" href="#_3-4-指定请求头" aria-hidden="true">#</a></h3><p>​ 我们可以使用<strong>headers</strong>属性来对请求头进行一些限制。</p><p>例如：</p><p>​ 我们期望让请求的资源路径为**/test/test/Headers<strong>的</strong>GET**请求，<strong>并且要求头中具有deviceType</strong>的请求能够被testHeaders方法处理。则可以写如下代码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testHeaders&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">headers</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;deviceType&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testHeaders</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testHeaders处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如果是要求不能有deviceType这个请求头可以把他改成如下形式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testHeaders&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">headers</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;!deviceType&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testHeaders</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testHeaders处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>​ 如果要求有deviceType这个请求头，并且其值必须<strong>是某个值</strong>可以改成如下形式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testHeaders&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">headers</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;deviceType=ios&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testHeaders</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testHeaders处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>​ 如果要求有deviceType这个请求头，并且其值必须<strong>不是某个值</strong>可以改成如下形式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testHeaders&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">headers</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;deviceType!=ios&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testHeaders</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testHeaders处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_3-5-指定请求头content-type" tabindex="-1">3.5 指定请求头Content-Type <a class="header-anchor" href="#_3-5-指定请求头content-type" aria-hidden="true">#</a></h3><p>​ 我们可以使用<strong>consumes</strong>属性来对<strong>Content-Type</strong>这个请求头进行一些限制。</p><h4 id="范例一" tabindex="-1">范例一 <a class="header-anchor" href="#范例一" aria-hidden="true">#</a></h4><p>​ 我们期望让请求的资源路径为**/test/testConsumes<strong>的POST请求，并且请求头中的Content-Type头必须为</strong>multipart/from-data**的请求能够被testConsumes方法处理。则可以写如下代码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testConsumes&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.POST,</span><span style="color:#79C0FF;">consumes</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;multipart/form-data&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testConsumes</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testConsumes&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="范例二" tabindex="-1">范例二 <a class="header-anchor" href="#范例二" aria-hidden="true">#</a></h4><p>​ 如果我们要求请求头<strong>Content-Type</strong>的值必须<strong>不能为某个multipart/from-data</strong>则可以改成如下形式：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testConsumes&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.POST,</span><span style="color:#79C0FF;">consumes</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;!multipart/form-data&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testConsumes</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testConsumes&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_4-restful风格" tabindex="-1">4.RestFul风格 <a class="header-anchor" href="#_4-restful风格" aria-hidden="true">#</a></h2><p>​ RestFul是一种网络应用程序的设计风格和开发方式。现在有很多互联网企业的<strong>网络接口</strong>定义都会符 合其风格。</p><p>主要规则如下：</p><ul><li>​ 每一个URI代表一种资源</li><li>​ 客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源，PUT用来更新资源，DELETE用来删除资源</li><li>​ 简单参数例如id等写到url路径上 例如：/user/1 HTTP GET:获取id=1的user信息 /user/1 HTTP DELETE ： 删除id = 1 的user信息</li><li>复杂的参数转换成json或者xml（现在基本都是json）写到请求体中。</li></ul><h2 id="_5-获取请求参数" tabindex="-1">5.获取请求参数 <a class="header-anchor" href="#_5-获取请求参数" aria-hidden="true">#</a></h2><h3 id="_5-1-获取路径参数" tabindex="-1">5.1 获取路径参数 <a class="header-anchor" href="#_5-1-获取路径参数" aria-hidden="true">#</a></h3><p>​ RestFul风格的接口一些参数是在请求路径上的。类似：/user/1 这里的1就是id。</p><p>​ 如果我们想获取这种格式的数据可以使用@PathVariable来实现。</p><h4 id="范例一-1" tabindex="-1">范例一 <a class="header-anchor" href="#范例一-1" aria-hidden="true">#</a></h4><p>​ 要求定义个RestFul风格的接口，该接口可以用来根据id查询用户。请求路径要求为 /user ，请求方式要求为GET。</p><p>​ 而请求参数id要写在请求路径上，例如 /user/1 这里的1就是id；</p><p>我们可以定义如下方法，通过如下方式来获取路径参数：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/user/{id}&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">findUserById</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">PathVariable</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;">) Integer </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(id);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;findUserById&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="范例二-1" tabindex="-1">范例二 <a class="header-anchor" href="#范例二-1" aria-hidden="true">#</a></h4><p>​ 如果这个接口，想根据id和username查询用户。请求路径要求为 /user ， 请求方式要求为GET。</p><p>​ 二请求参数id和name要写在请求路径上，例如 /user/q/zs 这里的1就是id，zs是name</p><p>​ 我们可以定义如下方法，通过如下方法来获取路径参数：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/user/{id}/{name}&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">findUserById</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">PathVariable</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;">) Integer </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;">,@</span><span style="color:#FF7B72;">PathVariable</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">) String </span><span style="color:#FFA657;">name</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(id);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;findUserById&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_5-2-获取请求体中的json格式参数" tabindex="-1">5.2 获取请求体中的Json格式参数 <a class="header-anchor" href="#_5-2-获取请求体中的json格式参数" aria-hidden="true">#</a></h3><p>​ RestFul风格的接口一些比较复杂的参数会转换成Json通过请求体传递过来。这种时候我们可以使用@RequestBody注解获取请求体中的数据。</p><h4 id="_5-2-1-配置" tabindex="-1">5.2.1 配置 <a class="header-anchor" href="#_5-2-1-配置" aria-hidden="true">#</a></h4><p>​ SpringMVC可以帮我们把json数据转换成我们需要的类型。但是需要进行一些基本配置。SpringMVC默认会使用Jackson来进行json解析。所以我们需要导入Jackson的依赖（前面我们已经导入过）。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!-- jackson，帮助进行json转换--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;com.fasterxml.jackson.core&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;jackson-databind&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;2.9.0&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>然后还要配置注解驱动（前面也已经导入过了）</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">mvc:message-converters</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">mvc:message-converters</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_5-2-2-使用" tabindex="-1">5.2.2 使用 <a class="header-anchor" href="#_5-2-2-使用" aria-hidden="true">#</a></h4><h5 id="范例一-2" tabindex="-1">范例一 <a class="header-anchor" href="#范例一-2" aria-hidden="true">#</a></h5><p>​ 要求定义个RestFul风格的接口，该接口可以用来新建用户。请求路径为/user ，请求方式要求为POST。</p><p>用户数据会转换成json通过请求体传递。</p><p>​ 请求体数据</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/user&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">insertUser</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestBody</span><span style="color:#C9D1D9;"> User </span><span style="color:#FFA657;">user</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;insertUser&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(user);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h6 id="_1-获取参数封装成实体对象" tabindex="-1">1.获取参数封装成实体对象 <a class="header-anchor" href="#_1-获取参数封装成实体对象" aria-hidden="true">#</a></h6><p>​ 如果我们想要把json数据获取出来封装User对象可以这样定义：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">{</span><span style="color:#7EE787;">&quot;name&quot;</span><span style="color:#C9D1D9;">:</span><span style="color:#A5D6FF;">&quot;敦禧&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#7EE787;">&quot;age&quot;</span><span style="color:#C9D1D9;">:</span><span style="color:#79C0FF;">18</span><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>User实体类如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">User</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">id;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>注意：json转换的时候要求传递的json变量名字必须和实体类的名字一样，不然就会出现无法映射的情况。</strong></p><h6 id="_2-获取参数封装成map集合" tabindex="-1">2.获取参数封装成map集合 <a class="header-anchor" href="#_2-获取参数封装成map集合" aria-hidden="true">#</a></h6><p>​ 也可以把该数据获取出来封装成map集合：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/user&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">insertUser</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestBody</span><span style="color:#C9D1D9;"> Map map){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;insertUser&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(map);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>只需要修改一下接受的类型就行了</p><p>范例二</p><p>​ 如果请求体传过来的数据是一个User集合转换成的json，json数据可以这样定义：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">[{</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#FF7B72;">:</span><span style="color:#A5D6FF;">&quot;敦禧0&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;age&quot;</span><span style="color:#FF7B72;">:</span><span style="color:#79C0FF;">18</span><span style="color:#C9D1D9;">},{</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#FF7B72;">:</span><span style="color:#A5D6FF;">&quot;敦禧1&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;age&quot;</span><span style="color:#FF7B72;">:</span><span style="color:#79C0FF;">18</span><span style="color:#C9D1D9;">},{</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#FF7B72;">:</span><span style="color:#A5D6FF;">&quot;敦禧2&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;age&quot;</span><span style="color:#FF7B72;">:</span><span style="color:#79C0FF;">18</span><span style="color:#C9D1D9;">}]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ handler方法定义</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/users&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">insertUsers</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestBody</span><span style="color:#C9D1D9;"> List</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">User</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> map){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;insertUsers&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(map);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_5-2-3-注意事项" tabindex="-1">5.2.3 注意事项： <a class="header-anchor" href="#_5-2-3-注意事项" aria-hidden="true">#</a></h4><p>​ 如果需要使用@RequestBody来获取请求体中Json并且进行转换，要求请求头Content-Type的值要为：application/json。</p><h3 id="_5-3-获取querystring格式参数" tabindex="-1">5.3 获取QueryString格式参数 <a class="header-anchor" href="#_5-3-获取querystring格式参数" aria-hidden="true">#</a></h3><p>​ 如果接口的参数是使用QueryString格式的话，我们也可以使用SpringMVC快速获取参数。</p><p>​ 我们可以使用@RequestParam来获取QueryString格式的参数。</p><h4 id="_5-3-1-使用" tabindex="-1">5.3.1 使用 <a class="header-anchor" href="#_5-3-1-使用" aria-hidden="true">#</a></h4><h5 id="范例一-3" tabindex="-1">范例一 <a class="header-anchor" href="#范例一-3" aria-hidden="true">#</a></h5><p>​ 要求定义个接口，该接口请求路径要为 /testRequestParam，请求方式无要求。参数为id和name和likes。</p><p>使用QueryString的格式传递。</p><h6 id="_1-参数单独的获取" tabindex="-1">1.参数单独的获取 <a class="header-anchor" href="#_1-参数单独的获取" aria-hidden="true">#</a></h6><p>​ 如果我们想把id，name,likes，单独获取出来可以使用如下写法</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testRequestParam&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testRequestParam</span><span style="color:#C9D1D9;">(Integer id,String name,</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] likes){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testRequestParam&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(id);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(Arrays.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(likes));</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>要求：方法参数名和请求参数名一致，这种情况下我们可以省略@RequestParam注解</p><p>如果不一致，我们可以加上这个注解</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testRequestParam&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testRequestParam</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;">) Integer uid,@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">)String name,@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;likes&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] likes){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testRequestParam&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(uid);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(Arrays.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(likes));</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h6 id="_2-获取参数封装成实体对象" tabindex="-1">2.获取参数封装成实体对象 <a class="header-anchor" href="#_2-获取参数封装成实体对象" aria-hidden="true">#</a></h6><p>​ 如果我们想把这些参数封装到一个User对象中可以使用如下写法：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testRequestParam&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testRequestParam</span><span style="color:#C9D1D9;">(User user){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testRequestParam&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(user);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>User实体类的定义如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">User</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">id;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">likes;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>​ 测试时请求URL如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">http</span><span style="color:#FF7B72;">:</span><span style="color:#8B949E;">//localhost:81/testRquestParam?id=1&amp;name=敦禧&amp;likes=编程&amp;likes=学习&amp;likes=听歌</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ <strong>注意：实体类中的成员变量要和请求参数名对应上。并且要提供对应的set/get方法。</strong></p><h3 id="_5-4-相关注解其他属性" tabindex="-1">5.4 相关注解其他属性 <a class="header-anchor" href="#_5-4-相关注解其他属性" aria-hidden="true">#</a></h3><h4 id="_5-4-1-required" tabindex="-1">5.4.1 required <a class="header-anchor" href="#_5-4-1-required" aria-hidden="true">#</a></h4><p>​ 代表是否必须，默认值为true也就是必须要有对应的参数。如果没有就会报错。</p><p>​ 如果对应的参数可传可不传则可以把他设置为FALSE</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testRequestParam&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testRequestParam</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">required</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">) Integer uid,@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">)String name,@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;likes&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] likes){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testRequestParam&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(uid);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(Arrays.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(likes));</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_5-4-2-defaultvalue" tabindex="-1">5.4.2 defaultValue <a class="header-anchor" href="#_5-4-2-defaultvalue" aria-hidden="true">#</a></h4><p>​ 如果对应的参数没有，我们可以defaultValue属性设置默认值。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testRequestParam&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testRequestParam</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">required</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">defaultValue</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;777&quot;</span><span style="color:#C9D1D9;">) Integer uid,@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">)String name,@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;likes&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] likes){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testRequestParam&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(uid);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(Arrays.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(likes));</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h1 id="springmvc-02" tabindex="-1">SpringMVC-02 <a class="header-anchor" href="#springmvc-02" aria-hidden="true">#</a></h1><h2 id="_1-类型转换器" tabindex="-1">1.类型转换器 <a class="header-anchor" href="#_1-类型转换器" aria-hidden="true">#</a></h2><p>​ 虽然我们前面在获取参数的时候看起来非常轻松，但是在这个过程中是有可能出现一些问题的。</p><p>​ 例如：请求参数为success=1 我们期望把这个请求参数获取出来赋值给一个Boolean类型的变量。</p><p>​ 这里就会涉及到String--&gt;Boolean的类型转换了。实际上SpringMVC中内置了很多类型转换器来进行类型转换。也有专门进行String--》Boolean类型转换的转换器<strong>StringToBooleanConverter</strong>。</p><p>​ 如果是符合SpringMVC内置转换器的转换规则就可以很轻松的实现转换。但是如果不符合转换器的规则呢？</p><p>​ 例如：请求参数为birthday=2004-12-12我们期望把这个请求参数获取出来赋值给一个Date类型的变量。就不符合内置规则了。内置的可以把2004/12/12这种格式进行转换。这种情况下我们就可以选择自定义类型转换。</p><h3 id="_1-1-自定义类型转换器" tabindex="-1">1.1 自定义类型转换器 <a class="header-anchor" href="#_1-1-自定义类型转换器" aria-hidden="true">#</a></h3><h4 id="_1创建类实现converter接口" tabindex="-1">①创建类实现Converter接口 <a class="header-anchor" href="#_1创建类实现converter接口" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">StringToDateConverter</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Converter</span><span style="color:#C9D1D9;">&lt;</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">Date</span><span style="color:#C9D1D9;">&gt; {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Date </span><span style="color:#D2A8FF;">convert</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">s</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2实现convert方法" tabindex="-1">②实现convert方法 <a class="header-anchor" href="#_2实现convert方法" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Date </span><span style="color:#D2A8FF;">convert</span><span style="color:#C9D1D9;">(String s) {</span></span>
<span class="line"><span style="color:#8B949E;">//        String-&gt;Date</span></span>
<span class="line"><span style="color:#C9D1D9;">        Date</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">date</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        SimpleDateFormat</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">simpleDateFormat</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">SimpleDateFormat</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;yyyy-MM-dd&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">            date </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> simpleDateFormat.</span><span style="color:#D2A8FF;">parse</span><span style="color:#C9D1D9;">(s);</span></span>
<span class="line"><span style="color:#C9D1D9;">        } </span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;"> (ParseException </span><span style="color:#FFA657;">e</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            e.</span><span style="color:#D2A8FF;">printStackTrace</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> date;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="_3配置让springmvc使用自定义转换器" tabindex="-1">③配置让SpringMVC使用自定义转换器 <a class="header-anchor" href="#_3配置让springmvc使用自定义转换器" aria-hidden="true">#</a></h4><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!--解决响应乱码--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">mvc:annotation-driven</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">conversion-service</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;myConversionService&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">mvc:message-converters</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">constructor-arg</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;utf-8&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">mvc:message-converters</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">mvc:annotation-driven</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;myConversionService&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;converters&quot;</span><span style="color:#C9D1D9;"> &gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">set</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.converter.StringToDateConverter&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">set</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_1-2-日期转换简便解决方案" tabindex="-1">1.2 日期转换简便解决方案 <a class="header-anchor" href="#_1-2-日期转换简便解决方案" aria-hidden="true">#</a></h3><p>​ 如果是String到Date的转换我们也可以使用另外一种更方便的方式。使用@DateTimeFormat来指定字符串的格式。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testDateConverter&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testDataConverter</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">DateTimeFormat</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">pattern</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;yyyy-MM-dd&quot;</span><span style="color:#C9D1D9;">) Date birthday){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testDateConverter&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(birthday.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">());</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_2-响应体响应数据-重点" tabindex="-1">2.响应体响应数据（重点） <a class="header-anchor" href="#_2-响应体响应数据-重点" aria-hidden="true">#</a></h2><p>​ 无论是RestFul风格还是我们之前web阶段接触过的异步请求，都需要把数据转换成Json放入响应体中。</p><h3 id="_2-1-数据放到响应体" tabindex="-1">2.1 数据放到响应体 <a class="header-anchor" href="#_2-1-数据放到响应体" aria-hidden="true">#</a></h3><p>​ 我们的SpringMVC为我们提供了@ResponseBody来非常方便的把Json放到响应体中。</p><p>​ @ResponseBody可以加在哪些东西上面？<strong>类上和方法上</strong></p><p>​ 具体代码参考范例。</p><p>2.2 数据转换成Json</p><p>​ SpringMVC可以把我们进行Json的转换，不过需要进行相应的配置（已经配置过了）。</p><h4 id="_2-2-1-配置" tabindex="-1">2.2.1 配置 <a class="header-anchor" href="#_2-2-1-配置" aria-hidden="true">#</a></h4><h5 id="_1导入jackson依赖" tabindex="-1">①导入jackson依赖 <a class="header-anchor" href="#_1导入jackson依赖" aria-hidden="true">#</a></h5><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!-- jackson，帮助进行json转换--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;com.fasterxml.jackson.core&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;jackson-databind&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;2.9.0&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="_2开启mvc的注解驱动" tabindex="-1">②开启mvc的注解驱动 <a class="header-anchor" href="#_2开启mvc的注解驱动" aria-hidden="true">#</a></h5><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">mvc:annotation-driven</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">mvc:annotation-driven</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_2-2-2-使用" tabindex="-1">2.2.2 使用 <a class="header-anchor" href="#_2-2-2-使用" aria-hidden="true">#</a></h4><p>​ 只要把要转换的数据直接作为方法的返回值返回即可。SpringMVC会帮我们把返回值转换成json.</p><h3 id="_2-3-范例" tabindex="-1">2.3 范例 <a class="header-anchor" href="#_2-3-范例" aria-hidden="true">#</a></h3><h4 id="范例一-4" tabindex="-1">范例一 <a class="header-anchor" href="#范例一-4" aria-hidden="true">#</a></h4><p>​ 要求定义个RestFul风格的接口，该接口可以用来根据ID查询用户。请求路径要为/response/user，请求方式要求为GET。</p><p>​ 而请求参数ID要写在请求路径上，例如/response/user/1 这里的id就是1</p><p>​ 要求获取参数ID，去查询对应的id的用户信息（模拟查询即可，可以选择直接new一个对象），并且转换成json响应到响应体中。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/response&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ResponseController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">GetMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/user/{id}&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//路径上的标识 要加PathVariable来表示 参数名和占位符一样 所以不用去加属性</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">ResponseBody</span><span style="color:#8B949E;">//这个方法的返回值放入到响应体中</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> User </span><span style="color:#D2A8FF;">testResponse</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">PathVariable</span><span style="color:#C9D1D9;"> Integer </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        User</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">user</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;1&quot;</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">);</span><span style="color:#8B949E;">//插件问题，导致无法读到构造方法</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> user;</span><span style="color:#8B949E;">//因为做过配置，所以会把返回值转换成json</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="范例二-2" tabindex="-1">范例二 <a class="header-anchor" href="#范例二-2" aria-hidden="true">#</a></h4><p>​ 要求定义个RestFul风格的接口，该接口可以查询所有用户。请求路径要求为/response/user,请求方式要求为GET。</p><p>​ 去查询所有的用户信息（模拟查询即可），并且转换成json响应到响应体中。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">GetMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/user&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//路径上的标识 要加PathVariable来表示 参数名和占位符一样 所以不用去加属性</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ResponseBody</span><span style="color:#8B949E;">//这个方法的返回值放入到响应体中</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> List</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">User</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">testResponse2</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">    List</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">User</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">list</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> ArrayList&lt;</span><span style="color:#FF7B72;">User</span><span style="color:#C9D1D9;">&gt;();</span></span>
<span class="line"><span style="color:#C9D1D9;">    list.</span><span style="color:#D2A8FF;">add</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;敦禧&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">15</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">));</span></span>
<span class="line"><span style="color:#C9D1D9;">    list.</span><span style="color:#D2A8FF;">add</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;敦禧&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">16</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">));</span></span>
<span class="line"><span style="color:#C9D1D9;">    list.</span><span style="color:#D2A8FF;">add</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">3</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;敦禧&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">17</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">));</span></span>
<span class="line"><span style="color:#C9D1D9;">    list.</span><span style="color:#D2A8FF;">add</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">4</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;敦禧&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">18</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">));</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> list;</span><span style="color:#8B949E;">//因为做过配置，所以会把返回值转换成json</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>​ 如果一个Controller中的所有方法返回值都要放入响应体，那么我们可以直接在类上面加@ResponseBody</p><p>​ 我们可以使用@RestController注解替换@Controller +@ResponseBody两个注解</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/response&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">//相当于@Controller +@ResponseBody</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ResponseController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">GetMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/user/{id}&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//路径上的标识 要加PathVariable来表示 参数名和占位符一样 所以不用去加属性</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> User </span><span style="color:#D2A8FF;">testResponse</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">PathVariable</span><span style="color:#C9D1D9;"> Integer </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        User</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">user</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;1&quot;</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">);</span><span style="color:#8B949E;">//插件问题，导致无法读到构造方法</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> user;</span><span style="color:#8B949E;">//因为做过配置，所以会把返回值转换成json</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">GetMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/user&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//路径上的标识 要加PathVariable来表示 参数名和占位符一样 所以不用去加属性</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> List&lt;</span><span style="color:#FF7B72;">User</span><span style="color:#C9D1D9;">&gt; </span><span style="color:#D2A8FF;">testResponse2</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        List</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">User</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">list</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> ArrayList&lt;</span><span style="color:#FF7B72;">User</span><span style="color:#C9D1D9;">&gt;();</span></span>
<span class="line"><span style="color:#C9D1D9;">        list.</span><span style="color:#D2A8FF;">add</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;敦禧&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">15</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">));</span></span>
<span class="line"><span style="color:#C9D1D9;">        list.</span><span style="color:#D2A8FF;">add</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;敦禧&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">16</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">));</span></span>
<span class="line"><span style="color:#C9D1D9;">        list.</span><span style="color:#D2A8FF;">add</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">3</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;敦禧&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">17</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">));</span></span>
<span class="line"><span style="color:#C9D1D9;">        list.</span><span style="color:#D2A8FF;">add</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">4</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;敦禧&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">18</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">));</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> list;</span><span style="color:#8B949E;">//因为做过配置，所以会把返回值转换成json</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="_3-页面跳转" tabindex="-1">3.页面跳转 <a class="header-anchor" href="#_3-页面跳转" aria-hidden="true">#</a></h2><p>​ 在SpringMVC中我们可以非常轻松的实现页面跳转，只需要把方法的返回值写成要跳转页面的路径即可。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">PageJumpController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testJump11&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testJump</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testJump&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​ 默认的跳转其实是转发的方式跳转的。我们也可以选择加上标识，在要跳转的路径前面加上<strong>forward：</strong>。这样SpringMVC也会帮我们请求转发。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">PageJumpController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testJump11&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testJump</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testJump&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;forward:/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>​ 如果想实现重定向跳转则可以在跳转路径前面加上**redirect：**进行标识。这样SpringMVC就会帮我们进行重定向跳转。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">PageJumpController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testJump11&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testJump</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testJump&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;redirect:/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_4-视图解析器" tabindex="-1">4.视图解析器 <a class="header-anchor" href="#_4-视图解析器" aria-hidden="true">#</a></h2><p>​ 如果我们经常需要跳转页面，并且页面所在的路径比较长，我们每次写完整路径就会显得有点麻烦。我们可以配置视图解析器，设置跳转路径的前缀和后缀。这样可以简化我们的书写。</p><h3 id="_4-1使用步骤" tabindex="-1">4.1使用步骤 <a class="header-anchor" href="#_4-1使用步骤" aria-hidden="true">#</a></h3><h4 id="_1配置视图解析器" tabindex="-1">①配置视图解析器 <a class="header-anchor" href="#_1配置视图解析器" aria-hidden="true">#</a></h4><p>​ 我们需要往SpringMVC容器中注入InternalResourceViewResolver对象。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!--配置视图解析器--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;resolver&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--/WEB-INF/page/test.jsp--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--要拼接的前缀--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;prefix&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;/WEB-INF/page/&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--要拼接的后缀--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;suffix&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;.jsp&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_2页面跳转" tabindex="-1">②页面跳转 <a class="header-anchor" href="#_2页面跳转" aria-hidden="true">#</a></h4><p>​ 视图解析器会在逻辑视图的基础上拼接得到物理视图。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testJumpToJsp&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testJumpToJsp</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;test&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4-2-不进行前后缀拼接" tabindex="-1">4.2 不进行前后缀拼接 <a class="header-anchor" href="#_4-2-不进行前后缀拼接" aria-hidden="true">#</a></h3><p>​ 如果在配置了视图解析器的情况下，某些方法中不想拼接前后缀去跳转。这种情况下我们可以再跳转路径前面加**forward：<strong>或者</strong>redirect：**进行标识。这样就不会进行前后缀拼接了。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testJump11&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testJump</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testJump&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;redirect:/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意事项：</p><p>​ 如果在源码中发现有返回值是一个字符串的，这时候要看一下配置文件中是否配置了视图解析器。还有用来跳转的方法上面一定不能加上@ResponseBody注解，加上之后就把返回值放入响应体中了，就不能实现跳转了</p><h2 id="_5-获取原生对象及相关数据" tabindex="-1">5.获取原生对象及相关数据 <a class="header-anchor" href="#_5-获取原生对象及相关数据" aria-hidden="true">#</a></h2><p>​ 我们之前在web阶段我们经常要用到Request对象，response，session对象等。我们也可以通过SpringMVC获取到这些对象。（不过在MVC中我们很少获取这些对象，因为有更简单的方式，避免了我们使用这些 原生对象相对繁琐的API。）</p><p>​ 我们只需要在方法上添加相应类型的参数即可，但是注意数据类型不要写错了，SpringMVC会把我们需要的对象传给我们的形参。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">RequestResponseController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/getReqAndRes&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">getReqAndRes</span><span style="color:#C9D1D9;">(HttpServletRequest </span><span style="color:#FFA657;">request</span><span style="color:#C9D1D9;">, HttpServletResponse </span><span style="color:#FFA657;">response</span><span style="color:#C9D1D9;"> , HttpSession </span><span style="color:#FFA657;">session</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;test&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_6-获取请求头和cookie" tabindex="-1">6.获取请求头和Cookie <a class="header-anchor" href="#_6-获取请求头和cookie" aria-hidden="true">#</a></h2><h3 id="_6-1获取请求头" tabindex="-1">6.1获取请求头 <a class="header-anchor" href="#_6-1获取请求头" aria-hidden="true">#</a></h3><p>​ 在方法中定义一个参数，参数前加上**@RequestHeader**注解，知道要获取的请求头名即可获取对应的请求头的值。</p><p>例如：</p><p>​ 想要获取device-type这个请求头则可以按照如下方式定义方法。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/getHeader&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">getHeader</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestHeader</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;device-type&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">required</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">) String deviceType){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(deviceType);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;test&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_6-2-获取cookie" tabindex="-1">6.2 获取Cookie <a class="header-anchor" href="#_6-2-获取cookie" aria-hidden="true">#</a></h3><p>​ 在方法中定义一个参数，参数前加上@CookieValue注解，知道要获取的cookie名即可获取对应cookie的值。</p><p>例如：</p><p>​ 想要获取JSESSIONID的cookie值。则可以按照如下方式定义方法。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/getCookie&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">getCookie</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">CookieValue</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;JSESSIONID&quot;</span><span style="color:#C9D1D9;">) String sessionId){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(sessionId);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;test&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_7-jsp开发模式-了解" tabindex="-1">7.JSP开发模式（了解） <a class="header-anchor" href="#_7-jsp开发模式-了解" aria-hidden="true">#</a></h2><p>​ 如果我们使用JSP进行开发，那我们就需要在域中存取数据，然后跳转到对应的JSP页面中，在JSP页面中获取域中的数据然后进行相关处理。</p><p>​ 使用如果是类似JSP的开发模式就会涉及到<strong>往域中存数据</strong>和<strong>携带数据跳转页面</strong>的操作。</p><p>​ 所以我们来看下若果SpringMVC进行相关操作。</p><h3 id="_7-1-往request域存数据并跳转" tabindex="-1">7.1 往Request域存数据并跳转 <a class="header-anchor" href="#_7-1-往request域存数据并跳转" aria-hidden="true">#</a></h3><h4 id="_7-1-1-使用model" tabindex="-1">7.1.1 使用Model <a class="header-anchor" href="#_7-1-1-使用model" aria-hidden="true">#</a></h4><p>​ 我们可以使用<strong>Model</strong>来往域中存数据。然后使用之前的方式实现页面跳转。</p><p>例如：</p><p>​ 我们要求访问 /testRequestScope 这个路径时往Request域中存name和title数据，然后跳转到/WEB-INF/page/testScope.jsp这个页面。在JSP中获取域中的数据。</p><p>​ 则可以使用如下写法：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">JspController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/JspController&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testRequestScope</span><span style="color:#C9D1D9;">(Model </span><span style="color:#FFA657;">model</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//往请求域存数据</span></span>
<span class="line"><span style="color:#C9D1D9;">        model.</span><span style="color:#D2A8FF;">addAttribute</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;三更&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        model.</span><span style="color:#D2A8FF;">addAttribute</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;title&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;不知名java教程UP主&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testScope&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_7-1-2使用modelandview" tabindex="-1">7.1.2使用ModelAndView <a class="header-anchor" href="#_7-1-2使用modelandview" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">JspController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testRequestScope2&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> ModelAndView </span><span style="color:#D2A8FF;">testRequestScope2</span><span style="color:#C9D1D9;">(ModelAndView </span><span style="color:#FFA657;">modelAndView</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//往域中添加数据</span></span>
<span class="line"><span style="color:#C9D1D9;">        modelAndView.</span><span style="color:#D2A8FF;">addObject</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;三更&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        modelAndView.</span><span style="color:#D2A8FF;">addObject</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;title&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;不知名java教程UP主&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//页面跳转</span></span>
<span class="line"><span style="color:#C9D1D9;">        modelAndView.</span><span style="color:#D2A8FF;">setViewName</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testScope&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> modelAndView;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>​ 注意：要把ModelAndView对象作为返回值返回。</p><h3 id="_7-2-从request域中获取数据" tabindex="-1">7.2 从Request域中获取数据 <a class="header-anchor" href="#_7-2-从request域中获取数据" aria-hidden="true">#</a></h3><p>​ 我们可以使用@RequestAttribute把他记载方法参数上，可以让SpringMVC帮我们从Request域中获取相关数据。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">JspController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testGetAttribute&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testGetAttribute</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestAttribute</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;org.springframework.web.servlet.HandlerMapping.pathWithinHandlerMapping&quot;</span><span style="color:#C9D1D9;">) String </span><span style="color:#FFA657;">value</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(value);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testScope&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_7-3-往session域存数据并跳转" tabindex="-1">7.3 往Session域存数据并跳转 <a class="header-anchor" href="#_7-3-往session域存数据并跳转" aria-hidden="true">#</a></h3><p>我们可以使用@SessionAttribute注解来进行标识，用里面的属性来标识哪些数据要存入Session域。</p><p>例如：</p><p>​ 我们要求访问 /testSessionScope 这个路径时能往域中村name和title数据，然后跳转到/WEB-INF/page/testScope.jsp这个页面。在JSP中获取<strong>Session域</strong>中的数据。</p><p>​ 则可以使用如下写法</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">SessionAttributes</span><span style="color:#C9D1D9;">({</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">})</span><span style="color:#8B949E;">//表示name也要存储一份到session域中</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">JspController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testSessionScope&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testSessionScope</span><span style="color:#C9D1D9;">(Model </span><span style="color:#FFA657;">model</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//往请求域存数据</span></span>
<span class="line"><span style="color:#C9D1D9;">        model.</span><span style="color:#D2A8FF;">addAttribute</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;三更&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        model.</span><span style="color:#D2A8FF;">addAttribute</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;title&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;不知名java教程UP主&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testScope&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>7.4 获取Session域中数据</p><p>​ 我们可以使用@<strong>SessionAttribut</strong>e把他加在方法参数上，可以让SpringMVC帮我们从<strong>Session域</strong>中获取相关数据。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">SessionAttributes</span><span style="color:#C9D1D9;">({</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">})</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">JspController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testGetSessionAttr&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testGetSessionAttr</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">SessionAttribute</span><span style="color:#C9D1D9;"> String </span><span style="color:#FFA657;">name</span><span style="color:#C9D1D9;">, HttpSession </span><span style="color:#FFA657;">session</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testScope&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h1 id="springmvc-03" tabindex="-1">SpringMVC-03 <a class="header-anchor" href="#springmvc-03" aria-hidden="true">#</a></h1><h2 id="_1-拦截器" tabindex="-1">1.拦截器 <a class="header-anchor" href="#_1-拦截器" aria-hidden="true">#</a></h2><h3 id="_1-1-应用场景" tabindex="-1">1.1 应用场景 <a class="header-anchor" href="#_1-1-应用场景" aria-hidden="true">#</a></h3><p>​ 如果我们想在多个Handler方法执行之前或者之后进行一些处理，甚至某些情况下需要拦截掉，不让Handler方法执行。那么可以使用SpringMVC为我们提供的拦截器。</p><h3 id="_1-2-拦截器和过滤器的区别" tabindex="-1">1.2 拦截器和过滤器的区别 <a class="header-anchor" href="#_1-2-拦截器和过滤器的区别" aria-hidden="true">#</a></h3><p>​ 过滤器是在Servlet执行之前或者之后进行处理。而拦截器是对Handler（处理器）执行前后进行处理。</p><p>如图： <img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/2023/01/08/20230108222921.png" alt="image-20220627145440758"></p><h3 id="_1-3-创建并配置拦截器" tabindex="-1">1.3 创建并配置拦截器 <a class="header-anchor" href="#_1-3-创建并配置拦截器" aria-hidden="true">#</a></h3><h4 id="_1创建类实现handlerinterceptor接口" tabindex="-1">①创建类实现HandlerInterceptor接口 <a class="header-anchor" href="#_1创建类实现handlerinterceptor接口" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyInterceptor</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">HandlerInterceptor</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2实现方法" tabindex="-1">②实现方法 <a class="header-anchor" href="#_2实现方法" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyInterceptor</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">HandlerInterceptor</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//该方法会在controller方法执行前执行</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">boolean</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">preHandle</span><span style="color:#C9D1D9;">(HttpServletRequest </span><span style="color:#FFA657;">request</span><span style="color:#C9D1D9;">, HttpServletResponse </span><span style="color:#FFA657;">response</span><span style="color:#C9D1D9;">, Object </span><span style="color:#FFA657;">handler</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;preHandle&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//返回值代表是否放行，如果为true则放行 ，如果为false则拦截，目标方法执行不到</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">postHandle</span><span style="color:#C9D1D9;">(HttpServletRequest </span><span style="color:#FFA657;">request</span><span style="color:#C9D1D9;">, HttpServletResponse </span><span style="color:#FFA657;">response</span><span style="color:#C9D1D9;">, Object </span><span style="color:#FFA657;">handler</span><span style="color:#C9D1D9;">, ModelAndView </span><span style="color:#FFA657;">modelAndView</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;postHandle&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">afterCompletion</span><span style="color:#C9D1D9;">(HttpServletRequest </span><span style="color:#FFA657;">request</span><span style="color:#C9D1D9;">, HttpServletResponse </span><span style="color:#FFA657;">response</span><span style="color:#C9D1D9;">, Object </span><span style="color:#FFA657;">handler</span><span style="color:#C9D1D9;">, Exception </span><span style="color:#FFA657;">ex</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;afterCompletion&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h4 id="_3配置拦截器" tabindex="-1">③配置拦截器 <a class="header-anchor" href="#_3配置拦截器" aria-hidden="true">#</a></h4><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!--配置拦截器--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">mvc:interceptors</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">mvc:interceptor</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--配置拦截器要拦截的路径</span></span>
<span class="line"><span style="color:#8B949E;">            / *   代表当前路径，不包含子路径</span></span>
<span class="line"><span style="color:#8B949E;">            /**  可以代表多级目录和当前路径，使用的更多</span></span>
<span class="line"><span style="color:#8B949E;">            例如：</span></span>
<span class="line"><span style="color:#8B949E;">            /test/*   这种会拦截下面这种路径/test/add   /test/delete</span></span>
<span class="line"><span style="color:#8B949E;">                但是拦截不了多级路径的情况   例如：/test/add/abc   /test/add/abc/bcd</span></span>
<span class="line"><span style="color:#8B949E;">            /test/**  这种可以拦截多级目录的情况，无论 /test/add还是 /test/add/as/asdf都可以拦截</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">            /*   代表当前路径，不包含子路径</span></span>
<span class="line"><span style="color:#8B949E;">            /**  可以代表多级目录和当前路径，使用的更多</span></span>
<span class="line"><span style="color:#8B949E;">        --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">mvc:mapping</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">path</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;/**&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--配置排除拦截的路径--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--&lt;mvc:exclude-mapping path=&quot;/&quot;/&gt;--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--配置拦截器对象注入容器--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.interceptor.MyInterceptor&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">mvc:interceptor</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">mvc:interceptors</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="_1-4-拦截器方法及参数讲解" tabindex="-1">1.4 拦截器方法及参数讲解 <a class="header-anchor" href="#_1-4-拦截器方法及参数讲解" aria-hidden="true">#</a></h3><p>​ preHandle方法会在Handler方法执行之前执行，我们可以在其中进行一些前置的判断或者处理。</p><p>​ postHandle方法辉仔Handler方法执行后执行，我们可以在其中对域中的数据进行修改，也可以修改要跳转的页面。</p><p>​ afterCompletion方法会在最后执行，这个时候已经没有办法对域中的数据进行修改，也没有办法修改要跳转的页面。我们在这个方法中一般进行一些资源释放。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">/**</span></span>
<span class="line"><span style="color:#8B949E;"> *该方法会在controller方法执行前执行</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">request</span><span style="color:#8B949E;">  当前请求对象</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">response</span><span style="color:#8B949E;"> 响应对象</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">handler</span><span style="color:#8B949E;"> 相当于是真正能够处理请求的Handler方法封装成的对象，对象中有这方法的相关信息</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@return</span><span style="color:#8B949E;">  返回值代表是否放行，如果为true则放行 ，否则拦截，目标方法执行不到</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@throws</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">Exception</span></span>
<span class="line"><span style="color:#8B949E;"> */</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">boolean</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">preHandle</span><span style="color:#C9D1D9;">(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;preHandle&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//返回值代表是否放行，如果为true则放行 ，否则拦截，目标方法执行不到</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">    /**</span></span>
<span class="line"><span style="color:#8B949E;">     *postHandle方法会在Handler方法执行后执行</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">request</span><span style="color:#8B949E;">  当前请求对象</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">response</span><span style="color:#8B949E;"> 响应对象</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">handler</span><span style="color:#8B949E;"> 相当于是真正能够处理请求的Handler方法封装成的对象，对象中有这方法的相关信息</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">modelAndView</span><span style="color:#8B949E;">  handler方法执行后的modelAndView对象，我们可以修改其中要跳转的路径或者是域中的数据</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@throws</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">Exception</span></span>
<span class="line"><span style="color:#8B949E;">     */</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">postHandle</span><span style="color:#C9D1D9;">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;postHandle&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">/**</span></span>
<span class="line"><span style="color:#8B949E;"> *afterCompletion方法会在最后执行</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">request</span><span style="color:#8B949E;"> 当前请求对象</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">response</span><span style="color:#8B949E;"> 相应对象</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">handler</span><span style="color:#8B949E;"> 相当于是真正能够处理请求的Handler方法封装成的对象，对象中有这方法的相关信息</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">ex</span><span style="color:#8B949E;"> 异常对象</span></span>
<span class="line"><span style="color:#8B949E;"> * </span><span style="color:#FF7B72;">@throws</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">Exception</span></span>
<span class="line"><span style="color:#8B949E;"> */</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">afterCompletion</span><span style="color:#C9D1D9;">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;afterCompletion&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_1-5-案例-登录状态拦截器" tabindex="-1">1.5 案例-登录状态拦截器 <a class="header-anchor" href="#_1-5-案例-登录状态拦截器" aria-hidden="true">#</a></h3><h4 id="_1-5-1-需求" tabindex="-1">1.5.1 需求 <a class="header-anchor" href="#_1-5-1-需求" aria-hidden="true">#</a></h4><p>​ 我们的接口需要用户登陆状态的校验，如果用户没有登陆则跳转到登陆页面，登陆的情况下则可以正常 访问我们的接口。</p><h4 id="_1-5-2需求分析" tabindex="-1">1.5.2需求分析 <a class="header-anchor" href="#_1-5-2需求分析" aria-hidden="true">#</a></h4><p>​ 怎么判断用户是否登录？登录时往session写入用户相关信息，然后在其他请求中从session中获取这些信息，如果获取不到则说明不是登录状态。 ​ 很多接口都要去写判断代码，难道在每个Handler中写逻辑？</p><p>​ 用拦截器，在拦截器中进行登录状态的判断</p><p>​ 登录接口是否应该进行拦截？</p><p>​ 不能拦截</p><p>​ 静态资源是否要进行拦截？</p><p>​ 不用拦截</p><h4 id="_1-5-3-步骤分析" tabindex="-1">1.5.3 步骤分析 <a class="header-anchor" href="#_1-5-3-步骤分析" aria-hidden="true">#</a></h4><p>​ ①登录页面，请求发送给登录接口</p><p>​ ②登陆接口当中校验用户名密码是否正确（模拟查询即可）</p><p>​ 如果用户名密码正确，登陆成功，往session里写入用户名</p><p>​ ③定义其他请求的Handler方法</p><p>​ ④定义拦截器来进行登录状态判断</p><p>​ 如果能从session中获取用户名则说明用户是登录的状态，则放行</p><p>​ 如果获取不到，则说明未登录，跳转到登陆界面</p><h4 id="_1-5-4-代码实现" tabindex="-1">1.5.4 代码实现 <a class="header-anchor" href="#_1-5-4-代码实现" aria-hidden="true">#</a></h4><h5 id="_1-5-4-1-登录功能代码实现" tabindex="-1">1.5.4.1 登录功能代码实现 <a class="header-anchor" href="#_1-5-4-1-登录功能代码实现" aria-hidden="true">#</a></h5><h6 id="_1登录页面-请求发送给登录接口" tabindex="-1">①登录页面，请求发送给登录接口 <a class="header-anchor" href="#_1登录页面-请求发送给登录接口" aria-hidden="true">#</a></h6><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;!</span><span style="color:#7EE787;">DOCTYPE</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">html</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">html</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">lang</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;en&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">head</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">meta</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">charset</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">title</span><span style="color:#C9D1D9;">&gt;Title&lt;/</span><span style="color:#7EE787;">title</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">head</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">body</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">form</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;post&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">action</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;/login&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        用户名：&lt;</span><span style="color:#7EE787;">input</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">type</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;text&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;username&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        密码：&lt;</span><span style="color:#7EE787;">input</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">type</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;password&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;password&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">input</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">type</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;submit&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">form</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">body</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">html</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h6 id="_2编写登录接口" tabindex="-1">②编写登录接口 <a class="header-anchor" href="#_2编写登录接口" aria-hidden="true">#</a></h6><p>​ 登陆接口当中校验用户名密码是否正确（模拟查询即可），如果用户名密码正确，登陆成功，往session里写入用户名</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">LoginController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">PostMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/login&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">login</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">username</span><span style="color:#C9D1D9;">, String </span><span style="color:#FFA657;">password</span><span style="color:#C9D1D9;"> , HttpSession </span><span style="color:#FFA657;">session</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//往session域中写入用户名来表示登录成功</span></span>
<span class="line"><span style="color:#C9D1D9;">        session.</span><span style="color:#D2A8FF;">setAttribute</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;username&quot;</span><span style="color:#C9D1D9;">,username);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;WEB-INF/page/success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="_1-5-4-2-登录状态校验代码实现" tabindex="-1">1.5.4.2 登录状态校验代码实现 <a class="header-anchor" href="#_1-5-4-2-登录状态校验代码实现" aria-hidden="true">#</a></h5><h6 id="_1定义拦截器" tabindex="-1">①定义拦截器 <a class="header-anchor" href="#_1定义拦截器" aria-hidden="true">#</a></h6><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">LoginInterceptor</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">HandlerInterceptor</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h6 id="_2重写方法-在prehandle方法中实现状态校验" tabindex="-1">②重写方法，在preHandle方法中实现状态校验 <a class="header-anchor" href="#_2重写方法-在prehandle方法中实现状态校验" aria-hidden="true">#</a></h6><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">LoginInterceptor</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">HandlerInterceptor</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">boolean</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">preHandle</span><span style="color:#C9D1D9;">(HttpServletRequest </span><span style="color:#FFA657;">request</span><span style="color:#C9D1D9;">, HttpServletResponse </span><span style="color:#FFA657;">response</span><span style="color:#C9D1D9;">, Object </span><span style="color:#FFA657;">handler</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//登陆状态校验</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//从session中获取用户名，判断是否存在</span></span>
<span class="line"><span style="color:#C9D1D9;">        HttpSession</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">session</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> request.</span><span style="color:#D2A8FF;">getSession</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">username</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (String) session.</span><span style="color:#D2A8FF;">getAttribute</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;username&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (StringUtils.</span><span style="color:#D2A8FF;">isEmpty</span><span style="color:#C9D1D9;">(username)){</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">//如果获取不到，说明未登录  重定向 跳转到登陆页面</span></span>
<span class="line"><span style="color:#C9D1D9;">            String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">contextPath</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> request.</span><span style="color:#D2A8FF;">getServletContext</span><span style="color:#C9D1D9;">().</span><span style="color:#D2A8FF;">getContextPath</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">            response.</span><span style="color:#D2A8FF;">sendRedirect</span><span style="color:#C9D1D9;">(contextPath</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;/static/login.html&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        }</span><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;">{</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">//如果获取到了，说明之前登陆过   放行</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h6 id="_3配置拦截器-1" tabindex="-1">③配置拦截器 <a class="header-anchor" href="#_3配置拦截器-1" aria-hidden="true">#</a></h6><p>​ 登录相关接口不拦截，</p><p>​ 静态资源不拦截</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">mvc:interceptors</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">mvc:interceptor</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--要拦截的路径--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">mvc:mapping</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">path</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;/**&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">mvc:exclude-mapping</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">path</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;/static/**&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">mvc:exclude-mapping</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">path</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;/login/**&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">mvc:exclude-mapping</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">path</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;/WEB-INF/page/**&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.interceptor.LoginInterceptor&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">mvc:interceptor</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">mvc:interceptors</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_1-6-多拦截器执行顺序" tabindex="-1">1.6 多拦截器执行顺序 <a class="header-anchor" href="#_1-6-多拦截器执行顺序" aria-hidden="true">#</a></h3><p>​ 如果我们配置了多个拦截器，拦截器的执行顺序是<strong>按照配置的先后顺序</strong>执行的。</p><p>​ 这些拦截器中方法的执行顺序如图（<strong>preHandler都返回true的情况下</strong>）：</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/2023/01/08/20230108222954.png" alt="image-20220627175056785"></p><p>​ 如果<strong>拦截器3的preHandle方法返回值为false</strong>。执行顺序如图：</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/2023/01/08/20230108222958.png" alt="image-20220627175136504"></p><ul><li>​ 只有所有拦截器都放行了，postHandle方法才会被执行。</li><li>​ 只有当前拦截器放行了，当前拦截器的afterCompletion方法才会被执行。</li></ul><h2 id="_2-统一异常处理" tabindex="-1">2.统一异常处理 <a class="header-anchor" href="#_2-统一异常处理" aria-hidden="true">#</a></h2><p>​ 我们在实际项目中Dao层和Service层的异常都会被抛到Controller层。但是如果我们在Controller的方法中都加上try。。。catch处理也会显得非常的繁琐。</p><p>​ 所以SpringMVC为我们提供了统一异常处理方案。可以把Controller层的异常进行统一处理。这样既提高了代码的复用性也让异常处理代码和我们的业务代码解耦。</p><p>​ 一种是实现HandlerExceptionResolver接口的方式，一种是使用@ControllerAdvice注解的方式。</p><h3 id="_2-1-handlerexceptionresolver" tabindex="-1">2.1 HandlerExceptionResolver <a class="header-anchor" href="#_2-1-handlerexceptionresolver" aria-hidden="true">#</a></h3><h4 id="_1实现接口" tabindex="-1">①实现接口 <a class="header-anchor" href="#_1实现接口" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyHandlerExceptionResolver</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">HandlerExceptionResolver</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2重写方法" tabindex="-1">②重写方法 <a class="header-anchor" href="#_2重写方法" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyHandlerExceptionResolver</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">HandlerExceptionResolver</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//如果Handler中出现了异常，就会调用到该方法，我们可以在本方法中进行统一的异常处理。</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> ModelAndView </span><span style="color:#D2A8FF;">resolveException</span><span style="color:#C9D1D9;">(HttpServletRequest </span><span style="color:#FFA657;">httpServletRequest</span><span style="color:#C9D1D9;">, HttpServletResponse </span><span style="color:#FFA657;">httpServletResponse</span><span style="color:#C9D1D9;">, Object </span><span style="color:#FFA657;">o</span><span style="color:#C9D1D9;">, Exception </span><span style="color:#FFA657;">e</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_3注入容器" tabindex="-1">③注入容器 <a class="header-anchor" href="#_3注入容器" aria-hidden="true">#</a></h4><p>​ 可以使用注解注入也可以使用xml配置注入。这里使用注解注入的方式。在类上面加上@Component注解，注意要保证类能被组件扫描扫到。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyHandlerExceptionResolver</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">HandlerExceptionResolver</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">	</span><span style="color:#8B949E;">//。。。省略无关代码</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-2-controlleradvice-重点" tabindex="-1">2.2 @ControllerAdvice（重点） <a class="header-anchor" href="#_2-2-controlleradvice-重点" aria-hidden="true">#</a></h3><h4 id="_1创建类加上-controlleradvice注解进行标识" tabindex="-1">①创建类加上@ControllerAdvice注解进行标识 <a class="header-anchor" href="#_1创建类加上-controlleradvice注解进行标识" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ControllerAdvice</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyControllerAdvice</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2定义异常处理方法" tabindex="-1">②定义异常处理方法 <a class="header-anchor" href="#_2定义异常处理方法" aria-hidden="true">#</a></h4><p>​ 定义异常处理方法，使用@ExceptionHandler标识可以处理的异常。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ControllerAdvice</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyControllerAdvice</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">ExceptionHandler</span><span style="color:#C9D1D9;">({NullPointerException.class,ArrayIndexOutOfBoundsException.class,ArithmeticException.class})</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> ModelAndView </span><span style="color:#D2A8FF;">handlerException</span><span style="color:#C9D1D9;">(Exception </span><span style="color:#FFA657;">ex</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//如果出现了相关的异常，就会调用该方法</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">msg</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> ex.</span><span style="color:#D2A8FF;">getMessage</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        ModelAndView</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">modelAndView</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ModelAndView</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//把异常信息存入域中</span></span>
<span class="line"><span style="color:#C9D1D9;">        modelAndView.</span><span style="color:#D2A8FF;">addObject</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;msg&quot;</span><span style="color:#C9D1D9;">,msg);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//跳转到error.jsp</span></span>
<span class="line"><span style="color:#C9D1D9;">        modelAndView.</span><span style="color:#D2A8FF;">setViewName</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;WEB-INF/page/error.jsp&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> modelAndView;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="_3注入容器-1" tabindex="-1">③注入容器 <a class="header-anchor" href="#_3注入容器-1" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ControllerAdvice</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyControllerAdvice</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2-3-总结" tabindex="-1">2.3 总结 <a class="header-anchor" href="#_2-3-总结" aria-hidden="true">#</a></h3><p>​ 我们在实际项目中一般会选择使用@ControllerAdvice来进行异常的统一处理。</p><p>​ 因为如果在前后端不分离的项目中，异常处理一般是跳转到错误页面，让用户有个更好的体验。而前后端分离的项目中，异常处理一般是把异常信息封装到JSON中写入响应体。无论是哪种情况，使用@ControllerAdvice的写法都能比较方便的实现。</p><p>​ 例如下面这种方式就是前后端分离的异常处理方案，把异常信息封装到对象中，转换成JSON写入到响应体中。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ControllerAdvice</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyControllerAdvice</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">ExceptionHandler</span><span style="color:#C9D1D9;">(ArithmeticException.class)</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">ResponseBody</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Result </span><span style="color:#D2A8FF;">handlerException</span><span style="color:#C9D1D9;">(Exception </span><span style="color:#FFA657;">ex</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        Result</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">result</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">Result</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        result.</span><span style="color:#D2A8FF;">setMsg</span><span style="color:#C9D1D9;">(ex.</span><span style="color:#D2A8FF;">getMessage</span><span style="color:#C9D1D9;">());</span></span>
<span class="line"><span style="color:#C9D1D9;">        result.</span><span style="color:#D2A8FF;">setCode</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">500</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> result;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_3-文件上传" tabindex="-1">3.文件上传 <a class="header-anchor" href="#_3-文件上传" aria-hidden="true">#</a></h2><h3 id="_3-1-文件上传要求" tabindex="-1">3.1 文件上传要求 <a class="header-anchor" href="#_3-1-文件上传要求" aria-hidden="true">#</a></h3><p>​ Http协议规定了我们在进行文件上传时的请求格式要求。所以在进行文件上传时，除了在表单中增加一个用于上传文件的表单项（input标签，type=file）外必须要满足以下条件才能进行上传。</p><h4 id="_1请求方式为post请求" tabindex="-1">①请求方式为POST请求 <a class="header-anchor" href="#_1请求方式为post请求" aria-hidden="true">#</a></h4><p>​ 如果是使用表单进行提交的话，可以把form标签的method属性设置为POST。例如：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">form</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">action</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;/upload&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;post&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">form</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_2请求头content-type必须为multipart-form-data" tabindex="-1">②请求头Content-Type必须为multipart/form-data <a class="header-anchor" href="#_2请求头content-type必须为multipart-form-data" aria-hidden="true">#</a></h4><p>​ 如果是使用表单的话可以把表单的entype属性设置成multipart/form-data。例如：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">form</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">action</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;/upload&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;post&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">enctype</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;multipart/form-data&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">form</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-2-springmvc接收上传过来的文件" tabindex="-1">3.2 SpringMVC接收上传过来的文件 <a class="header-anchor" href="#_3-2-springmvc接收上传过来的文件" aria-hidden="true">#</a></h3><p>​ SpringMVC使用commons-fileupload的包对文件上传进行了封装，我们只需要引入相关依赖和进行相应配置就可以很轻松的实现文件上传的功能。</p><h4 id="_1依赖" tabindex="-1">①依赖 <a class="header-anchor" href="#_1依赖" aria-hidden="true">#</a></h4><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--commons文件上传，如果需要文件上传功能，需要添加本依赖--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;commons-fileupload&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;commons-fileupload&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;1.4&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_2配置" tabindex="-1">②配置 <a class="header-anchor" href="#_2配置" aria-hidden="true">#</a></h4><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">&lt;!--</span></span>
<span class="line"><span style="color:#8B949E;">            文件上传解析器</span></span>
<span class="line"><span style="color:#8B949E;">            注意：id 必须为 multipartResolver</span></span>
<span class="line"><span style="color:#8B949E;">        --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;multipartResolver&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!-- 设置默认字符编码 --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;defaultEncoding&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;utf-8&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!-- 一次请求上传的文件的总大小的最大值，单位是字节--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;maxUploadSize&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;#{1024*1024*100}&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!-- 每个上传文件大小的最大值，单位是字节--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;maxUploadSizePerFile&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;#{1024*1024*50}&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_3接收上传的文件数据并处理" tabindex="-1">③接收上传的文件数据并处理 <a class="header-anchor" href="#_3接收上传的文件数据并处理" aria-hidden="true">#</a></h4><p>上传表单</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;!</span><span style="color:#7EE787;">DOCTYPE</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">html</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">html</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">lang</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;en&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">head</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">meta</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">charset</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">title</span><span style="color:#C9D1D9;">&gt;Title&lt;/</span><span style="color:#7EE787;">title</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">head</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">body</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">form</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">action</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;/upload&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;post&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">enctype</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;multipart/form-data&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">input</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">type</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;file&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;uploadFile&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">input</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">type</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;submit&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">form</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">body</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">html</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UploadController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/upload&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">upload</span><span style="color:#C9D1D9;">(MultipartFile </span><span style="color:#FFA657;">uploadFile</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> IOException {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//把上传上来的文件存储下来</span></span>
<span class="line"><span style="color:#C9D1D9;">        uploadFile.</span><span style="color:#D2A8FF;">transferTo</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">File</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;test.sql&quot;</span><span style="color:#C9D1D9;">));</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;success.jsp&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>注意：方法参数要和提交上来的参数名一致。</p><h3 id="_3-3-multipartfile常见用法" tabindex="-1">3.3 MultipartFile常见用法 <a class="header-anchor" href="#_3-3-multipartfile常见用法" aria-hidden="true">#</a></h3><ul><li><p>获取上传文件的原名</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">uploadFile.</span><span style="color:#D2A8FF;">getOriginalFilename</span><span style="color:#C9D1D9;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li><p>获取文件类型的MIME类型</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">uploadFile.</span><span style="color:#D2A8FF;">getContentType</span><span style="color:#C9D1D9;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>获取上传文件的大小</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">uploadFile.</span><span style="color:#D2A8FF;">getSize</span><span style="color:#C9D1D9;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>获取对应上传文件的输入流</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">uploadFile.</span><span style="color:#D2A8FF;">getInputStream</span><span style="color:#C9D1D9;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ul><h2 id="_4-文件下载" tabindex="-1">4.文件下载 <a class="header-anchor" href="#_4-文件下载" aria-hidden="true">#</a></h2><h3 id="_4-1-文件下载的要求" tabindex="-1">4.1 文件下载的要求 <a class="header-anchor" href="#_4-1-文件下载的要求" aria-hidden="true">#</a></h3><p>​ 如果我们想提供文件下载的功能。HTTP协议要求我们必须满足以下规则。</p><h4 id="_1设置响应头content-type" tabindex="-1">①设置响应头Content-Type <a class="header-anchor" href="#_1设置响应头content-type" aria-hidden="true">#</a></h4><p>​ 要求把提供下载文件的MIME类型作为响应头Content-Type的值</p><h4 id="_2设置响应头content-disposition" tabindex="-1">②设置响应头Content-disposition <a class="header-anchor" href="#_2设置响应头content-disposition" aria-hidden="true">#</a></h4><p>​ 要求把文件名经过URL编码后的值写入响应头Content-disposition。但是要求符合以下格式，因为这样可以解决不同浏览器中文 文件名乱码问题。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">Content</span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;">disposition</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> attachment; filename</span><span style="color:#FF7B72;">=%</span><span style="color:#C9D1D9;">E4</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">B8</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">8B</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E6</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">B5</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">B7</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E5</span><span style="color:#FF7B72;">%</span><span style="color:#79C0FF;">81</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">9Aup</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E4</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">B8</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">BB</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E9</span><span style="color:#FF7B72;">%</span><span style="color:#79C0FF;">82</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">A3</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E4</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">BA</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">9B</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E5</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">B9</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">B4.txt;filename</span><span style="color:#FF7B72;">*=</span><span style="color:#C9D1D9;">utf</span><span style="color:#FF7B72;">-</span><span style="color:#79C0FF;">8</span><span style="color:#A5D6FF;">&#39;&#39;</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E4</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">B8</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">8B</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E6</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">B5</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">B7</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E5</span><span style="color:#FF7B72;">%</span><span style="color:#79C0FF;">81</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">9Aup</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E4</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">B8</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">BB</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E9</span><span style="color:#FF7B72;">%</span><span style="color:#79C0FF;">82</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">A3</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E4</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">BA</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">9B</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">E5</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">B9</span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;">B4.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="_3文件数据写入响应体" tabindex="-1">③文件数据写入响应体 <a class="header-anchor" href="#_3文件数据写入响应体" aria-hidden="true">#</a></h4><h3 id="_4-2-代码实现" tabindex="-1">4.2 代码实现 <a class="header-anchor" href="#_4-2-代码实现" aria-hidden="true">#</a></h3><p>​ 我们可以使用之前封装的工具类实现文件下载</p><p>工具类代码：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> javax.servlet.ServletContext;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> javax.servlet.ServletOutputStream;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> javax.servlet.http.HttpServletResponse;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.io.File;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.io.FileInputStream;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.net.URLEncoder;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">DownLoadUtils</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#8B949E;">    /**</span></span>
<span class="line"><span style="color:#8B949E;">     * 该方法可以快速实现设置两个下载需要的响应头和把文件数据写入响应体</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">filePath</span><span style="color:#8B949E;"> 该文件的相对路径</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">context</span><span style="color:#8B949E;">  ServletContext对象</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">response</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@throws</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">Exception</span></span>
<span class="line"><span style="color:#8B949E;">     */</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">downloadFile</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">filePath</span><span style="color:#C9D1D9;">, ServletContext </span><span style="color:#FFA657;">context</span><span style="color:#C9D1D9;">, HttpServletResponse </span><span style="color:#FFA657;">response</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">realPath</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> context.</span><span style="color:#D2A8FF;">getRealPath</span><span style="color:#C9D1D9;">(filePath);</span></span>
<span class="line"><span style="color:#C9D1D9;">        File</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">file</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">File</span><span style="color:#C9D1D9;">(realPath);</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">filename</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> file.</span><span style="color:#D2A8FF;">getName</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        FileInputStream</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">fis</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">FileInputStream</span><span style="color:#C9D1D9;">(realPath);</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">mimeType</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> context.</span><span style="color:#D2A8FF;">getMimeType</span><span style="color:#C9D1D9;">(filename);</span><span style="color:#8B949E;">//获取文件的mime类型</span></span>
<span class="line"><span style="color:#C9D1D9;">        response.</span><span style="color:#D2A8FF;">setHeader</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;content-type&quot;</span><span style="color:#C9D1D9;">,mimeType);</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">fname</span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> URLEncoder.</span><span style="color:#D2A8FF;">encode</span><span style="color:#C9D1D9;">(filename,</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        response.</span><span style="color:#D2A8FF;">setHeader</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Content-disposition&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;attachment; filename=&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">fname</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;;&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;filename*=utf-8&#39;&#39;&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">fname);</span></span>
<span class="line"><span style="color:#C9D1D9;">        ServletOutputStream</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">sos</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> response.</span><span style="color:#D2A8FF;">getOutputStream</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">byte</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">buff</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">byte</span><span style="color:#C9D1D9;">[</span><span style="color:#79C0FF;">1024</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">8</span><span style="color:#C9D1D9;">];</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">len</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">while</span><span style="color:#C9D1D9;">((len </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> fis.</span><span style="color:#D2A8FF;">read</span><span style="color:#C9D1D9;">(buff)) </span><span style="color:#FF7B72;">!=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">-</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">            sos.</span><span style="color:#D2A8FF;">write</span><span style="color:#C9D1D9;">(buff,</span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">,len);</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        sos.</span><span style="color:#D2A8FF;">close</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        fis.</span><span style="color:#D2A8FF;">close</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>Handler方法定义</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">DownLoadController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/download&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">download</span><span style="color:#C9D1D9;">(HttpServletRequest </span><span style="color:#FFA657;">servletRequest</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">                           HttpServletResponse </span><span style="color:#FFA657;">response</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//文件下载</span></span>
<span class="line"><span style="color:#C9D1D9;">        DownLoadUtils.</span><span style="color:#D2A8FF;">downloadFile</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;WEB-INF/file/下海干活那些年.txt&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">                , servletRequest.</span><span style="color:#D2A8FF;">getServletContext</span><span style="color:#C9D1D9;">(), response);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="_5-springmvc执行流程" tabindex="-1">5.SpringMVC执行流程 <a class="header-anchor" href="#_5-springmvc执行流程" aria-hidden="true">#</a></h2><p>因为我们有两种开发模式，我们分别来讲解两种模式在SpringMVC中的执行流程。</p><p>​ 一种是类似JSP的开发流程:</p><p>​ 把数据放入域对象中，然后进行页面跳转。</p><p>​ 另外一种是前后端分离的开发模式，这也是目前市场上主流的模式：</p><p>​ 把数据转化为json放入响应体中。</p><p>​ 完整流程图如下：</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/2023/01/08/20230108223011.png" alt="image-20220627221224958"></p><h3 id="_5-1-类jsp开发模式执行流程" tabindex="-1">5.1 类JSP开发模式执行流程 <a class="header-anchor" href="#_5-1-类jsp开发模式执行流程" aria-hidden="true">#</a></h3><p>​ 1.用户发起请求被DispatchServlet所处理</p><p>​ 2.DispatchServlet通过HandlerMapping根据具体的请求查找能处理这个请求的Handler。<strong>（HandlerMapping主要是处理请求和Handler方法的映射关系的）</strong></p><p>​ 3.HandlerMapping返回一个能够处理请求的执行链给DispatchServlet，这个链中除了包含Handler方法也包含拦截器。</p><p>​ 4.DispatchServlet拿着执行链去找HandlerAdater执行链中的方法。</p><p>​ 5.HandlerAdater会去执行对应的Handler方法，把数据处理转换成合适的类型然后作为方法参数传入</p><p>​ 6.Handler方法执行完后的返回值会被HandlerAdapter转换成ModelAndView类型。<strong>（HandlerAdater主要进行Handler方法参数和返回值的处理。）</strong></p><p>​ 7.返回ModelAndView给DispatchServlet.</p><p>​ 8.如果对于的ModelAndView对象不为null，则DispatchServlet把ModelAndView交给 ViewResolver 也就是视图解析器解析。</p><p>​ 9.ViewResolver 也就是视图解析器把ModelAndView中的viewName转换成对应的View对象返回给DispatchServlet。<strong>（ViewResolver 主要负责把String类型的viewName转换成对应的View对象）</strong></p><p>​ 10.DispatchServlet使用View对象进行页面的展示。</p><h3 id="_5-2-前后端分离开发模式执行流程" tabindex="-1">5.2 前后端分离开发模式执行流程 <a class="header-anchor" href="#_5-2-前后端分离开发模式执行流程" aria-hidden="true">#</a></h3><p>​ 前后端分离的开发模式中我们会使用@ResponseBody来把数据写入到响应体中。所以不需要进行页面的跳转。</p><p>故流程如下：</p><p>​ 1.用户发起请求被DispatchServlet所处理</p><p>​ 2.DispatchServlet通过HandlerMapping根据具体的请求查找能处理这个请求的Handler。<strong>（HandlerMapping主要是处理请求和Handler方法的映射关系的）</strong></p><p>​ 3.HandlerMapping返回一个能够处理请求的执行链给DispatchServlet，这个链中除了包含Handler方法也包含拦截器。</p><p>​ 4.DispatchServlet拿着执行链去找HandlerAdater执行链中的方法。</p><p>​ 5.HandlerAdater会去执行对应的Handler方法，把数据处理转换成合适的类型然后作为方法参数传入</p><p>​ 6.Handler方法执行完后的返回值会被HandlerAdapter转换成ModelAndView类型。由于使用了@ResponseBody注解，返回的ModelAndView会为null ，并且HandlerAdapter会把方法返回值放到响应体中。<strong>（HandlerAdater主要进行Handler方法参数和返回值的处理。）</strong></p><p>​ 7.返回ModelAndView给DispatchServlet。</p><p>​ 8.因为返回的ModelAndView为null,所以不用去解析视图解析和其后面的操作。</p>`,414),o=[e];function r(t,c,D,i,y,u){return a(),n("div",null,o)}const b=s(p,[["render",r]]);export{C as __pageData,b as default};
