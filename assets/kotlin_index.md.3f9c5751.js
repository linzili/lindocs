import{_ as s,c as a,o as n,a as l}from"./app.368cfe21.js";const u=JSON.parse('{"title":"Kotlin","description":"","frontmatter":{},"headers":[{"level":2,"title":"basic","slug":"basic","link":"#basic","children":[{"level":3,"title":"数据类型","slug":"数据类型","link":"#数据类型","children":[]},{"level":3,"title":"对象","slug":"对象","link":"#对象","children":[]},{"level":3,"title":"函数","slug":"函数","link":"#函数","children":[]},{"level":3,"title":"Spring","slug":"spring","link":"#spring","children":[]}]}],"relativePath":"kotlin/index.md","lastUpdated":1673943303000}'),e={name:"kotlin/index.md"},p=l(`<h1 id="kotlin" tabindex="-1">Kotlin <a class="header-anchor" href="#kotlin" aria-hidden="true">#</a></h1><h2 id="basic" tabindex="-1">basic <a class="header-anchor" href="#basic" aria-hidden="true">#</a></h2><h3 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-hidden="true">#</a></h3><h4 id="常量" tabindex="-1">常量 <a class="header-anchor" href="#常量" aria-hidden="true">#</a></h4><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">NAME</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;content&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-hidden="true">#</a></h3><h4 id="伴生对象" tabindex="-1">伴生对象 <a class="header-anchor" href="#伴生对象" aria-hidden="true">#</a></h4><blockquote><p>kotlin通过引入“伴生对象”的概念来替代java里的静态变量及方法。</p></blockquote><p>“伴生对象”这个名词听上去很古怪，其实非常简单：在类的内容使用companion来标记一个对象。所有需要“静态化”的变量和方法都放在这个对象里。</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">StaticTest</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">companion</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">object</span><span style="color:#C9D1D9;">{</span><span style="color:#8B949E;">//伴生对象是可以指定名字的，不过一般都省略掉。</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">var</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">STATIC_VAR</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">staticMethod</span><span style="color:#C9D1D9;">(str</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">String?</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(str)</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-hidden="true">#</a></h3><h4 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-hidden="true">#</a></h4><p>Kotlin 函数使用 fun 关键字声明：</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">double</span><span style="color:#C9D1D9;">(x</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Int</span><span style="color:#C9D1D9;">)</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Int</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> x</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="spring" tabindex="-1">Spring <a class="header-anchor" href="#spring" aria-hidden="true">#</a></h3><h4 id="自动注入" tabindex="-1">自动注入 <a class="header-anchor" href="#自动注入" aria-hidden="true">#</a></h4><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark has-highlighted-lines"><code><span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestClass</span><span style="color:#C9D1D9;"> (</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 自动注入的对象</span></span>
<span class="line highlighted"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> serviceX</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ServiceX</span></span>
<span class="line"><span style="color:#C9D1D9;">) { yourCode }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,17),o=[p];function r(t,c,i,d,h,D){return n(),a("div",null,o)}const b=s(e,[["render",r]]);export{u as __pageData,b as default};
