import{_ as a,c as n,o as s,a as e}from"./app.9e1597b0.js";const b=JSON.parse('{"title":"SpringFramework","description":"","frontmatter":{},"headers":[{"level":2,"title":"常用注解","slug":"常用注解","link":"#常用注解","children":[{"level":3,"title":"Bean与Qualifier","slug":"bean与qualifier","link":"#bean与qualifier","children":[]}]}],"relativePath":"spring/index.md","lastUpdated":1673943303000}'),r={name:"spring/index.md"},l=e(`<h1 id="springframework" tabindex="-1">SpringFramework <a class="header-anchor" href="#springframework" aria-hidden="true">#</a></h1><h2 id="常用注解" tabindex="-1">常用注解 <a class="header-anchor" href="#常用注解" aria-hidden="true">#</a></h2><h3 id="bean与qualifier" tabindex="-1">Bean与Qualifier <a class="header-anchor" href="#bean与qualifier" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Bean</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Bean的名称&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">// 可以指定自动注入的bean的名称,通常在声明多个同类型bean的时候使用</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Qualifier</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;需要注入的Bean名称&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,4),i=[l];function p(t,o,c,d,u,h){return s(),n("div",null,i)}const m=a(r,[["render",p]]);export{b as __pageData,m as default};
