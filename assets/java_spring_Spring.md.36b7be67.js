import{_ as s,c as n,o as a,a as l}from"./app.9e1597b0.js";const u=JSON.parse('{"title":"Spring-01","description":"","frontmatter":{},"headers":[{"level":2,"title":"1.Spring简介","slug":"_1-spring简介","link":"#_1-spring简介","children":[]},{"level":2,"title":"2.IOC控制反转","slug":"_2-ioc控制反转","link":"#_2-ioc控制反转","children":[{"level":3,"title":"2.1 概念","slug":"_2-1-概念","link":"#_2-1-概念","children":[]},{"level":3,"title":"2.2 入门案例","slug":"_2-2-入门案例","link":"#_2-2-入门案例","children":[]},{"level":3,"title":"2.3 Bean的常用属性配置","slug":"_2-3-bean的常用属性配置","link":"#_2-3-bean的常用属性配置","children":[]}]},{"level":2,"title":"3.DI依赖注入","slug":"_3-di依赖注入","link":"#_3-di依赖注入","children":[{"level":3,"title":"3.1 set方法注入","slug":"_3-1-set方法注入","link":"#_3-1-set方法注入","children":[]},{"level":3,"title":"3.2有参构造注入","slug":"_3-2有参构造注入","link":"#_3-2有参构造注入","children":[]},{"level":3,"title":"3.3复杂类属性注入","slug":"_3-3复杂类属性注入","link":"#_3-3复杂类属性注入","children":[]}]},{"level":2,"title":"4.Lombook","slug":"_4-lombook","link":"#_4-lombook","children":[{"level":3,"title":"导入依赖","slug":"导入依赖-1","link":"#导入依赖-1","children":[]},{"level":3,"title":"添加注解","slug":"添加注解","link":"#添加注解","children":[]}]},{"level":2,"title":"5.SPEL","slug":"_5-spel","link":"#_5-spel","children":[]},{"level":2,"title":"6.配置文件","slug":"_6-配置文件","link":"#_6-配置文件","children":[{"level":3,"title":"6.1 读取properties文件","slug":"_6-1-读取properties文件","link":"#_6-1-读取properties文件","children":[]},{"level":3,"title":"②使用配置文件中的值","slug":"_2使用配置文件中的值","link":"#_2使用配置文件中的值","children":[]},{"level":3,"title":"6.2 引入Spring配置文件","slug":"_6-2-引入spring配置文件","link":"#_6-2-引入spring配置文件","children":[]}]},{"level":2,"title":"7.低频知识点","slug":"_7-低频知识点","link":"#_7-低频知识点","children":[{"level":3,"title":"7.1 bean的配置","slug":"_7-1-bean的配置","link":"#_7-1-bean的配置","children":[]}]},{"level":2,"title":"Spring-02","slug":"spring-02","link":"#spring-02","children":[]},{"level":2,"title":"1.注解开发","slug":"_1-注解开发","link":"#_1-注解开发","children":[]},{"level":2,"title":"2.Spring常用注解","slug":"_2-spring常用注解","link":"#_2-spring常用注解","children":[{"level":3,"title":"2.0 注解开发准备工作","slug":"_2-0-注解开发准备工作","link":"#_2-0-注解开发准备工作","children":[]},{"level":3,"title":"2.1 IOC相关注解","slug":"_2-1-ioc相关注解","link":"#_2-1-ioc相关注解","children":[]},{"level":3,"title":"2.2 DI相关注解","slug":"_2-2-di相关注解","link":"#_2-2-di相关注解","children":[]},{"level":3,"title":"2.3 xml配置文件相关注解","slug":"_2-3-xml配置文件相关注解","link":"#_2-3-xml配置文件相关注解","children":[]}]},{"level":2,"title":"3.如何选择","slug":"_3-如何选择","link":"#_3-如何选择","children":[]},{"level":2,"title":"Spring-03","slug":"spring-03","link":"#spring-03","children":[]},{"level":2,"title":"1.AOP","slug":"_1-aop","link":"#_1-aop","children":[{"level":3,"title":"1.1 概念","slug":"_1-1-概念","link":"#_1-1-概念","children":[]},{"level":3,"title":"1.2 快速入门","slug":"_1-2-快速入门","link":"#_1-2-快速入门","children":[]},{"level":3,"title":"1.3 AOP核心概念","slug":"_1-3-aop核心概念","link":"#_1-3-aop核心概念","children":[]},{"level":3,"title":"1.4 切点确定","slug":"_1-4-切点确定","link":"#_1-4-切点确定","children":[]},{"level":3,"title":"1.5 通知分类","slug":"_1-5-通知分类","link":"#_1-5-通知分类","children":[]},{"level":3,"title":"1.6 获取被增强方法的相关信息","slug":"_1-6-获取被增强方法的相关信息","link":"#_1-6-获取被增强方法的相关信息","children":[]},{"level":3,"title":"1.7 AOP应用案例","slug":"_1-7-aop应用案例","link":"#_1-7-aop应用案例","children":[]},{"level":3,"title":"1.8xml配置AOP","slug":"_1-8xml配置aop","link":"#_1-8xml配置aop","children":[]},{"level":3,"title":"1.9 多切面顺序问题","slug":"_1-9-多切面顺序问题","link":"#_1-9-多切面顺序问题","children":[]},{"level":3,"title":"1.10 AOP原理-动态代理","slug":"_1-10-aop原理-动态代理","link":"#_1-10-aop原理-动态代理","children":[]},{"level":3,"title":"1.11 切换默认动态代理方式","slug":"_1-11-切换默认动态代理方式","link":"#_1-11-切换默认动态代理方式","children":[]}]},{"level":2,"title":"Spring-04","slug":"spring-04","link":"#spring-04","children":[{"level":3,"title":"1.Spring整合Junit","slug":"_1-spring整合junit","link":"#_1-spring整合junit","children":[]},{"level":3,"title":"②编写测试类","slug":"_2编写测试类","link":"#_2编写测试类","children":[]},{"level":3,"title":"③注入对象进行测试","slug":"_3注入对象进行测试","link":"#_3注入对象进行测试","children":[]}]},{"level":2,"title":"2.Spring整合Mybatis","slug":"_2-spring整合mybatis","link":"#_2-spring整合mybatis","children":[{"level":3,"title":"导入依赖","slug":"导入依赖-5","link":"#导入依赖-5","children":[]},{"level":3,"title":"②往容器中注入整合相关对象","slug":"_2往容器中注入整合相关对象","link":"#_2往容器中注入整合相关对象","children":[]},{"level":3,"title":"③从容器中获取mapper对象进行使用","slug":"_3从容器中获取mapper对象进行使用","link":"#_3从容器中获取mapper对象进行使用","children":[]}]},{"level":2,"title":"3.Spring声明式事务","slug":"_3-spring声明式事务","link":"#_3-spring声明式事务","children":[{"level":3,"title":"3.1 事务回顾","slug":"_3-1-事务回顾","link":"#_3-1-事务回顾","children":[]},{"level":3,"title":"3.2 实现声明式事务","slug":"_3-2-实现声明式事务","link":"#_3-2-实现声明式事务","children":[]},{"level":3,"title":"3.3 属性配置","slug":"_3-3-属性配置","link":"#_3-3-属性配置","children":[]}]}],"relativePath":"java/spring/Spring.md","lastUpdated":1673189015000}'),p={name:"java/spring/Spring.md"},o=l(`<h1 id="spring-01" tabindex="-1">Spring-01 <a class="header-anchor" href="#spring-01" aria-hidden="true">#</a></h1><h2 id="_1-spring简介" tabindex="-1">1.Spring简介 <a class="header-anchor" href="#_1-spring简介" aria-hidden="true">#</a></h2><p>​ Spring是一个开源框架，它由Rod Johnson创建。它是为了解决企业应用开发的复杂性而创建的。</p><p>​ 目前是JavaEE开发的灵魂框架。他可以简化JavaEE开发，可以非常方便的整合其它框架，无侵入的进行功能增强。</p><p>​ Spring的核心就是 控制反转（IoC）和面向切面（AOP）。</p><h2 id="_2-ioc控制反转" tabindex="-1">2.IOC控制反转 <a class="header-anchor" href="#_2-ioc控制反转" aria-hidden="true">#</a></h2><h3 id="_2-1-概念" tabindex="-1">2.1 概念 <a class="header-anchor" href="#_2-1-概念" aria-hidden="true">#</a></h3><p>​ 控制反转，之前对象的控制权在类手上，现在反转后到了Spring手上。</p><h3 id="_2-2-入门案例" tabindex="-1">2.2 入门案例 <a class="header-anchor" href="#_2-2-入门案例" aria-hidden="true">#</a></h3><h4 id="导入依赖" tabindex="-1">导入依赖 <a class="header-anchor" href="#导入依赖" aria-hidden="true">#</a></h4><p>导入SpringIOC相关依赖</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-context&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;5.1.9.RELEASE&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_2编写配置文件" tabindex="-1">②编写配置文件 <a class="header-anchor" href="#_2编写配置文件" aria-hidden="true">#</a></h4><p>在resources目录下创建applicationContext.xml文件，文件名可以任意取。但是建议叫applicationContext。</p><p>内容如下：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;?</span><span style="color:#7EE787;">xml</span><span style="color:#79C0FF;"> version</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;1.0&quot;</span><span style="color:#79C0FF;"> encoding</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;">?&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">beans</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">xmlns</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:xsi</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xsi:schemaLocation</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.dao.impl.StudentDaoImpl&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;studentDao&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">beans</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_3创建容器从容器中获取对象并测试" tabindex="-1">③创建容器从容器中获取对象并测试 <a class="header-anchor" href="#_3创建容器从容器中获取对象并测试" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] args) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//创建容器</span></span>
<span class="line"><span style="color:#C9D1D9;">    ClassPathXmlApplicationContext</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">app</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ClassPathXmlApplicationContext</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;applicationContext.xml&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//获取对象</span></span>
<span class="line"><span style="color:#C9D1D9;">    StudentDao</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">studentDao</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (StudentDao) app.</span><span style="color:#D2A8FF;">getBean</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;studentDao&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//测试</span></span>
<span class="line"><span style="color:#C9D1D9;">    Student</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">studentById</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> studentDao.</span><span style="color:#D2A8FF;">getStudengById</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">30</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(studentById);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_2-3-bean的常用属性配置" tabindex="-1">2.3 Bean的常用属性配置 <a class="header-anchor" href="#_2-3-bean的常用属性配置" aria-hidden="true">#</a></h3><h4 id="_2-3-1-id" tabindex="-1">2.3.1 id <a class="header-anchor" href="#_2-3-1-id" aria-hidden="true">#</a></h4><p>​ bean的唯一标识，同一个Spring容器中不允许重复</p><h4 id="_2-3-2-class" tabindex="-1">2.3.2 class <a class="header-anchor" href="#_2-3-2-class" aria-hidden="true">#</a></h4><p>​ 全类名，用于反射创建对象</p><h4 id="_2-3-3-scope" tabindex="-1">2.3.3 scope <a class="header-anchor" href="#_2-3-3-scope" aria-hidden="true">#</a></h4><p>scope主要有两个值：singleton和prototype</p><p>如果设置为<strong>singleton</strong>则一个容器中只会有一个bean对象。默认容器创建的时候就会创建该对象。</p><p>如果设置为<strong>prototype</strong>则一个容器会有多个该bean对象。每次调用getBean方法获取的时候都会创建一个新对象。</p><h2 id="_3-di依赖注入" tabindex="-1">3.DI依赖注入 <a class="header-anchor" href="#_3-di依赖注入" aria-hidden="true">#</a></h2><p>​ 依赖注入可以理解成IOC的一种应用场景，反转的是对象间依赖关系维护权。</p><h3 id="_3-1-set方法注入" tabindex="-1">3.1 set方法注入 <a class="header-anchor" href="#_3-1-set方法注入" aria-hidden="true">#</a></h3><p>在要注入属性的bean标签中进行配置。前提是该类有提供属性对应的set方法。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.domain.Dog&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dog&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;age&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;12&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;大黄&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--</span></span>
<span class="line"><span style="color:#8B949E;">            name属性用来指定要设置哪个属性</span></span>
<span class="line"><span style="color:#8B949E;">            value属性用来设置要设置的值</span></span>
<span class="line"><span style="color:#8B949E;">            ref属性用来给引用类型的属性设置值，可以写上Spring容器中bean的id</span></span>
<span class="line"><span style="color:#8B949E;">        --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.domain.Student&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;student&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;东南枝&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;age&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;12&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;1&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--用ref引用上面的dog类型里面的变量 实现引用数据类型的赋值--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dog&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">ref</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dog&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">package</span><span style="color:#C9D1D9;"> com.dunxi.domain;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Student</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">id;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Dog</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">dog;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">Student</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">name</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">age</span><span style="color:#C9D1D9;">, Dog </span><span style="color:#FFA657;">dog</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.name </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> name;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.id </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> id;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.age </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> age;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.dog </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> dog;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Dog </span><span style="color:#D2A8FF;">getDog</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> dog;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">setDog</span><span style="color:#C9D1D9;">(Dog </span><span style="color:#FFA657;">dog</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.dog </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> dog;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Override</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;Student{&quot;</span><span style="color:#FF7B72;">+</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#A5D6FF;">&quot;name=&#39;&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> name </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;</span><span style="color:#79C0FF;">\\&#39;</span><span style="color:#A5D6FF;">&#39;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">+</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#A5D6FF;">&quot;,id=&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> id </span><span style="color:#FF7B72;">+</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#A5D6FF;">&quot;,age=&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> age </span><span style="color:#FF7B72;">+</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#A5D6FF;">&#39;}&#39;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">Student</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">Student</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">name</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">age</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.name </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> name;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.id </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> id;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.age </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">setName</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">name</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.name </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">setId</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.id </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> id;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">setAge</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">age</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.age </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">getName</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">getId</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> id;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">getAge</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><h3 id="_3-2有参构造注入" tabindex="-1">3.2有参构造注入 <a class="header-anchor" href="#_3-2有参构造注入" aria-hidden="true">#</a></h3><p>在要注入属性的bean标签中进行配置。前提是该类有提供对应的有参构造。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!--使用有参构造进行注入--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.domain.Student&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;student2&quot;</span><span style="color:#C9D1D9;"> &gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">constructor-arg</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;自挂东南枝&quot;</span><span style="color:#C9D1D9;"> &gt;&lt;/</span><span style="color:#7EE787;">constructor-arg</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">constructor-arg</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;age&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;3&quot;</span><span style="color:#C9D1D9;"> &gt;&lt;/</span><span style="color:#7EE787;">constructor-arg</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">constructor-arg</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;1&quot;</span><span style="color:#C9D1D9;"> &gt;&lt;/</span><span style="color:#7EE787;">constructor-arg</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">constructor-arg</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dog&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">ref</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dog&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">constructor-arg</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Student</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">id;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Dog</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">dog;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">Student</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">name</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">age</span><span style="color:#C9D1D9;">, Dog </span><span style="color:#FFA657;">dog</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.name </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> name;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.id </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> id;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.age </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> age;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.dog </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> dog;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_3-3复杂类属性注入" tabindex="-1">3.3复杂类属性注入 <a class="header-anchor" href="#_3-3复杂类属性注入" aria-hidden="true">#</a></h3><p>当遇到复杂类型的时候不要着急不要慌，先写property标签，完事之后写name，然后看一下有没有其他合适的属性给这个类型赋值，如果没有的话，直接结束掉当前标签，去这个标签的里面敲一个尖括号，看一下有没有合适的标签，一些简单的类型这时候是可以直接用value赋值的，例如：String，int之类的，如果是map或者set这种类型的，尖括号也是可以看到类似的标签的，这时候选中该标签，然后继续往下写就好了。</p><p>配置如下：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;?</span><span style="color:#7EE787;">xml</span><span style="color:#79C0FF;"> version</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;1.0&quot;</span><span style="color:#79C0FF;"> encoding</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;">?&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">beans</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">xmlns</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:xsi</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xsi:schemaLocation</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.domain.Phone&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;phone&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;price&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;3999&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;黑鲨&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;password&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;123&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;path&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;QQQ&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.domain.User&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;user&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;age&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;10&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;大队长&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;phone&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">ref</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;phone&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;list&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">list</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">value</span><span style="color:#C9D1D9;">&gt;敦禧&lt;/</span><span style="color:#7EE787;">value</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">value</span><span style="color:#C9D1D9;">&gt;科技&lt;/</span><span style="color:#7EE787;">value</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;/</span><span style="color:#7EE787;">list</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;phones&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">list</span><span style="color:#C9D1D9;"> &gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">ref</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">bean</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;phone&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">ref</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;/</span><span style="color:#7EE787;">list</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;set&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">set</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">value</span><span style="color:#C9D1D9;">&gt;dunxi&lt;/</span><span style="color:#7EE787;">value</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">value</span><span style="color:#C9D1D9;">&gt;keji&lt;/</span><span style="color:#7EE787;">value</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;/</span><span style="color:#7EE787;">set</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;map&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">map</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">entry</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">key</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;123&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value-ref</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;phone&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">entry</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">entry</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">key</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;456&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value-ref</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;phone&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">entry</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;/</span><span style="color:#7EE787;">map</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;arr&quot;</span><span style="color:#C9D1D9;"> &gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">array</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">value</span><span style="color:#C9D1D9;">&gt;12&lt;/</span><span style="color:#7EE787;">value</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">value</span><span style="color:#C9D1D9;">&gt;13&lt;/</span><span style="color:#7EE787;">value</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;/</span><span style="color:#7EE787;">array</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;properties&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">props</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">prop</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">key</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;k1&quot;</span><span style="color:#C9D1D9;"> &gt;v1&lt;/</span><span style="color:#7EE787;">prop</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">prop</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">key</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;k2&quot;</span><span style="color:#C9D1D9;"> &gt;v2&lt;/</span><span style="color:#7EE787;">prop</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;/</span><span style="color:#7EE787;">props</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">beans</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><p>实体类参数如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">User</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Phone</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">phone;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> List</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">list;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> List</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">Phone</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">phones;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Set</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">set;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Map</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">,</span><span style="color:#FF7B72;">Phone</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">map;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">arr;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Properties</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">properties;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Phone</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">double</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">price;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">password;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">path;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="_4-lombook" tabindex="-1">4.Lombook <a class="header-anchor" href="#_4-lombook" aria-hidden="true">#</a></h2><h3 id="导入依赖-1" tabindex="-1">导入依赖 <a class="header-anchor" href="#导入依赖-1" aria-hidden="true">#</a></h3><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.projectlombok&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;lombok&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;1.18.16&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="添加注解" tabindex="-1">添加注解 <a class="header-anchor" href="#添加注解" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span><span style="color:#8B949E;">//根据属性生成set、get方法</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span><span style="color:#8B949E;">//全参构造方法</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span><span style="color:#8B949E;">//空参构造方法</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Phone</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">double</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">price;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">password;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">path;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_5-spel" tabindex="-1">5.SPEL <a class="header-anchor" href="#_5-spel" aria-hidden="true">#</a></h2><p>​ 我们可以在配置文件中使用SPEL表达式。写法如下：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!--可以做一些简单的计算--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;phone&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;#{phone}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!--可以直接引用复杂类型名字，代替ref--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;price&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;#{39888+111}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意：SPEL需要写到value属性中，不能写到ref属性里面。</p><h2 id="_6-配置文件" tabindex="-1">6.配置文件 <a class="header-anchor" href="#_6-配置文件" aria-hidden="true">#</a></h2><h3 id="_6-1-读取properties文件" tabindex="-1">6.1 读取properties文件 <a class="header-anchor" href="#_6-1-读取properties文件" aria-hidden="true">#</a></h3><p>​ 我们可以让Spring读取properties文件中的key/value，然后使用其中的值。</p><h4 id="设置读取properties" tabindex="-1">设置读取properties <a class="header-anchor" href="#设置读取properties" aria-hidden="true">#</a></h4><p>在Spring配置文件中加入如下标签：指定要读取的文件的路径。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!--读取properties配置文件--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">context:property-placeholder</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">location</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;classpath:jdbc.properties&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">context:property-placeholder</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>其中的classpath表示类加载路径下。</p><p>我们也会用到如下写法：classpath:<em>.properties 其中的</em> 表示文件名任意。</p><blockquote><p>注意：context命名空间的引入是否正确</p></blockquote><h3 id="_2使用配置文件中的值" tabindex="-1">②使用配置文件中的值 <a class="header-anchor" href="#_2使用配置文件中的值" aria-hidden="true">#</a></h3><p>在你需要使用的时候可以使用\${key}来表示具体的值。注意要在value属性中使用才可以。例如：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dataSource&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;driverClassName&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.driver}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;url&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.url}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;username&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.username}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;password&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.password}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_6-2-引入spring配置文件" tabindex="-1">6.2 引入Spring配置文件 <a class="header-anchor" href="#_6-2-引入spring配置文件" aria-hidden="true">#</a></h3><p>​ 我们可以在主的配置文件中通过import标签的resource属性，引入其他的xml配置文件</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">import</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">resource</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;classpath:jdbc.xml&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">import</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_7-低频知识点" tabindex="-1">7.低频知识点 <a class="header-anchor" href="#_7-低频知识点" aria-hidden="true">#</a></h2><h3 id="_7-1-bean的配置" tabindex="-1">7.1 bean的配置 <a class="header-anchor" href="#_7-1-bean的配置" aria-hidden="true">#</a></h3><h4 id="_7-1-1-name属性" tabindex="-1">7.1.1 name属性 <a class="header-anchor" href="#_7-1-1-name属性" aria-hidden="true">#</a></h4><p>​ 我们可以用name属性来给bean取名。例如：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dataSource&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dataSource2,dataSource3&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;driverClassName&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.driver}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;url&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.url}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;username&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.username}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;password&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.password}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>获取的时候就可以直接使用这个名字来获取了。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">ApplicationContext</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">app</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ClassPathXmlApplicationContext</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;applicationContext.xml&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">DruidDataSource</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">dataSource</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (DruidDataSource) app.</span><span style="color:#D2A8FF;">getBean</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;dataSource3&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(dataSource);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_7-1-2-lazy-init" tabindex="-1">7.1.2 lazy-init <a class="header-anchor" href="#_7-1-2-lazy-init" aria-hidden="true">#</a></h4><p>可以控制bean的创建时间，如果设置为true就是在被第一次调用的时候才创建。（懒汉式）</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">lazy-init</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;true&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dataSource&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dataSource2,dataSource3&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;driverClassName&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.driver}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;url&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.url}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;username&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.username}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;password&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.password}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_7-1-3-init-method" tabindex="-1">7.1.3 init-method <a class="header-anchor" href="#_7-1-3-init-method" aria-hidden="true">#</a></h4><p>可以用来设置初始化方法，设置完后创建完对象的时候就会调用对应的方法。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Student</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">id;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//初始化方法</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">init</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;对学生对象进行初始化操作&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.domain.Student&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;student&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">init-method</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;init&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>注意：配置的初始化方法只能是空参的。</strong></p><h4 id="_7-1-4-destroy-method" tabindex="-1">7.1.4 destroy-method <a class="header-anchor" href="#_7-1-4-destroy-method" aria-hidden="true">#</a></h4><p>可以用来设置对象销毁之前调用的方法，设置完成后容器销毁对象前，就会帮我们去调用销毁方法。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.domain.Student&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;student&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">destroy-method</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;close&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Student</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">id;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">init</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;对学生对象进行初始化操作&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">close</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;对象销毁之前调用，进行释放资源&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>注意：配置的方法只能是空参的。</strong></p><h4 id="_7-1-5-factory-bean-factory-method" tabindex="-1">7.1.5 factory-bean&amp;factory-method <a class="header-anchor" href="#_7-1-5-factory-bean-factory-method" aria-hidden="true">#</a></h4><p>​ 当我们需要让Spring容器使用工厂类来创建对象放入Spring容器的时候可以使用factory-bean和factory-method属性。</p><h5 id="_7-1-5-1-配置实例工厂创建对象" tabindex="-1">7.1.5.1 配置实例工厂创建对象 <a class="header-anchor" href="#_7-1-5-1-配置实例工厂创建对象" aria-hidden="true">#</a></h5><p>配置文件中进行配置</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!--创建实例工厂--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.factory.CarFactory&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;carFactory&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">&lt;!--创建对象--&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!--factory-bean 是指定使用哪个工厂类型，factory-method是指定使用哪个方法创建，id代表的是创建完之后的对象名字--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">factory-bean</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;carFactory&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">factory-method</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;getCar&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;car&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>创建容器获取对象测试</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">ClassPathXmlApplicationContext</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">app</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ClassPathXmlApplicationContext</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;applicationContext.xml&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">//这时候不能写carFactory作为bean标签的名字，应该使用car 因为我们调用这个属性 就是为了创建car对象的</span></span>
<span class="line"><span style="color:#C9D1D9;">Car</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">car</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (Car) app.</span><span style="color:#D2A8FF;">getBean</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;car&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h5 id="_7-1-5-2-配置静态工厂创建对象" tabindex="-1">7.1.5.2 配置静态工厂创建对象 <a class="header-anchor" href="#_7-1-5-2-配置静态工厂创建对象" aria-hidden="true">#</a></h5><p>​ 配置文件中进行配置</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!--使用静态工厂创建Car放入Spring容器--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.factory.CarStaticFactory&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">factory-method</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;getCar&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;car2&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>​ 创建容器获取对象测试</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">ClassPathXmlApplicationContext</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">app</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ClassPathXmlApplicationContext</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;applicationContext.xml&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">Car</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">car</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (Car) app.</span><span style="color:#D2A8FF;">getBean</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;car2&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="spring-02" tabindex="-1">Spring-02 <a class="header-anchor" href="#spring-02" aria-hidden="true">#</a></h2><h2 id="_1-注解开发" tabindex="-1">1.注解开发 <a class="header-anchor" href="#_1-注解开发" aria-hidden="true">#</a></h2><p>​ 为了简化配置，Spring支持使用注解代替xml配置。</p><h2 id="_2-spring常用注解" tabindex="-1">2.Spring常用注解 <a class="header-anchor" href="#_2-spring常用注解" aria-hidden="true">#</a></h2><h3 id="_2-0-注解开发准备工作" tabindex="-1">2.0 注解开发准备工作 <a class="header-anchor" href="#_2-0-注解开发准备工作" aria-hidden="true">#</a></h3><p>​ 如果要使用注解开发必须要开启组件扫描，这样加了注解的类才会被识别出来。Spring才能去解析其中的注解。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!--注解扫描--&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!--启动组件扫描，制定对应的扫描包路径，该报及其子包下所有的类都会被扫描，加载包韩指定注解的类--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">base-package</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_2-1-ioc相关注解" tabindex="-1">2.1 IOC相关注解 <a class="header-anchor" href="#_2-1-ioc相关注解" aria-hidden="true">#</a></h3><h4 id="_2-1-1-component-controller-service-repository" tabindex="-1">2.1.1 @Component,@Controller,@Service,@Repository <a class="header-anchor" href="#_2-1-1-component-controller-service-repository" aria-hidden="true">#</a></h4><p>​ 上述四个注解都是加到类上的。</p><p>​ 他们都可以起到类似bean标签的作用。可以把加了该注解类的对象放入Spring容器中。</p><p>​ 实际在使用时选择任意一个都可以。但是后三个注解是语义化注解。</p><p>​ 如果是Service类要求使用@Service。</p><p>​ 如果是Dao类要求使用@Repository</p><p>​ 如果是Controller类（SpringMVC中会学习到）要求使用@Controller</p><p>​ 如果是其他类可以使用@Component</p><p>例如：</p><p>配置文件如下：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;?</span><span style="color:#7EE787;">xml</span><span style="color:#79C0FF;"> version</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;1.0&quot;</span><span style="color:#79C0FF;"> encoding</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;">?&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">beans</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">xmlns</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:xsi</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:context</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/context&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xsi:schemaLocation</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--注解扫描--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--启动组件扫描，制定对应的扫描包路径，该报及其子包下所有的类都会被扫描，加载包韩指定注解的类--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">base-package</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--&lt;bean class=&quot;com.dunxi.domain.Phone&quot; id=&quot;phone&quot;&gt;&lt;/bean&gt;--&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">beans</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>类如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Repository</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;userDao&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserDaoImpl</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">UserDao</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">show</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;查询数据库，展示查询到的数据&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;phone&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Phone</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">double</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">price;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">password;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">path;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;userService&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserServiceImpl</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">UserService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>测试类如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] args) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//创建容器</span></span>
<span class="line"><span style="color:#C9D1D9;">    ClassPathXmlApplicationContext</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">app</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ClassPathXmlApplicationContext</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;applicationContext.xml&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//获取对象</span></span>
<span class="line"><span style="color:#C9D1D9;">    Phone</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">phone</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (Phone) app.</span><span style="color:#D2A8FF;">getBean</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;phone&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(phone);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    UserDao</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userDao</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (UserDao) app.</span><span style="color:#D2A8FF;">getBean</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;userDao&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(userDao);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    UserService</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">service</span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (UserService) app.</span><span style="color:#D2A8FF;">getBean</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;userService&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(service);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_2-2-di相关注解" tabindex="-1">2.2 DI相关注解 <a class="header-anchor" href="#_2-2-di相关注解" aria-hidden="true">#</a></h3><p>​ 如果一个bean已经放入Spring容器中了。那么我们可以使用下列注解实现属性注入，让Spring容器帮我们完成属性的赋值。</p><h4 id="_2-2-1-value" tabindex="-1">2.2.1 @Value <a class="header-anchor" href="#_2-2-1-value" aria-hidden="true">#</a></h4><p>​ 主要用于String，Integer等可以直接赋值的属性注入。不依赖setter方法，支持SpELl表达式（#{45+3}）。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;userService&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserServiceImpl</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">UserService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> UserDao</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;1000&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">num;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;#{12+8}&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">sss;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;敦禧科技&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">show</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        userDao.</span><span style="color:#D2A8FF;">show</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h4 id="_2-2-2-autowried" tabindex="-1">2.2.2 @AutoWried <a class="header-anchor" href="#_2-2-2-autowried" aria-hidden="true">#</a></h4><p>​ Spring会给加了该注解的属性自动注入数据类型相同的对象。</p><p>前提条件是Spring相关的配置文件都写好了，还有使用这个注解的类 一定要放到spring容器当中</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;userService&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserServiceImpl</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">UserService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> UserDao</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;1000&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">num;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;#{12+8}&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">sss;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;敦禧科技&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">show</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        userDao.</span><span style="color:#D2A8FF;">show</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>​ <strong>required属性代表这个属性是否是必须的，默认值为true。如果是true的话Spring容器中如果找不到相同类型的对象完成属性注入就会出现异常。</strong></p><h4 id="_2-2-3-qualifier" tabindex="-1">2.2.3 @Qualifier <a class="header-anchor" href="#_2-2-3-qualifier" aria-hidden="true">#</a></h4><p>​ 如果相同类型的bean在容器中有多个时，单独使用@AutoWired就不能满足需求，这时候可以再加上@Qualifier来指定bean的名字从容器中获取bean注入。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Qualifier</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;userDao2&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> UserDao</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userDao;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>注意：该注解不能单独使用，需要配合@Autowired使用</p></blockquote><h3 id="_2-3-xml配置文件相关注解" tabindex="-1">2.3 xml配置文件相关注解 <a class="header-anchor" href="#_2-3-xml配置文件相关注解" aria-hidden="true">#</a></h3><h4 id="configuration" tabindex="-1">@Configuration <a class="header-anchor" href="#configuration" aria-hidden="true">#</a></h4><p>​ 标注在类上，表示当前类是一个注解（配置）类。我们可以用注解来完全替换掉xml配置文件。</p><p>​ 注意：如果使用配置类替换了xml配置，spring容器需要使用：AnnotationConfigApplicationContext</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Configuration</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ApplicationConfig</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="componentscan" tabindex="-1">@ComponentScan <a class="header-anchor" href="#componentscan" aria-hidden="true">#</a></h4><p>​ 可以用来代替context:component-scan标签来配置组件扫描。</p><p>​ basePackages属性来指定要扫描的包。</p><p>​ 注意要加在配置类上。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Configuration</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ComponentScan</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">basePackages</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;com.dunxi&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//指定要扫描的包</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ApplicationConfig</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="bean" tabindex="-1">@Bean <a class="header-anchor" href="#bean" aria-hidden="true">#</a></h4><p>​ 可以用来代替bean标签，主要用于第三方类的注入。</p><p>​ 使用：定义一个方法，在方法中创建对应的对象并且作为返回值返回。然后再方法上加上@Bean注解，注解的value属性来设置bean的名称。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Configuration</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ComponentScan</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">basePackages</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;com.dunxi&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ApplicationConfig</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Bean</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;dataSource&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> DruidDataSource </span><span style="color:#D2A8FF;">getDataSource</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        DruidDataSource</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">druidDataSource</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">DruidDataSource</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        druidDataSource.</span><span style="color:#D2A8FF;">setDriverClassName</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        druidDataSource.</span><span style="color:#D2A8FF;">setUsername</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;root&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        druidDataSource.</span><span style="color:#D2A8FF;">setUrl</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;jdbc:mysql://localhost:3306/mybatis_db&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        druidDataSource.</span><span style="color:#D2A8FF;">setPassword</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;123456&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> druidDataSource;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>注意事项：如果同一种类型的对象在容器中只有一个，我们可以不设置bean的名称。</strong></p><p>具体写法如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Configuration</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ComponentScan</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">basePackages</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;com.dunxi&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ApplicationConfig</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Bean</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> DruidDataSource </span><span style="color:#D2A8FF;">getDataSource</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        DruidDataSource</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">druidDataSource</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">DruidDataSource</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        druidDataSource.</span><span style="color:#D2A8FF;">setDriverClassName</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        druidDataSource.</span><span style="color:#D2A8FF;">setUsername</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;root&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        druidDataSource.</span><span style="color:#D2A8FF;">setUrl</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;jdbc:mysql://localhost:3306/mybatis_db&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        druidDataSource.</span><span style="color:#D2A8FF;">setPassword</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;123456&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> druidDataSource;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>获取方式如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] args) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//创建注解容器</span></span>
<span class="line"><span style="color:#C9D1D9;">        AnnotationConfigApplicationContext</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">app</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">AnnotationConfigApplicationContext</span><span style="color:#C9D1D9;">(ApplicationConfig.class);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//根据对应类的字节码对象获取</span></span>
<span class="line"><span style="color:#C9D1D9;">        DruidDataSource</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">dataSource</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (DruidDataSource) app.</span><span style="color:#D2A8FF;">getBean</span><span style="color:#C9D1D9;">(DruidDataSource.class);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(dataSource);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="propertysource" tabindex="-1">@PropertySource <a class="header-anchor" href="#propertysource" aria-hidden="true">#</a></h4><p>​ 可以用来代替context:property-placeholder,让Spring读取指定的properties文件。然后可以使用@Value来获取读取到的值。</p><p>​ <strong>使用：在配置类上加@PropertySource注解，注解的value属性来设置properties文件的路径。然后在配置类中定义成员变量。在成员变量上使用@Value注解来获取读到的值并给对应的成员变量赋值。</strong></p><p>例如：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#A5D6FF;">jdbc.driver=com.mysql.jdbc.Driver</span></span>
<span class="line"><span style="color:#A5D6FF;">jdbc.url=jdbc:mysql://localhost:3306/mybatis_db</span></span>
<span class="line"><span style="color:#A5D6FF;">jdbc.username=root</span></span>
<span class="line"><span style="color:#A5D6FF;">jdbc.password=123456</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>读取文件并获取值</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Configuration</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ComponentScan</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">basePackages</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;com.dunxi&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">PropertySource</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;jdbc.properties&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//括号里面写配置文件的路径</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ApplicationConfig</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">//先利用Value属性\${}读取文件中的内容，然后赋值给变量，然后调用函数的时候直接传入该变量</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;\${jdbc.driver}&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">driverClassName;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;\${jdbc.url}&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">url;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;\${jdbc.username}&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">username;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;\${jdbc.password}&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">password;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Bean</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> DruidDataSource </span><span style="color:#D2A8FF;">getDataSource</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        DruidDataSource</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">druidDataSource</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">DruidDataSource</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        druidDataSource.</span><span style="color:#D2A8FF;">setDriverClassName</span><span style="color:#C9D1D9;">(driverClassName);</span></span>
<span class="line"><span style="color:#C9D1D9;">        druidDataSource.</span><span style="color:#D2A8FF;">setUsername</span><span style="color:#C9D1D9;">(username);</span></span>
<span class="line"><span style="color:#C9D1D9;">        druidDataSource.</span><span style="color:#D2A8FF;">setUrl</span><span style="color:#C9D1D9;">(url);</span></span>
<span class="line"><span style="color:#C9D1D9;">        druidDataSource.</span><span style="color:#D2A8FF;">setPassword</span><span style="color:#C9D1D9;">(password);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> druidDataSource;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p><strong>注意事项：使用@Value获取读到的properties文件中的值时使用的是\${key},而不是#{key}。</strong></p><h2 id="_3-如何选择" tabindex="-1">3.如何选择 <a class="header-anchor" href="#_3-如何选择" aria-hidden="true">#</a></h2><p>SSM</p><p>​ 自己项目中的类IOC和DI都使用注解，对第三方jar包中的类，配置组件扫描时使用xml进行配置。</p><p>②SpringBoot</p><p>​ 纯注解开发</p><h2 id="spring-03" tabindex="-1">Spring-03 <a class="header-anchor" href="#spring-03" aria-hidden="true">#</a></h2><h2 id="_1-aop" tabindex="-1">1.AOP <a class="header-anchor" href="#_1-aop" aria-hidden="true">#</a></h2><h3 id="_1-1-概念" tabindex="-1">1.1 概念 <a class="header-anchor" href="#_1-1-概念" aria-hidden="true">#</a></h3><p>​ AOP为Aspect Oriented Programming的缩写，意为：面向切面编程。它是一种可以再不修改原来的核心代码的情况下给程序动态统一进行增强的一种技术。</p><p>​ <strong>SpringAOP：批量对Spring容器中bean的方法做增强，并且这种增强不会与原来方法中的代码耦合。</strong></p><h3 id="_1-2-快速入门" tabindex="-1">1.2 快速入门 <a class="header-anchor" href="#_1-2-快速入门" aria-hidden="true">#</a></h3><h4 id="_1-2-1-需求" tabindex="-1">1.2.1 需求 <a class="header-anchor" href="#_1-2-1-需求" aria-hidden="true">#</a></h4><p>​ 要求让_04_SpringAOP模块中service包下所有类的所有方法在调用前都输出：方法被调用了。</p><h4 id="_1-2-2-准备工作" tabindex="-1">1.2.2 准备工作 <a class="header-anchor" href="#_1-2-2-准备工作" aria-hidden="true">#</a></h4><h5 id="添加依赖" tabindex="-1">添加依赖 <a class="header-anchor" href="#添加依赖" aria-hidden="true">#</a></h5><p>需要添加SpringIOC相关依赖和AOP相关依赖。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--SpringIOC相关依赖--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-context&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;5.1.9.RELEASE&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--AOP相关依赖--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.aspectj&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;aspectjweaver&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;1.8.13&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h5 id="_2相关bean要注入容器中" tabindex="-1">②相关bean要注入容器中 <a class="header-anchor" href="#_2相关bean要注入容器中" aria-hidden="true">#</a></h5><p>开启组件扫描</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">base-package</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>加@Service注解</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">PhoneService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">deleteAll</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;PhoneService中的核心代码&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">deleteAll</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;UserService中的核心代码&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_1-2-3-实现aop" tabindex="-1">1.2.3 实现AOP <a class="header-anchor" href="#_1-2-3-实现aop" aria-hidden="true">#</a></h4><h5 id="开启aop注解支持" tabindex="-1">开启AOP注解支持 <a class="header-anchor" href="#开启aop注解支持" aria-hidden="true">#</a></h5><p>使用<strong>aop:aspectj-autoproxy</strong>标签</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;?</span><span style="color:#7EE787;">xml</span><span style="color:#79C0FF;"> version</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;1.0&quot;</span><span style="color:#79C0FF;"> encoding</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;">?&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">beans</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">xmlns</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:xsi</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:context</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/context&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:aop</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/aop&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xsi:schemaLocation</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--开启组件扫描--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">base-package</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--开启AOP注解支持--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">aop:aspectj-autoproxy</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">aop:aspectj-autoproxy</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">beans</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="_2创建切面类" tabindex="-1">②创建切面类 <a class="header-anchor" href="#_2创建切面类" aria-hidden="true">#</a></h5><p>创建一个类，在类上面加上@Component和@Aspect</p><p>使用@Pointcut注解来指定要被增强的方法</p><p>使用@Before注解来给我们的增强代码所在的方法进行标识，并且指定了增强代码是在被增强方法执行之前执行的。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span><span style="color:#8B949E;">//表示将这个类放到spring容器中</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Aspect</span><span style="color:#8B949E;">//表示这个对象比较特殊，这是一个切面类</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyAspect</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//          对service包下的所有类的所有方法进行增强</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Pointcut</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;execution(* com.dunxi.service.*.*(..))&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">pt</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">/*</span></span>
<span class="line"><span style="color:#8B949E;">     用@Before注解来指定方法中是增强的代码，并且是在被增强方法执行前执行的</span></span>
<span class="line"><span style="color:#8B949E;">     @Before的属性写上加了@Pointcut注解的方法：方法名()</span></span>
<span class="line"><span style="color:#8B949E;">    */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Before</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;pt()&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//括号里面表示调用哪个切点表达式</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">methodbefore</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;方法被调用了。&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h4 id="_1-2-4-测试" tabindex="-1">1.2.4 测试 <a class="header-anchor" href="#_1-2-4-测试" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] args) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//创建容器</span></span>
<span class="line"><span style="color:#C9D1D9;">    ApplicationContext</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">applicationContext</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ClassPathXmlApplicationContext</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;applicationContext.xml&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//获取对象</span></span>
<span class="line"><span style="color:#C9D1D9;">    PhoneService</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">phoneService</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> applicationContext.</span><span style="color:#D2A8FF;">getBean</span><span style="color:#C9D1D9;">(PhoneService.class);</span></span>
<span class="line"><span style="color:#C9D1D9;">    UserService</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userService</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> applicationContext.</span><span style="color:#D2A8FF;">getBean</span><span style="color:#C9D1D9;">(UserService.class);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//调用方法</span></span>
<span class="line"><span style="color:#C9D1D9;">    phoneService.</span><span style="color:#D2A8FF;">deleteAll</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    userService.</span><span style="color:#D2A8FF;">deleteAll</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_1-3-aop核心概念" tabindex="-1">1.3 AOP核心概念 <a class="header-anchor" href="#_1-3-aop核心概念" aria-hidden="true">#</a></h3><ul><li>Joinpoint（连接点）：所谓连接点是指那些可以被增强到的点。在spring中，这些点指的是方法，因为spring只支持方法类型的连接点</li><li><strong>Pointcut（切入点）：所谓切入点是指被增强的连接点（方法）</strong></li><li><strong>Advice（通知/增强）：所谓通知是指具体增强的代码</strong></li><li>Target（目标对象）：被增强的对象就是目标对象</li><li><strong>Aspect（切面）：是切入点和通知（引介）的结合</strong></li><li>Proxy(代理)：一个类被AOP增强后，就产生一个结果代理类</li></ul><h3 id="_1-4-切点确定" tabindex="-1">1.4 切点确定 <a class="header-anchor" href="#_1-4-切点确定" aria-hidden="true">#</a></h3><h4 id="_1-4-1-切点表达式" tabindex="-1">1.4.1 切点表达式 <a class="header-anchor" href="#_1-4-1-切点表达式" aria-hidden="true">#</a></h4><p>​ 可以使用切点表达式来表示要对哪些方法进行增强。</p><p>写法：<strong>execution([修饰符]返回值类型 包名.类名.方法名(参数))</strong></p><ul><li>访问修饰符可以省略，大部分情况下省略</li><li>返回值类型、包名、类名、方法名可以使用星号* 代表任意</li><li>包名与类名之间一个点.代表当前包下的类，两个点..表示当前包及其子包下的类</li><li>参数列表可以使用两个点 ..表示任意个数，任意类型做参数列表</li></ul><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#D2A8FF;">execution</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> com.dunxi.service.</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">.</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">(..)) </span><span style="color:#8B949E;">//表示com.dunxi.service包下任意类，方法名任意，参数列表任意，返回值类型任意</span></span>
<span class="line"><span style="color:#D2A8FF;">execution</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> com.dunxi.service..</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">.</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">(..))</span><span style="color:#8B949E;">//表示com.dunxi.service包下及其子包下任意类，方法名任意，参数列表任意，返回值类型任意。</span></span>
<span class="line"><span style="color:#D2A8FF;">execution</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> com.dunxi.service.</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">.</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">())</span><span style="color:#8B949E;">//表示com.dunxi.service包下任意类，方法名任意，要求方法不能有参数，返回值类型任意</span></span>
<span class="line"><span style="color:#D2A8FF;">execution</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> com.dunxi.service.</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">.delete</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">(..))</span><span style="color:#8B949E;">//表示com.dunxi.service包下任意类，方法名必须以delete开头，方法不能有参数，返回值类型任意</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_1-4-2-切点函数-annotation" tabindex="-1">1.4.2 切点函数@annotation <a class="header-anchor" href="#_1-4-2-切点函数-annotation" aria-hidden="true">#</a></h4><p>​ 我们也可以在要增强的方法上加上注解。然后使用@annotation来表示对加了什么注解的方法进行增强。</p><p>写法**@annotation(注解的全类名)**</p><p>例如：</p><p>定义注解如下</p><div class="language-JAVA line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">JAVA</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Retention</span><span style="color:#C9D1D9;">(RetentionPolicy.RUNTIME)</span><span style="color:#8B949E;">//该注解可以保留到运行时</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Target</span><span style="color:#C9D1D9;">({ElementType.METHOD})</span><span style="color:#8B949E;">//该注解可以加在方法上</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> @</span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">InvokeLog</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>给需要增强的方法加注解</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">PhoneService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">InvokeLog</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">deleteAll</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;PhoneService中的核心代码&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>切面类中使用@annotation来确定要增强的方法</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span><span style="color:#8B949E;">//表示将这个类放到spring容器中</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Aspect</span><span style="color:#8B949E;">//表示这个对象比较特殊，这是一个切面类</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyAspect</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//用Pointcut注解中的属性来指定对哪些方法进行增强</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Pointcut</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;@annotation(com.dunxi.aspect.InvokeLog)&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">pt</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Before</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;pt()&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//括号里面表示调用哪个切点表达式</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">methodbefore</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;方法被调用了。&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_1-5-通知分类" tabindex="-1">1.5 通知分类 <a class="header-anchor" href="#_1-5-通知分类" aria-hidden="true">#</a></h3><ul><li>@Before：前置通知，在目标方法执行前执行</li><li>@AfterRetuning：返回后通知，在目标方法执行后执行，如果出现异常不会执行</li><li>@After：后置通知，在目标方法返回结果之后执行，无论是否出现异常都会执行</li><li>@AfterThrowing：异常通知，在目标方法抛出异常后执行</li><li><strong>@Around：环绕通知，围绕着方法执行</strong></li></ul><p>理解不同的通知执行时机。（<strong>下面的伪代码是用来理解单个通知执行时机的，不能用来理解多个通知情况下的执行顺序。如果需要配置多个通知我们会选择使用Around通知，更加的清晰并且好用</strong>）</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Object </span><span style="color:#D2A8FF;">test</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#D2A8FF;">before</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//@Before前置通知</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;">{</span></span>
<span class="line"><span style="color:#C9D1D9;">        Object</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">ret</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> 目标方法();</span><span style="color:#8B949E;">//目标方法调用</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#D2A8FF;">afterReturing</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//@AfterRetuning 返回后通知</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;"> (Throwable </span><span style="color:#FFA657;">throwable</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        throwable.</span><span style="color:#D2A8FF;">printStackTrace</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#D2A8FF;">afterThrowing</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//@AfterThwowing 出现异常后通知</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span><span style="color:#FF7B72;">finally</span><span style="color:#C9D1D9;">{</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#D2A8FF;">after</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//@After 后置通知，不管有没有执行出现异常 都会通知</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> ret;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>环绕同志非常特殊，他可以对目标方法进行全方位的增强。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Around</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;pt()&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">around</span><span style="color:#C9D1D9;">(ProceedingJoinPoint pjp ){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;目标方法前，前置通知&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">        pjp.</span><span style="color:#D2A8FF;">proceed</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;目标方法后，后置通知&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    } </span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;"> (Throwable </span><span style="color:#FFA657;">throwable</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        throwable.</span><span style="color:#D2A8FF;">printStackTrace</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;目标方法出现异常后通知&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span><span style="color:#FF7B72;">finally</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;不管怎样，就是要通知&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_1-6-获取被增强方法的相关信息" tabindex="-1">1.6 获取被增强方法的相关信息 <a class="header-anchor" href="#_1-6-获取被增强方法的相关信息" aria-hidden="true">#</a></h3><p>​ 我们实际对方法进行增强时往往还需要获取到被增强代码的相关信息，比如方法名，参数，返回值，异常对象等。</p><p>我们可以在出了环绕通知外的所有通知方法中增加一个<strong>JoinPoint类型</strong>的参数。这个参数封装了被增强方法的相关信息。<strong>我们可以通过这个参数获取到除了异常对象和返回值之外的所有信息。</strong></p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Before</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;pt()&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//括号里面表示调用哪个切点表达式</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">methodbefore</span><span style="color:#C9D1D9;">(JoinPoint joinPoint){</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">Object</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">args</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> joinPoint.</span><span style="color:#D2A8FF;">getArgs</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//方法调用时传入的参数</span></span>
<span class="line"><span style="color:#C9D1D9;">    Object</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">target</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> joinPoint.</span><span style="color:#D2A8FF;">getTarget</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//被代理的对象</span></span>
<span class="line"><span style="color:#C9D1D9;">    MethodSignature</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">signature</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (MethodSignature) joinPoint.</span><span style="color:#D2A8FF;">getSignature</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//获取被增强方法签名封装的对象</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;方法被调用了。&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Before</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;pt()&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">printLog</span><span style="color:#C9D1D9;">(JoinPoint joinPoint){</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//输出被增强的方法的所在类名 方法名 调用时传入的参数</span></span>
<span class="line"><span style="color:#C9D1D9;">    MethodSignature</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">signature</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (MethodSignature) joinPoint.</span><span style="color:#D2A8FF;">getSignature</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//获取被增强方法的全类名</span></span>
<span class="line"><span style="color:#C9D1D9;">    String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">ClassName</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> signature.</span><span style="color:#D2A8FF;">getDeclaringTypeName</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//获取被增强方法的方法名</span></span>
<span class="line"><span style="color:#C9D1D9;">    String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> signature.</span><span style="color:#D2A8FF;">getName</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//获取被增强防范调用时传入的参数</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">Object</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">args</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> joinPoint.</span><span style="color:#D2A8FF;">getArgs</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(ClassName</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;===&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">name</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> Arrays.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(args));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;方法被调用了&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>​</p><p>​ 如果需要<strong>获取被增强方法中的异常对象或者返回值</strong>则需要在方法参数上加一个对应类型的参数，并且使用注解的属性进行配置。这样Spring会把你想获取的数据赋值给对应的方法参数。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AfterReturning</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;pt()&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">returning</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;ret&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//使用returning属性指定了把目标方法返回值赋值给下面方法的参数ret</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">afterReturning</span><span style="color:#C9D1D9;">(JoinPoint joinPoint ,Object ret){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;AfterReturning&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AfterThrowing</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;pt()&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">throwing</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;e&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//使用throwing属性指定了把出现异常的对象赋值给下面方法的参数e</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">afterThrowing</span><span style="color:#C9D1D9;">(JoinPoint joinPoint ,Throwable e){</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;afterThrowing&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>​ 还有更简单方便的方法</p><p>​ 直接在环绕通知方法中增加一个ProceedingJoinPoint类型的参数。这个参数封装了被增强方法的相关信息。</p><p>该参数的proceed()方法被调用相当于被增强方法被执行，调用后的返回值就相当于被增强方法的返回值。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">//环绕通知获取参数</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Around</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;pt()&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Object </span><span style="color:#D2A8FF;">around</span><span style="color:#C9D1D9;">(ProceedingJoinPoint jpj){</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">Object</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">args</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> jpj.</span><span style="color:#D2A8FF;">getArgs</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    Object</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">target</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> jpj.</span><span style="color:#D2A8FF;">getTarget</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    MethodSignature</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">signature</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (MethodSignature) jpj.</span><span style="color:#D2A8FF;">getSignature</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">ClassName</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> signature.</span><span style="color:#D2A8FF;">getDeclaringTypeName</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(Arrays.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(args)</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;==&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">ClassName</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;  &quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">target);</span></span>
<span class="line"><span style="color:#C9D1D9;">    Object</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">ret</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">        ret </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> jpj.</span><span style="color:#D2A8FF;">proceed</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//目标方法执行</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;返回值：&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">ret);</span></span>
<span class="line"><span style="color:#C9D1D9;">    } </span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;"> (Throwable </span><span style="color:#FFA657;">throwable</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        throwable.</span><span style="color:#D2A8FF;">printStackTrace</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;错误信息：&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">throwable);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> ret;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="_1-7-aop应用案例" tabindex="-1">1.7 AOP应用案例 <a class="header-anchor" href="#_1-7-aop应用案例" aria-hidden="true">#</a></h3><h4 id="_1-7-1-需求" tabindex="-1">1.7.1 需求 <a class="header-anchor" href="#_1-7-1-需求" aria-hidden="true">#</a></h4><p>现有AI核心功能代码如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">AIController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//AI自动回答</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">getAnswer</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">question</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//AI核心代码 价值10个亿</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">str</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> question.</span><span style="color:#D2A8FF;">replace</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;吗&quot;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        str </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> str.</span><span style="color:#D2A8FF;">replace</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;？&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;!&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> str;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//AI算命</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">fortuneTelling</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">name</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//AI算命核心代码</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">strs</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> {</span><span style="color:#A5D6FF;">&quot;女犯伤官把夫克，旱地莲花栽不活，不是吃上两家饭，也要刷上三家锅。&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;一朵鲜花头上戴，一年四季也不开，一心想要花开时，采花之人没到来。&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;此命生来脾气暴，上来一阵双脚跳，对你脾气啥都好，经常与人吵和闹。&quot;</span><span style="color:#C9D1D9;">};</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">index</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> name.</span><span style="color:#D2A8FF;">hashCode</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">3</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> strs[index];</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>​ 现在为了保证数据的安全性，要求调用方法时fortuneTelling传入的姓名是经过加密的。我们需要对传入的参数进行解密后才能使用。并且要对该方法的返回值进行加密后返回。</p><p>​ <strong>PS：后期也可能让其他方法进行相应的加密处理。</strong></p><p>字符串加密解密直接使用下面的工具类即可：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> javax.crypto.Cipher;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> javax.crypto.KeyGenerator;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> javax.crypto.SecretKey;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> javax.crypto.spec.SecretKeySpec;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.security.SecureRandom;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">CryptUtil</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">AES</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;AES&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">keysizeAES</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">128</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">charset</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;utf-8&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">parseByte2HexStr</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">byte</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">buf</span><span style="color:#C9D1D9;">[]) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> StringBuffer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">sb</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">StringBuffer</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">for</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">i</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">; i </span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;"> buf.length; i</span><span style="color:#FF7B72;">++</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">hex</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> Integer.</span><span style="color:#D2A8FF;">toHexString</span><span style="color:#C9D1D9;">(buf[i] </span><span style="color:#FF7B72;">&amp;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0xFF</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (hex.</span><span style="color:#D2A8FF;">length</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">==</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">                hex </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;0&#39;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> hex;</span></span>
<span class="line"><span style="color:#C9D1D9;">            }</span></span>
<span class="line"><span style="color:#C9D1D9;">            sb.</span><span style="color:#D2A8FF;">append</span><span style="color:#C9D1D9;">(hex.</span><span style="color:#D2A8FF;">toUpperCase</span><span style="color:#C9D1D9;">());</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> sb.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">byte</span><span style="color:#C9D1D9;">[] </span><span style="color:#D2A8FF;">parseHexStr2Byte</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> String </span><span style="color:#FFA657;">hexStr</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (hexStr.</span><span style="color:#D2A8FF;">length</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">byte</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">result</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">byte</span><span style="color:#C9D1D9;">[hexStr.</span><span style="color:#D2A8FF;">length</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">/</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">];</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">for</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">i</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">;i</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;"> hexStr.</span><span style="color:#D2A8FF;">length</span><span style="color:#C9D1D9;">()</span><span style="color:#FF7B72;">/</span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">; i</span><span style="color:#FF7B72;">++</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">high</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> Integer.</span><span style="color:#D2A8FF;">parseInt</span><span style="color:#C9D1D9;">(hexStr.</span><span style="color:#D2A8FF;">substring</span><span style="color:#C9D1D9;">(i </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">, i </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">), </span><span style="color:#79C0FF;">16</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">low</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> Integer.</span><span style="color:#D2A8FF;">parseInt</span><span style="color:#C9D1D9;">(hexStr.</span><span style="color:#D2A8FF;">substring</span><span style="color:#C9D1D9;">(i </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">, i </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">), </span><span style="color:#79C0FF;">16</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">            result[i] </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">byte</span><span style="color:#C9D1D9;">) (high </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">16</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> low);</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> result;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">keyGeneratorES</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> String </span><span style="color:#FFA657;">res</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> String </span><span style="color:#FFA657;">algorithm</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> String </span><span style="color:#FFA657;">key</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> Integer </span><span style="color:#FFA657;">keysize</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> Boolean </span><span style="color:#FFA657;">bEncode</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> KeyGenerator</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">g</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> KeyGenerator.</span><span style="color:#D2A8FF;">getInstance</span><span style="color:#C9D1D9;">(algorithm);</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (keysize </span><span style="color:#FF7B72;">==</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">byte</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">keyBytes</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> charset </span><span style="color:#FF7B72;">==</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">?</span><span style="color:#C9D1D9;"> key.</span><span style="color:#D2A8FF;">getBytes</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> key.</span><span style="color:#D2A8FF;">getBytes</span><span style="color:#C9D1D9;">(charset);</span></span>
<span class="line"><span style="color:#C9D1D9;">                g.</span><span style="color:#D2A8FF;">init</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">SecureRandom</span><span style="color:#C9D1D9;">(keyBytes));</span></span>
<span class="line"><span style="color:#C9D1D9;">            } </span><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (key </span><span style="color:#FF7B72;">==</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">                g.</span><span style="color:#D2A8FF;">init</span><span style="color:#C9D1D9;">(keysize);</span></span>
<span class="line"><span style="color:#C9D1D9;">            } </span><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">byte</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">keyBytes</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> charset </span><span style="color:#FF7B72;">==</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">?</span><span style="color:#C9D1D9;"> key.</span><span style="color:#D2A8FF;">getBytes</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> key.</span><span style="color:#D2A8FF;">getBytes</span><span style="color:#C9D1D9;">(charset);</span></span>
<span class="line"><span style="color:#C9D1D9;">                SecureRandom</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">random</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> SecureRandom.</span><span style="color:#D2A8FF;">getInstance</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;SHA1PRNG&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">                random.</span><span style="color:#D2A8FF;">setSeed</span><span style="color:#C9D1D9;">(keyBytes);</span></span>
<span class="line"><span style="color:#C9D1D9;">                g.</span><span style="color:#D2A8FF;">init</span><span style="color:#C9D1D9;">(keysize, random);</span></span>
<span class="line"><span style="color:#C9D1D9;">            }</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> SecretKey</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">sk</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> g.</span><span style="color:#D2A8FF;">generateKey</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> SecretKeySpec</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">sks</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">SecretKeySpec</span><span style="color:#C9D1D9;">(sk.</span><span style="color:#D2A8FF;">getEncoded</span><span style="color:#C9D1D9;">(), algorithm);</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> Cipher</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">cipher</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> Cipher.</span><span style="color:#D2A8FF;">getInstance</span><span style="color:#C9D1D9;">(algorithm);</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (bEncode) {</span></span>
<span class="line"><span style="color:#C9D1D9;">                cipher.</span><span style="color:#D2A8FF;">init</span><span style="color:#C9D1D9;">(Cipher.ENCRYPT_MODE, sks);</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">byte</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">resBytes</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> charset </span><span style="color:#FF7B72;">==</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#FF7B72;">?</span><span style="color:#C9D1D9;"> res.</span><span style="color:#D2A8FF;">getBytes</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> res.</span><span style="color:#D2A8FF;">getBytes</span><span style="color:#C9D1D9;">(charset);</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">parseByte2HexStr</span><span style="color:#C9D1D9;">(cipher.</span><span style="color:#D2A8FF;">doFinal</span><span style="color:#C9D1D9;">(resBytes));</span></span>
<span class="line"><span style="color:#C9D1D9;">            } </span><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">                cipher.</span><span style="color:#D2A8FF;">init</span><span style="color:#C9D1D9;">(Cipher.DECRYPT_MODE, sks);</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">String</span><span style="color:#C9D1D9;">(cipher.</span><span style="color:#D2A8FF;">doFinal</span><span style="color:#C9D1D9;">(</span><span style="color:#D2A8FF;">parseHexStr2Byte</span><span style="color:#C9D1D9;">(res)));</span></span>
<span class="line"><span style="color:#C9D1D9;">            }</span></span>
<span class="line"><span style="color:#C9D1D9;">        } </span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;"> (Exception </span><span style="color:#FFA657;">e</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            e.</span><span style="color:#D2A8FF;">printStackTrace</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">AESencode</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> String </span><span style="color:#FFA657;">res</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">keyGeneratorES</span><span style="color:#C9D1D9;">(res, AES, </span><span style="color:#A5D6FF;">&quot;aA11*-%&quot;</span><span style="color:#C9D1D9;">, keysizeAES, </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">AESdecode</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> String </span><span style="color:#FFA657;">res</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">keyGeneratorES</span><span style="color:#C9D1D9;">(res, AES, </span><span style="color:#A5D6FF;">&quot;aA11*-%&quot;</span><span style="color:#C9D1D9;">, keysizeAES, </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] </span><span style="color:#FFA657;">args</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#A5D6FF;">&quot;加密后:&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">AESencode</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;将要加密的明文&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">        );</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#A5D6FF;">&quot;解密后:&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">AESdecode</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;730CAE52D85B372FB161B39D0A908B8CC6EF6DA2F7D4E595D35402134C3E18AB&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">        );</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br></div></div><h4 id="_1-7-2-实现" tabindex="-1">1.7.2 实现 <a class="header-anchor" href="#_1-7-2-实现" aria-hidden="true">#</a></h4><h5 id="导入依赖-2" tabindex="-1">导入依赖 <a class="header-anchor" href="#导入依赖-2" aria-hidden="true">#</a></h5><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--SpringIOC相关依赖--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-context&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;5.1.9.RELEASE&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--AOP相关依赖--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.aspectj&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;aspectjweaver&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;1.8.13&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_1-7-2-实现-1" tabindex="-1">1.7.2 实现 <a class="header-anchor" href="#_1-7-2-实现-1" aria-hidden="true">#</a></h4><h5 id="导入依赖-3" tabindex="-1">导入依赖 <a class="header-anchor" href="#导入依赖-3" aria-hidden="true">#</a></h5><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!--SpringIOC相关依赖--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-context&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;5.1.9.RELEASE&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!--AOP相关依赖--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.aspectj&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;aspectjweaver&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;1.8.13&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.projectlombok&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;lombok&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;1.18.16&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h5 id="_2开启aop注解支持" tabindex="-1">②开启AOP注解支持 <a class="header-anchor" href="#_2开启aop注解支持" aria-hidden="true">#</a></h5><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;?</span><span style="color:#7EE787;">xml</span><span style="color:#79C0FF;"> version</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;1.0&quot;</span><span style="color:#79C0FF;"> encoding</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;">?&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">beans</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">xmlns</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:xsi</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:context</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/context&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:aop</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/aop&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xsi:schemaLocation</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--配置组件扫描--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">base-package</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--启动AOP注解支持--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">aop:aspectj-autoproxy</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">aop:aspectj-autoproxy</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">beans</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h5 id="_3自定义注解" tabindex="-1">③自定义注解 <a class="header-anchor" href="#_3自定义注解" aria-hidden="true">#</a></h5><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">package</span><span style="color:#C9D1D9;"> com.dunxi.aspect;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.lang.annotation.ElementType;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.lang.annotation.Retention;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.lang.annotation.RetentionPolicy;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.lang.annotation.Target;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Target</span><span style="color:#C9D1D9;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Retention</span><span style="color:#C9D1D9;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> @</span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">Crypt</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="_4在目标方法上增加注解" tabindex="-1">④在目标方法上增加注解 <a class="header-anchor" href="#_4在目标方法上增加注解" aria-hidden="true">#</a></h5><p><strong>注意：目标对象一定要记得注入Spring容器中</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">AIController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//AI自动回答</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Crypt</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">getAnswer</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">question</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//AI核心代码 价值10个亿</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">str</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> question.</span><span style="color:#D2A8FF;">replace</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;吗&quot;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        str </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> str.</span><span style="color:#D2A8FF;">replace</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;？&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;!&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> str;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//AI算命</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Crypt</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">fortuneTelling</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">name</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//AI算命核心代码</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">strs</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> {</span><span style="color:#A5D6FF;">&quot;女犯伤官把夫克，旱地莲花栽不活，不是吃上两家饭，也要刷上三家锅。&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;一朵鲜花头上戴，一年四季也不开，一心想要花开时，采花之人没到来。&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;此命生来脾气暴，上来一阵双脚跳，对你脾气啥都好，经常与人吵和闹。&quot;</span><span style="color:#C9D1D9;">};</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">index</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> name.</span><span style="color:#D2A8FF;">hashCode</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">%</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">3</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> strs[index];</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h5 id="_5定义切面类" tabindex="-1">⑤定义切面类 <a class="header-anchor" href="#_5定义切面类" aria-hidden="true">#</a></h5><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">package</span><span style="color:#C9D1D9;"> com.dunxi.aspect;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> com.dunxi.util.CryptUtil;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.ProceedingJoinPoint;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.annotation.Around;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.annotation.Aspect;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.annotation.Pointcut;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Aspect</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">CryptAspect</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//确定切点</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Pointcut</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;@annotation(com.dunxi.aspect.Crypt)&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">pt</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//定义通知</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Around</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;pt()&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Object </span><span style="color:#D2A8FF;">crypt</span><span style="color:#C9D1D9;">(ProceedingJoinPoint </span><span style="color:#FFA657;">pjp</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//获取目标方法调用时的参数</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">Object</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">args</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> pjp.</span><span style="color:#D2A8FF;">getArgs</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//对参数进行解密 解密后传入目标方法执行</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">arg</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (String) args[</span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">];</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">s</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> CryptUtil.</span><span style="color:#D2A8FF;">AESdecode</span><span style="color:#C9D1D9;">(arg);</span><span style="color:#8B949E;">//解密</span></span>
<span class="line"><span style="color:#C9D1D9;">        args[</span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">] </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> s;</span></span>
<span class="line"><span style="color:#C9D1D9;">        Object</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">proceed</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">ret</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">            proceed </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> pjp.</span><span style="color:#D2A8FF;">proceed</span><span style="color:#C9D1D9;">(args);</span><span style="color:#8B949E;">//目标方法调用</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">//目标方法执行后需要获取到返回值</span></span>
<span class="line"><span style="color:#C9D1D9;">            ret </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (String) proceed;</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">//对返回值加密后进行真正的返回</span></span>
<span class="line"><span style="color:#C9D1D9;">            ret </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> CryptUtil.</span><span style="color:#D2A8FF;">AESencode</span><span style="color:#C9D1D9;">(ret);</span></span>
<span class="line"><span style="color:#C9D1D9;">        } </span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;"> (Throwable </span><span style="color:#FFA657;">throwable</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            throwable.</span><span style="color:#D2A8FF;">printStackTrace</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> ret;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="_1-8xml配置aop" tabindex="-1">1.8xml配置AOP <a class="header-anchor" href="#_1-8xml配置aop" aria-hidden="true">#</a></h3><h4 id="定义切面类" tabindex="-1">定义切面类 <a class="header-anchor" href="#定义切面类" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">package</span><span style="color:#C9D1D9;"> com.dunxi.aspect;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.JoinPoint;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.ProceedingJoinPoint;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.Signature;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.annotation.</span><span style="color:#79C0FF;">*</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.reflect.MethodSignature;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.util.Arrays;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyAspect</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//          对service包下的所有类的所有方法进行增强</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Pointcut</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;execution(* com.dunxi.service..*.*(..))&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#8B949E;">//    @Pointcut(&quot;@annotation(com.dunxi.aspect.InvokeLog)&quot;)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">pt</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">//    @Before(&quot;pt()&quot;)//括号里面表示调用哪个切点表达式</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">methodbefore</span><span style="color:#C9D1D9;">(JoinPoint </span><span style="color:#FFA657;">joinPoint</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">Object</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">args</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> joinPoint.</span><span style="color:#D2A8FF;">getArgs</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//方法调用时传入的参数</span></span>
<span class="line"><span style="color:#C9D1D9;">        Object</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">target</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> joinPoint.</span><span style="color:#D2A8FF;">getTarget</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//被代理的对象</span></span>
<span class="line"><span style="color:#C9D1D9;">        MethodSignature</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">signature</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (MethodSignature) joinPoint.</span><span style="color:#D2A8FF;">getSignature</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//获取被增强方法签名封装的对象</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;方法被调用了。&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#8B949E;">//    @Before(&quot;pt()&quot;)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">before</span><span style="color:#C9D1D9;">(JoinPoint </span><span style="color:#FFA657;">joinPoint</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;before&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#8B949E;">//    @AfterReturning(value = &quot;pt()&quot;,returning = &quot;ret&quot;)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">afterReturning</span><span style="color:#C9D1D9;">(JoinPoint </span><span style="color:#FFA657;">joinPoint</span><span style="color:#C9D1D9;"> ,Object </span><span style="color:#FFA657;">ret</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;AfterReturning&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">ret);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#8B949E;">//    @After(&quot;pt()&quot;)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">after</span><span style="color:#C9D1D9;">(JoinPoint </span><span style="color:#FFA657;">joinPoint</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;after&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#8B949E;">//    @AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;e&quot;)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">afterThrowing</span><span style="color:#C9D1D9;">(JoinPoint </span><span style="color:#FFA657;">joinPoint</span><span style="color:#C9D1D9;"> ,Throwable </span><span style="color:#FFA657;">e</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;afterThrowing&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#8B949E;">//    @Around(&quot;pt()&quot;)</span></span>
<span class="line"><span style="color:#8B949E;">//    public void around(ProceedingJoinPoint pjp ){</span></span>
<span class="line"><span style="color:#8B949E;">//        System.out.println(&quot;目标方法前，前置通知&quot;);</span></span>
<span class="line"><span style="color:#8B949E;">//        try {</span></span>
<span class="line"><span style="color:#8B949E;">//            pjp.proceed();</span></span>
<span class="line"><span style="color:#8B949E;">//            System.out.println(&quot;目标方法后，后置通知&quot;);</span></span>
<span class="line"><span style="color:#8B949E;">//        } catch (Throwable throwable) {</span></span>
<span class="line"><span style="color:#8B949E;">//            throwable.printStackTrace();</span></span>
<span class="line"><span style="color:#8B949E;">//            System.out.println(&quot;目标方法出现异常后通知&quot;);</span></span>
<span class="line"><span style="color:#8B949E;">//        }finally {</span></span>
<span class="line"><span style="color:#8B949E;">//            System.out.println(&quot;不管怎样，就是要通知&quot;);</span></span>
<span class="line"><span style="color:#8B949E;">//        }</span></span>
<span class="line"><span style="color:#8B949E;">//    }</span></span>
<span class="line"><span style="color:#8B949E;">//环绕通知获取参数</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Object </span><span style="color:#D2A8FF;">around</span><span style="color:#C9D1D9;">(ProceedingJoinPoint </span><span style="color:#FFA657;">jpj</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">Object</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">args</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> jpj.</span><span style="color:#D2A8FF;">getArgs</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    Object</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">target</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> jpj.</span><span style="color:#D2A8FF;">getTarget</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    MethodSignature</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">signature</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (MethodSignature) jpj.</span><span style="color:#D2A8FF;">getSignature</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">ClassName</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> signature.</span><span style="color:#D2A8FF;">getDeclaringTypeName</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(Arrays.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(args)</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;==&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">ClassName</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;  &quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">target);</span></span>
<span class="line"><span style="color:#C9D1D9;">    Object</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">ret</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">        ret </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> jpj.</span><span style="color:#D2A8FF;">proceed</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//目标方法执行</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;返回值：&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">ret);</span></span>
<span class="line"><span style="color:#C9D1D9;">    } </span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;"> (Throwable </span><span style="color:#FFA657;">throwable</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        throwable.</span><span style="color:#D2A8FF;">printStackTrace</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;错误信息：&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">throwable);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> ret;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">package</span><span style="color:#C9D1D9;"> com.dunxi.aspect;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.JoinPoint;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.Signature;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.annotation.Aspect;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.annotation.Before;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.annotation.Pointcut;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.aspectj.lang.reflect.MethodSignature;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.stereotype.Component;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.lang.reflect.Array;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.util.Arrays;</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">PointLogAspect</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//对哪些方法进行增强</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Pointcut</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;execution(* com.dunxi.service..*.*(..))&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">pt</span><span style="color:#C9D1D9;">(){}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">//    怎么增强</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">printLog</span><span style="color:#C9D1D9;">(JoinPoint </span><span style="color:#FFA657;">joinPoint</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//输出被增强的方法的所在类名 方法名 调用时传入的参数</span></span>
<span class="line"><span style="color:#C9D1D9;">        MethodSignature</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">signature</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (MethodSignature) joinPoint.</span><span style="color:#D2A8FF;">getSignature</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//获取被增强方法的全类名</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">ClassName</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> signature.</span><span style="color:#D2A8FF;">getDeclaringTypeName</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//获取被增强方法的方法名</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> signature.</span><span style="color:#D2A8FF;">getName</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//获取被增强防范调用时传入的参数</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">Object</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">args</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> joinPoint.</span><span style="color:#D2A8FF;">getArgs</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(ClassName</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;===&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">name</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> Arrays.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(args));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;方法被调用了&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h4 id="_2目标类和切面类注入容器" tabindex="-1">②目标类和切面类注入容器 <a class="header-anchor" href="#_2目标类和切面类注入容器" aria-hidden="true">#</a></h4><p>在切面类和目标类上加上对应的注解。注入如果是使用注解的方式注入容器要记得开启组件扫描。</p><p>当然你也可以在xml中使用bean标签的方式注入容器。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyAspect</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//省略无关代码</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//省略无关代码</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_3配置aop" tabindex="-1">③配置AOP <a class="header-anchor" href="#_3配置aop" aria-hidden="true">#</a></h4><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;?</span><span style="color:#7EE787;">xml</span><span style="color:#79C0FF;"> version</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;1.0&quot;</span><span style="color:#79C0FF;"> encoding</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;">?&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">beans</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">xmlns</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:xsi</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:context</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/context&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xmlns:aop</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/aop&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">       </span><span style="color:#79C0FF;">xsi:schemaLocation</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--开启组件扫描--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">base-package</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">context:component-scan</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--配置AOP--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">aop:config</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--定义切点--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">aop:pointcut</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;pt1&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">expression</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;execution(* com.dunxi.service..*.*(..))&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">aop:pointcut</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">aop:pointcut</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;pt2&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">expression</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;@annotation(com.dunxi.aspect.InvokeLog)&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">aop:pointcut</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--配置切面--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">aop:aspect</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">ref</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;myAspect&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">&lt;!--&lt;aop:before method=&quot;before&quot; pointcut-ref=&quot;pt1&quot;&gt;&lt;/aop:before&gt;--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">&lt;!--&lt;aop:after method=&quot;after&quot; pointcut-ref=&quot;pt1&quot;&gt;&lt;/aop:after&gt;--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">&lt;!--&lt;aop:after-returning method=&quot;afterReturning&quot; pointcut-ref=&quot;pt1&quot; returning=&quot;ret&quot;&gt;&lt;/aop:after-returning&gt;--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">aop:after-throwing</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;afterThrowing&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">pointcut-ref</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;pt2&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">throwing</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;e&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">aop:after-throwing</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">aop:aspect</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">aop:config</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">beans</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="_1-9-多切面顺序问题" tabindex="-1">1.9 多切面顺序问题 <a class="header-anchor" href="#_1-9-多切面顺序问题" aria-hidden="true">#</a></h3><p>​ 在实际项目中我们可能会存在配置了多个切面的情况。这种情况下我们很可能需要控制切面的顺序。</p><p>​ 我们在默认情况下Spring有它自己的排序规则。（按照类名排序）</p><p>​ 默认排序规则往往不符合我们的要求，我们需要进行特殊控制。</p><p>​ 如果是注解方式配置的AOP可以再切面类上加**@Order注解<strong>来控制顺序。</strong>@Order中的属性越小优先级越高**。</p><p>​ 如果是XML方式配置的AOP，可以通过调整<strong>配置顺序</strong>来控制。</p><p>例如：</p><p>下面这种配置方式就会先使用CryptAspect里面的增强，再使用APrintLogAspect里的增强</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Aspect</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Order</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">APrintLogAspect</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//省略无关代码</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Aspect</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Order</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//这个值比较小，所以优先执行</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">CryptAspect</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//省略无关代码</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_1-10-aop原理-动态代理" tabindex="-1">1.10 AOP原理-动态代理 <a class="header-anchor" href="#_1-10-aop原理-动态代理" aria-hidden="true">#</a></h3><p>​ 实际上Spring的AOP其实底层就是使用动态代理来完成的。并且使用了两种动态代理分别是JDK的动态代理和Cglib动态代理。</p><p>​ 所以我们接下去来学习这两种动态代理，理解下他们的不同点。</p><h4 id="_1-10-1-jdk动态代理" tabindex="-1">1.10.1 JDK动态代理 <a class="header-anchor" href="#_1-10-1-jdk动态代理" aria-hidden="true">#</a></h4><p>​ JDK的动态代理使用的java.lang.reflect.Proxy这个类来进行实现的。要求被代理（被增强）的类需要实现了接口。并且JDK动态代理也只能对接口中的方法进行增强。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] args) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        AIControllerImpl</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">aiController</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">AIControllerImpl</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#8B949E;">//        String answer = aiController.getAnswer(&quot;三连了吗？&quot;);</span></span>
<span class="line"><span style="color:#8B949E;">//        System.out.println(answer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//使用动态代理增强getAnswer方法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//1.JDK动态代理</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//获取类加载器</span></span>
<span class="line"><span style="color:#C9D1D9;">        ClassLoader</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">classLoader</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> Demo.class.</span><span style="color:#D2A8FF;">getClassLoader</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//被代理类所实现接口的字节码对象数组</span></span>
<span class="line"><span style="color:#C9D1D9;">        Class</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">?</span><span style="color:#FFA657;">&gt;[] </span><span style="color:#C9D1D9;">interfaces</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> AIControllerImpl.class.</span><span style="color:#D2A8FF;">getInterfaces</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        AIController</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">proxy</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (AIController) Proxy.</span><span style="color:#D2A8FF;">newProxyInstance</span><span style="color:#C9D1D9;">(classLoader, interfaces, </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">InvocationHandler</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">//使用代理对象的方法时 会调用到invoke</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Object </span><span style="color:#D2A8FF;">invoke</span><span style="color:#C9D1D9;">(Object </span><span style="color:#FFA657;">proxy</span><span style="color:#C9D1D9;">, Method </span><span style="color:#FFA657;">method</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">Object</span><span style="color:#C9D1D9;">[] </span><span style="color:#FFA657;">args</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> Throwable {</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">//proxy是代理对象</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">//method是当前被调用的方法封装的Method对象</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">//args是调用方法时传入的参数</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">//调用被代理对象的对应方法</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">//判断 当前调用的是否是getAnswer方法</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;">(method.</span><span style="color:#D2A8FF;">getName</span><span style="color:#C9D1D9;">().</span><span style="color:#D2A8FF;">equals</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;getAnswer&quot;</span><span style="color:#C9D1D9;">)){</span></span>
<span class="line"><span style="color:#C9D1D9;">                    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;增强&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">                }</span></span>
<span class="line"><span style="color:#C9D1D9;">                Object</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">ret</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> method.</span><span style="color:#D2A8FF;">invoke</span><span style="color:#C9D1D9;">(aiController,args);</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> ret;</span></span>
<span class="line"><span style="color:#C9D1D9;">            }</span></span>
<span class="line"><span style="color:#C9D1D9;">        });</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">answer</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> proxy.</span><span style="color:#D2A8FF;">getAnswer</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;三连了吗？&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(answer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">s</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> proxy.</span><span style="color:#D2A8FF;">fortuneTelling</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;张三&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(s);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h4 id="_1-10-2-cglib动态代理" tabindex="-1">1.10.2 Cglib动态代理 <a class="header-anchor" href="#_1-10-2-cglib动态代理" aria-hidden="true">#</a></h4><p>​ 使用的是org.springframework.cglib.proxy.Enhancer类进行实现的。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">CglibDemo</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] </span><span style="color:#FFA657;">args</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        Enhancer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">enhancer</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">Enhancer</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//设置父类的字节码对象</span></span>
<span class="line"><span style="color:#C9D1D9;">        enhancer.</span><span style="color:#D2A8FF;">setSuperclass</span><span style="color:#C9D1D9;">(AIControllerImpl.class);</span></span>
<span class="line"><span style="color:#C9D1D9;">        enhancer.</span><span style="color:#D2A8FF;">setCallback</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">MethodInterceptor</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">//使用代理对象执行方法时都会调用到intercept方法</span></span>
<span class="line"><span style="color:#C9D1D9;">            @</span><span style="color:#FF7B72;">Override</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Object </span><span style="color:#D2A8FF;">intercept</span><span style="color:#C9D1D9;">(Object </span><span style="color:#FFA657;">o</span><span style="color:#C9D1D9;">, Method </span><span style="color:#FFA657;">method</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">Object</span><span style="color:#C9D1D9;">[] </span><span style="color:#FFA657;">objects</span><span style="color:#C9D1D9;">, MethodProxy </span><span style="color:#FFA657;">methodProxy</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> Throwable {</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">//判断当前调用的方法是不是getAnswer方法</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;">(method.</span><span style="color:#D2A8FF;">getName</span><span style="color:#C9D1D9;">().</span><span style="color:#D2A8FF;">equals</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;getAnswer&quot;</span><span style="color:#C9D1D9;">)){</span></span>
<span class="line"><span style="color:#C9D1D9;">                    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;增强&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">                }</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">//调用父类中对应的方法</span></span>
<span class="line"><span style="color:#C9D1D9;">                Object</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">ret</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> methodProxy.</span><span style="color:#D2A8FF;">invokeSuper</span><span style="color:#C9D1D9;">(o, objects);</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> ret;</span></span>
<span class="line"><span style="color:#C9D1D9;">            }</span></span>
<span class="line"><span style="color:#C9D1D9;">        });</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//生成代理对象</span></span>
<span class="line"><span style="color:#C9D1D9;">        AIController</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">proxy</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (AIController) enhancer.</span><span style="color:#D2A8FF;">create</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#8B949E;">//        System.out.println(proxy.getAnswer(&quot;你好吗？&quot;));</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(proxy.</span><span style="color:#D2A8FF;">fortuneTelling</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;nihaohnai&quot;</span><span style="color:#C9D1D9;">));</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h4 id="_1-10-3-总结" tabindex="-1">1.10.3 总结 <a class="header-anchor" href="#_1-10-3-总结" aria-hidden="true">#</a></h4><p>​ JDK动态代理要求被代理（被增强）的类案必须要实现接口，生成的代理对象相当于是被代理对象的兄弟。</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/2023/01/08/20230108223938.png" alt="image-20220517154413061"></p><p>Cglib的动态代理不要求被代理（被增强）的类要实现接口，生成的代理对象相当于被代理对象的子类对象。</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/2023/01/08/20230108223952.png" alt="image-20220517154503628"></p><p>​ <strong>Spring的AOP默认情况下有限使用的是JDK的动态代理，如果使用不了JDK的动态代理才会使用Cglib的动态代理。</strong></p><h3 id="_1-11-切换默认动态代理方式" tabindex="-1">1.11 切换默认动态代理方式 <a class="header-anchor" href="#_1-11-切换默认动态代理方式" aria-hidden="true">#</a></h3><p>​ 有的时候我们需要修改AOP的代理方式。</p><p>​ 我们可以使用以下方式修改：</p><p>如果我们是采用注解方式配置AOP的话：</p><p>设置aop:aspectj-autoproxy标签的proxy-target-class属性为true，代理方式就会修改成Cglib</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">aop:aspectj-autoproxy</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">proxy-target-class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;true&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">aop:aspectj-autoproxy</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果我们是采用xml方式配置的话：</p><p>设置aop:config标签的proxy-target-class属性为true，代理方式就会修改成Cglib</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">aop:config</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">proxy-target-class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;true&quot;</span><span style="color:#C9D1D9;">&gt;    &lt;/</span><span style="color:#7EE787;">aop:config</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="spring-04" tabindex="-1">Spring-04 <a class="header-anchor" href="#spring-04" aria-hidden="true">#</a></h2><h3 id="_1-spring整合junit" tabindex="-1">1.Spring整合Junit <a class="header-anchor" href="#_1-spring整合junit" aria-hidden="true">#</a></h3><h4 id="导入依赖-4" tabindex="-1">导入依赖 <a class="header-anchor" href="#导入依赖-4" aria-hidden="true">#</a></h4><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!-- junit --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;junit&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;junit&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;4.12&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!-- spring整合junit的依赖 --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-test&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;5.1.9.RELEASE&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_2编写测试类" tabindex="-1">②编写测试类 <a class="header-anchor" href="#_2编写测试类" aria-hidden="true">#</a></h3><p>在测试类上加上</p><p>**@RunWith(SpringJUnit4ClassRunner.class)**注解，指定让测试运行于Spring环境</p><p><strong>@ContextConfiguration注解</strong>，指定Spring容器创建需要的配置文件或者配置类</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RunWith</span><span style="color:#C9D1D9;">(SpringJUnit4ClassRunner.class)</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ContextConfiguration</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">locations</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;classpath:applicationContext.xml&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">SpringTest</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3注入对象进行测试" tabindex="-1">③注入对象进行测试 <a class="header-anchor" href="#_3注入对象进行测试" aria-hidden="true">#</a></h3><p>​ 在测试类中注入要测试的对象，定义测试方法，在其中使用要测试的对象。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">package</span><span style="color:#C9D1D9;"> com.dunxi;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> com.dunxi.service.UserService;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.junit.Test;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.junit.runner.RunWith;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.test.context.ContextConfiguration;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RunWith</span><span style="color:#C9D1D9;">(SpringJUnit4ClassRunner.class)</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ContextConfiguration</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">locations</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;classpath:applicationContext.xml&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">SpringTest</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">// 想测哪个对象，就注入哪个对象</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> UserService</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userService;、</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//定义测试方法</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Test</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">testJunit</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        userService.</span><span style="color:#D2A8FF;">findById</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="_2-spring整合mybatis" tabindex="-1">2.Spring整合Mybatis <a class="header-anchor" href="#_2-spring整合mybatis" aria-hidden="true">#</a></h2><p>​ 我们如果想把Mybatis整合到Spring中需要使用一个整合包mybatis-spring</p><p>​ 官方文档：<a href="http://mybatis.org/spring/zh/index.html" target="_blank" rel="noreferrer">http://mybatis.org/spring/zh/index.html</a></p><h3 id="导入依赖-5" tabindex="-1">导入依赖 <a class="header-anchor" href="#导入依赖-5" aria-hidden="true">#</a></h3><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!-- spring-jdbc --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-jdbc&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;5.1.9.RELEASE&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!-- mybatis整合到Spring的整合包 --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.mybatis&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;mybatis-spring&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;2.0.4&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">&lt;!--mybatis依赖--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.mybatis&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;mybatis&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;3.5.4&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!--mysql驱动--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;mysql&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;mysql-connector-java&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;5.1.47&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">&lt;!-- druid数据源 --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;com.alibaba&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;druid&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;1.1.16&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="_2往容器中注入整合相关对象" tabindex="-1">②往容器中注入整合相关对象 <a class="header-anchor" href="#_2往容器中注入整合相关对象" aria-hidden="true">#</a></h3><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!--读取properties文件--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">context:property-placeholder</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">location</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;classpath:jdbc.properties&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">context:property-placeholder</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!--创建连接池注入容器--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dataSource&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;url&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.url}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;username&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.username}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;password&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.password}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;driverClassName&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${jdbc.driver}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;sessionFactoryBean&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dataSource&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">ref</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dataSource&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--配置Mybatis配置文件的路径--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;configLocation&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;classpath:mybatis-config.xml&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">&lt;!--mapper扫描配置，扫描到的mapper对象会注入到Spring容器中--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;mapperScannerConfigurer&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;basePackage&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.dao&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>Mybatis配置文件mybatis-config.xml如下：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;?</span><span style="color:#7EE787;">xml</span><span style="color:#79C0FF;"> version</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;1.0&quot;</span><span style="color:#79C0FF;"> encoding</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;"> ?&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;!</span><span style="color:#FF7B72;">DOCTYPE</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">configuration</span></span>
<span class="line"><span style="color:#C9D1D9;">        PUBLIC &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">configuration</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">configuration</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3从容器中获取mapper对象进行使用" tabindex="-1">③从容器中获取mapper对象进行使用 <a class="header-anchor" href="#_3从容器中获取mapper对象进行使用" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> UserDao</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Test</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">testUserDao</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">    List</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">User</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">all</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> userDao.</span><span style="color:#D2A8FF;">findAll</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(all);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_3-spring声明式事务" tabindex="-1">3.Spring声明式事务 <a class="header-anchor" href="#_3-spring声明式事务" aria-hidden="true">#</a></h2><h3 id="_3-1-事务回顾" tabindex="-1">3.1 事务回顾 <a class="header-anchor" href="#_3-1-事务回顾" aria-hidden="true">#</a></h3><h4 id="_3-1-1-事务的概念" tabindex="-1">3.1.1 事务的概念 <a class="header-anchor" href="#_3-1-1-事务的概念" aria-hidden="true">#</a></h4><p>​ 保证一组数据库的操作，要么同时成功，要么同时失败</p><h4 id="_3-1-2-四大特性" tabindex="-1">3.1.2 四大特性 <a class="header-anchor" href="#_3-1-2-四大特性" aria-hidden="true">#</a></h4><ul><li><p>隔离性</p><p>多个事务之间要相互隔离，不能相互干扰</p></li><li><p>原子性</p><p>指事务是一个不可分割的整体，类似一个不可分割的原子</p></li><li><p>一致性</p><p>保障事务前后这组数据的状态是一致的。要么都是成功的，要么都是失败的。</p></li><li><p>持久性</p><p>指事务一旦被提交，这组操作修改的数据就真的发生变化了。即使接下来数据库故障也不应该对其有影响。</p></li></ul><h3 id="_3-2-实现声明式事务" tabindex="-1">3.2 实现声明式事务 <a class="header-anchor" href="#_3-2-实现声明式事务" aria-hidden="true">#</a></h3><p>​ 如果我们自己去对事务进行控制的话我们就需要在原来核心代码的基础上加上事务控制相关的代码。而在我们的实际开发中这种控制的操作也是非常常见的。所以Spring提供了声明式事务的方式让我们去控制事务。</p><p>​ 只要简单的加个注解（或者是xml配置）就可以实现事务控制，不需要事务控制的时候只需要去掉相应的注解即可。</p><h4 id="_3-2-0-案例环境准备" tabindex="-1">3.2.0 案例环境准备 <a class="header-anchor" href="#_3-2-0-案例环境准备" aria-hidden="true">#</a></h4><p>数据初始化</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">CREATE</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">DATABASE</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">/*!32312 IF NOT EXISTS*/</span><span style="color:#A5D6FF;">\`spring_db\`</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">/*!40100 DEFAULT CHARACTER SET utf8 */</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#FF7B72;">USE</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">\`spring_db\`</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#FF7B72;">DROP</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">TABLE</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">IF</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">EXISTS</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">\`account\`</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#FF7B72;">CREATE</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">TABLE</span><span style="color:#C9D1D9;"> \`</span><span style="color:#D2A8FF;">account</span><span style="color:#C9D1D9;">\` (</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#A5D6FF;">\`id\`</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">INT</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">11</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">NOT NULL</span><span style="color:#C9D1D9;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#A5D6FF;">\`name\`</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">VARCHAR</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">50</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">DEFAULT</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">NULL</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#A5D6FF;">\`money\`</span><span style="color:#C9D1D9;"> DOUBLE </span><span style="color:#FF7B72;">DEFAULT</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">NULL</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">PRIMARY KEY</span><span style="color:#C9D1D9;"> (</span><span style="color:#A5D6FF;">\`id\`</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">) ENGINE</span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">INNODB AUTO_INCREMENT</span><span style="color:#FF7B72;">=</span><span style="color:#79C0FF;">3</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">DEFAULT</span><span style="color:#C9D1D9;"> CHARSET</span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">utf8;</span></span>
<span class="line"><span style="color:#FF7B72;">INSERT  INTO</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">\`account\`</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">\`id\`</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">\`name\`</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">\`money\`</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">VALUES</span><span style="color:#C9D1D9;"> (</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;三更&#39;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">100</span><span style="color:#C9D1D9;">),(</span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;草堂&#39;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">100</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>②Spring整合Mybatis</p><p>③创建Service和Dao</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">AccountService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#8B949E;">    /**</span></span>
<span class="line"><span style="color:#8B949E;">     * 转账</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">outUserId</span><span style="color:#8B949E;"> 转出账户ID</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">inUserId</span><span style="color:#8B949E;"> 转入账户ID</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">money</span><span style="color:#8B949E;"> 钱数</span></span>
<span class="line"><span style="color:#8B949E;">     */</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">transfer</span><span style="color:#C9D1D9;">(Integer </span><span style="color:#FFA657;">outUserId</span><span style="color:#C9D1D9;">, Integer </span><span style="color:#FFA657;">inUserId</span><span style="color:#C9D1D9;">, Double </span><span style="color:#FFA657;">money</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">AccountServiceImpl</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">AccountService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> AccountDao</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">accountDao;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">transfer</span><span style="color:#C9D1D9;">(Integer </span><span style="color:#FFA657;">outUserId</span><span style="color:#C9D1D9;">, Integer </span><span style="color:#FFA657;">inUserId</span><span style="color:#C9D1D9;">, Double </span><span style="color:#FFA657;">money</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//增加</span></span>
<span class="line"><span style="color:#C9D1D9;">        accountDao.</span><span style="color:#D2A8FF;">updateMoney</span><span style="color:#C9D1D9;">(inUserId,money);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//减少</span></span>
<span class="line"><span style="color:#C9D1D9;">        accountDao.</span><span style="color:#D2A8FF;">updateMoney</span><span style="color:#C9D1D9;">(outUserId,</span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;">money);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">AccountDao</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">updateMoney</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">Param</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;">) Integer </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;"> , @</span><span style="color:#FF7B72;">Param</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;updateMoney&quot;</span><span style="color:#C9D1D9;">) Double </span><span style="color:#FFA657;">money</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>AccoutDao.xml如下：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;?</span><span style="color:#7EE787;">xml</span><span style="color:#79C0FF;"> version</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;1.0&quot;</span><span style="color:#79C0FF;"> encoding</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;"> ?&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;!</span><span style="color:#FF7B72;">DOCTYPE</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">mapper</span><span style="color:#C9D1D9;"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">mapper</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">namespace</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.dao.AccountDao&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">update</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;updateMoney&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        update account set money = money + #{updateMoney} where id = #{id}</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">update</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">mapper</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_3-2-1-注解实现" tabindex="-1">3.2.1 注解实现 <a class="header-anchor" href="#_3-2-1-注解实现" aria-hidden="true">#</a></h4><h5 id="配置事务管理器和事务注解驱动" tabindex="-1">配置事务管理器和事务注解驱动 <a class="header-anchor" href="#配置事务管理器和事务注解驱动" aria-hidden="true">#</a></h5><p>在spring的配置文件中添加如下配置：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--把事务管理器注入Spring容器，需要配置一个连接池--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;txManager&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dataSource&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">ref</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dataSource&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">&lt;!--开启事务注解驱动，配置使用的事务管理器--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">tx:annotation-driven</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">transaction-manager</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;txManager&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="_2添加注解" tabindex="-1">②添加注解 <a class="header-anchor" href="#_2添加注解" aria-hidden="true">#</a></h5><p>在需要进行事务控制的方法或者类上添加@Transaction注解就可以实现事务控制。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Transactional</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">transfer</span><span style="color:#C9D1D9;">(Integer outId, Integer inId, Double money) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//增加</span></span>
<span class="line"><span style="color:#C9D1D9;">        accoutDao.</span><span style="color:#D2A8FF;">updateMoney</span><span style="color:#C9D1D9;">(inId,money);</span></span>
<span class="line"><span style="color:#8B949E;">//        System.out.println(1/0);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//减少</span></span>
<span class="line"><span style="color:#C9D1D9;">        accoutDao.</span><span style="color:#D2A8FF;">updateMoney</span><span style="color:#C9D1D9;">(outId,</span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;">money);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>注意：如果加在类上，这个类的所有方法都会受事务控制，如果加在方法上，就是那一个方法受事务控制。</strong></p><p>注意，因为声明式事务底层是通过AOP实现的，所以最好把AOP相关依赖都加上。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">       &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.aspectj&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;aspectjweaver&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;1.9.6&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_3-2-2-xml方式实现" tabindex="-1">3.2.2 xml方式实现 <a class="header-anchor" href="#_3-2-2-xml方式实现" aria-hidden="true">#</a></h4><h5 id="配置事务管理器" tabindex="-1">配置事务管理器 <a class="header-anchor" href="#配置事务管理器" aria-hidden="true">#</a></h5><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;txManager&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">property</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dataSource&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">ref</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;dataSource&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">bean</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_2配置事务切面" tabindex="-1">②配置事务切面 <a class="header-anchor" href="#_2配置事务切面" aria-hidden="true">#</a></h5><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">&lt;!--定义事务管理的通知类--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">tx:advice</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">transaction-manager</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;txManager&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;txAdvice&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">tx:attributes</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">tx:method</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">name</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;trans*&quot;</span><span style="color:#C9D1D9;">/&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">tx:attributes</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">tx:advice</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">aop:config</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">aop:pointcut</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;pt&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">expression</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;execution(* com.sangeng.service..*.*(..))&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">aop:pointcut</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">aop:advisor</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">advice-ref</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;txAdvice&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">pointcut-ref</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;pt&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">aop:advisor</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">aop:config</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>注意，因为声明式事务底层是通过AOP实现的，所以最好把AOP相关依赖都加上。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">   &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.aspectj&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;aspectjweaver&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;1.9.6&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-3-属性配置" tabindex="-1">3.3 属性配置 <a class="header-anchor" href="#_3-3-属性配置" aria-hidden="true">#</a></h3><h4 id="_3-3-1-事务传播行为propagation" tabindex="-1">3.3.1 事务传播行为propagation <a class="header-anchor" href="#_3-3-1-事务传播行为propagation" aria-hidden="true">#</a></h4><p>​ 当事务方法嵌套调用时，需要控制是否开启新事务传播行为来控制。</p><p>测试案例：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestServiceImpl</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    AccountService</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">accountService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Transactional</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">test</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        accountService.</span><span style="color:#D2A8FF;">transfer</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">10D</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        accountService.</span><span style="color:#D2A8FF;">log</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">AccountServiceImpl</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">AccountService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> AccountDao</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">accountDao;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Transactional</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">transfer</span><span style="color:#C9D1D9;">(Integer </span><span style="color:#FFA657;">outUserId</span><span style="color:#C9D1D9;">, Integer </span><span style="color:#FFA657;">inUserId</span><span style="color:#C9D1D9;">, Double </span><span style="color:#FFA657;">money</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//增加</span></span>
<span class="line"><span style="color:#C9D1D9;">        accountDao.</span><span style="color:#D2A8FF;">updateMoney</span><span style="color:#C9D1D9;">(inUserId,money);</span></span>
<span class="line"><span style="color:#8B949E;">//        System.out.println(1/0);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//减少</span></span>
<span class="line"><span style="color:#C9D1D9;">        accountDao.</span><span style="color:#D2A8FF;">updateMoney</span><span style="color:#C9D1D9;">(outUserId,</span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;">money);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Transactional</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">log</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;打印日志&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#8B949E;">//        int i = 1/0;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><table><thead><tr><th>属性值</th><th>行为</th></tr></thead><tbody><tr><td>REQUIRED（必须要有）</td><td>外层方法有事务，内层方法就加入。外层没有，内层就新建</td></tr><tr><td>REQUIRES_NEW（必须要有新事务）</td><td>外层方法有事务，内层方法新建。外层没有，内层也新建</td></tr><tr><td>SUPPORTS(支持有)</td><td>外层方法有事务，内层方法就加入。外层没有，内层就也没有</td></tr><tr><td>NOT_SUPPORTED(支持没有)</td><td>外层方法有事务，内层方法没有。外层没有，内层也没有</td></tr><tr><td>MANDATORY(强制要求外层有)</td><td>外层方法有事务，内层方法加入。外层没有，内层就报错</td></tr><tr><td>NEVER（绝不允许有）</td><td>外层方法有事务，内层方法就报错。外层没有，内层也就没有</td></tr></tbody></table><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Transactional</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">propagation</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> Propagation.REQUIRES_NEW)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">transfer</span><span style="color:#C9D1D9;">(Integer outUserId, Integer inUserId, Double money) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//增加</span></span>
<span class="line"><span style="color:#C9D1D9;">        accountDao.</span><span style="color:#D2A8FF;">updateMoney</span><span style="color:#C9D1D9;">(inUserId,money);</span></span>
<span class="line"><span style="color:#8B949E;">//        System.out.println(1/0);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//减少</span></span>
<span class="line"><span style="color:#C9D1D9;">        accountDao.</span><span style="color:#D2A8FF;">updateMoney</span><span style="color:#C9D1D9;">(outUserId,</span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;">money);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_3-3-2-隔离级别isolation" tabindex="-1">3.3.2 隔离级别isolation <a class="header-anchor" href="#_3-3-2-隔离级别isolation" aria-hidden="true">#</a></h4><p>Isolation.DEFAULT 使用数据库默认隔离级别</p><p>Isolation.READ_UNCOMMITTED</p><p>Isolation.READ_COMMITTED</p><p>Isolation.REPEATABLE_READ</p><p>Isolation.SERIALIZABLE</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Transactional</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">propagation</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> Propagation.REQUIRES_NEW ,</span><span style="color:#79C0FF;">isolation</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> Isolation.READ_COMMITTED)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">transfer</span><span style="color:#C9D1D9;">(Integer outUserId, Integer inUserId, Double money) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//增加</span></span>
<span class="line"><span style="color:#C9D1D9;">        accountDao.</span><span style="color:#D2A8FF;">updateMoney</span><span style="color:#C9D1D9;">(inUserId,money);</span></span>
<span class="line"><span style="color:#8B949E;">//        System.out.println(1/0);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//减少</span></span>
<span class="line"><span style="color:#C9D1D9;">        accountDao.</span><span style="color:#D2A8FF;">updateMoney</span><span style="color:#C9D1D9;">(outUserId,</span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;">money);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_3-3-3-只读readonly" tabindex="-1">3.3.3 只读readOnly <a class="header-anchor" href="#_3-3-3-只读readonly" aria-hidden="true">#</a></h4><p>​ 如果事务中的操作都是读操作，没涉及到对数据的写操作可以设置readOnly为true。这样可以提高效率。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Transactional</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">readOnly</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">log</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">    System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;打印日志&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">i</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span><span style="color:#FF7B72;">/</span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,393),e=[o];function r(t,c,D,y,i,F){return a(),n("div",null,e)}const b=s(p,[["render",r]]);export{u as __pageData,b as default};
