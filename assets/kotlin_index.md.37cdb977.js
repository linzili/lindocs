import{_ as s,c as n,o as a,a as l}from"./app.10d45b38.js";const b=JSON.parse('{"title":"Kotlin基础概念","description":"","frontmatter":{},"headers":[{"level":2,"title":"程序入口点","slug":"程序入口点","link":"#程序入口点","children":[]},{"level":2,"title":"类型","slug":"类型","link":"#类型","children":[{"level":3,"title":"基本类型","slug":"基本类型","link":"#基本类型","children":[]}]},{"level":2,"title":"流程控制","slug":"流程控制","link":"#流程控制","children":[{"level":3,"title":"if表达式","slug":"if表达式","link":"#if表达式","children":[]},{"level":3,"title":"When 表达式","slug":"when-表达式","link":"#when-表达式","children":[]}]},{"level":2,"title":"包与导入","slug":"包与导入","link":"#包与导入","children":[]},{"level":2,"title":"类与对象","slug":"类与对象","link":"#类与对象","children":[{"level":3,"title":"委托","slug":"委托","link":"#委托","children":[]},{"level":3,"title":"伴生对象","slug":"伴生对象","link":"#伴生对象","children":[]}]},{"level":2,"title":"函数","slug":"函数","link":"#函数","children":[{"level":3,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]}]},{"level":2,"title":"Spring","slug":"spring","link":"#spring","children":[{"level":3,"title":"自动注入","slug":"自动注入","link":"#自动注入","children":[]}]}],"relativePath":"kotlin/index.md","lastUpdated":1675921549000}'),p={name:"kotlin/index.md"},e=l(`<h1 id="kotlin基础概念" tabindex="-1">Kotlin基础概念 <a class="header-anchor" href="#kotlin基础概念" aria-hidden="true">#</a></h1><h2 id="程序入口点" tabindex="-1">程序入口点 <a class="header-anchor" href="#程序入口点" aria-hidden="true">#</a></h2><p>Kotlin 应用程序的入口点是 <code>main</code> 函数</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Hello world!&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>main</code> 的另一种形式接收可变数量的 <code>String</code> 参数</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">(args</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Array</span><span style="color:#FF7B72;">&lt;</span><span style="color:#79C0FF;">String</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(args.contentToString())</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="类型" tabindex="-1">类型 <a class="header-anchor" href="#类型" aria-hidden="true">#</a></h2><h3 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-hidden="true">#</a></h3><blockquote><p>在 Kotlin 中，所有东西都是对象，在这个意义上讲可以在任何变量上调用成员函数与属性。一些类型可以有特殊的内部表示——例如，数字、字符以及布尔可以在运行时表示为原生类型值，但是对于用户来说，它们看起来就像普通的类。</p></blockquote><h4 id="数字" tabindex="-1">数字 <a class="header-anchor" href="#数字" aria-hidden="true">#</a></h4><h4 id="整数类型" tabindex="-1">整数类型 <a class="header-anchor" href="#整数类型" aria-hidden="true">#</a></h4><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当初始化一个没有显式指定类型的变量时，编译器会自动推断为足以表示该值的最小类型。 如果不超过 Int 的表示范围，那么类型是 Int 。 如果超过了， 那么类型是 Long 。 如需显 式指定 Long 值，请给该值追加后缀 L 。 显式指定类型会触发编译器检测该值是否超出指 定类型的表示范围。</p></div><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> one </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">// Int</span></span>
<span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> threeBillion </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">3000000000</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">// Long</span></span>
<span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> oneLong </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1L</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">// Long</span></span>
<span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> oneByte</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Byte</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="浮点类型" tabindex="-1">浮点类型 <a class="header-anchor" href="#浮点类型" aria-hidden="true">#</a></h4><blockquote><p>对于实数，Kotlin 提供了浮点类型 Float 与 Double 类型，遵循 IEEE 754 标准。 Float 表达 IEEE 754 单精度，而 Double 表达双精度。 可以使用带小数部分的数字初始化 Double 与 Float 变量。 小数部分与整数部分之间用句点（ . ）分隔 对于以小数初始化的变量，编译器会推断为 Double 类型：</p></blockquote><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> pi </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">3.14</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">// Double</span></span>
<span class="line"><span style="color:#8B949E;">// val one: Double = 1 // 错误：类型不匹配</span></span>
<span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> oneDouble </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1.0</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">// Double</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> pi </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">3.14</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">// Double</span></span>
<span class="line"><span style="color:#8B949E;">// val one: Double = 1 // 错误：类型不匹配</span></span>
<span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> oneDouble </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1.0</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">// Double</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如需将一个值显式指定为 <code>Float</code> 类型，请添加 f 或 F 后缀。 如果这样的值包含多于 6～7 位十进制数，那么会将其舍入：</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> e </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">2.7182818284</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">// Double</span></span>
<span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> eFloat </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">2.7182818284f</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">// Float，实际值为 2.7182817</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>与一些其他语言不同，Kotlin 中的数字没有隐式拓宽转换。 例如，具有 Double 参数的函数 只能对 <code>Double</code> 值调用，而不能对 <code>Float</code> 、 <code>Int</code> 或者其他数字值调用：</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">printDouble</span><span style="color:#C9D1D9;">(d</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Double</span><span style="color:#C9D1D9;">) { </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(d) }</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> i </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> d </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1.0</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> f </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1.0f</span></span>
<span class="line"><span style="color:#C9D1D9;">    printDouble(d)</span></span>
<span class="line"><span style="color:#8B949E;">// printDouble(i) // 错误：类型不匹配</span></span>
<span class="line"><span style="color:#8B949E;">// printDouble(f) // 错误：类型不匹配</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="字符串" tabindex="-1">字符串 <a class="header-anchor" href="#字符串" aria-hidden="true">#</a></h4><blockquote><p>字符串字面值可以包含模板表达式——一些小段代码，会求值并把结果合并到字符串中。 模板表达式以美元符（ $ ）开头，要么由一个的名称构成:</p></blockquote><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#8B949E;">//sampleStart</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> i </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">10</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;i = $i&quot;</span><span style="color:#C9D1D9;">) </span><span style="color:#8B949E;">// 输出“i = 10”</span></span>
<span class="line"><span style="color:#8B949E;">//sampleEnd</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>要么是用花括号括起来的表达式:</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#8B949E;">//sampleStart</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> s </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;abc&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;$s.length is </span><span style="color:#79C0FF;">\${s.length}</span><span style="color:#A5D6FF;">&quot;</span><span style="color:#C9D1D9;">) </span><span style="color:#8B949E;">// 输出 &quot;abc.length is 3&quot;</span></span>
<span class="line"><span style="color:#8B949E;">//sampleEnd</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="流程控制" tabindex="-1">流程控制 <a class="header-anchor" href="#流程控制" aria-hidden="true">#</a></h2><h3 id="if表达式" tabindex="-1">if表达式 <a class="header-anchor" href="#if表达式" aria-hidden="true">#</a></h3><p>在 Kotlin 中， <code>if</code> 是一个表达式：它会返回一个值。 因此就不需要三元运算符<code>（ 条件 ? 然后: 否则 ）</code>，因为普通的 <code>if</code> 就能胜任这个角色。</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">var</span><span style="color:#C9D1D9;"> max </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> a</span></span>
<span class="line"><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (a </span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;"> b) max </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> b</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">// With else</span></span>
<span class="line"><span style="color:#FF7B72;">var</span><span style="color:#C9D1D9;"> max</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Int</span></span>
<span class="line"><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (a </span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> b) {</span></span>
<span class="line"><span style="color:#C9D1D9;">  max </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> a</span></span>
<span class="line"><span style="color:#C9D1D9;">} </span><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  max </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> b</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">// 作为表达式</span></span>
<span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> max </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (a </span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> b) a </span><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;"> b</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>if</code> 表达式的分支可以是代码块，这种情况最后的表达式作为该块的值：</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> max </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (a </span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> b) {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Choose a&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">  a</span></span>
<span class="line"><span style="color:#C9D1D9;">} </span><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Choose b&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">  b</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="when-表达式" tabindex="-1">When 表达式 <a class="header-anchor" href="#when-表达式" aria-hidden="true">#</a></h3><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">when</span><span style="color:#C9D1D9;"> (x) {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">-&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;x == 1&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">-&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;x == 2&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">-&gt;</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;x is neither 1 nor 2&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">  }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><code>when</code>将它的参数与所有的分支条件顺序比较，直到某个分支满足条件。</p><p><code>when</code> 既可以作为表达式使用也可以作为语句使用。如果它被当做表达式， 第一个符合条件 的分支的值就是整个表达式的值，如果当做语句使用， 则忽略个别分支的值。 类似于 <code>if</code> ， 每一个分支可以是一个代码块，它的值是块中最后的表达式的值。</p><p>如果其他分支都不满足条件将会求值 <code>else</code> 分支。 如果 <code>when</code> 作为一个表达式使用，那么必 须有 <code>else</code> 分支， 除非编译器能够检测出所有的可能情况都已经覆盖了， 例如，对于 <code>枚举（ enum ）类</code>条目与<code>密封（ sealed ）类</code>子类型］。</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">enum</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Bit</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FFA657;">ZERO</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">ONE</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> numericValue </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">when</span><span style="color:#C9D1D9;"> (getRandomBit()) {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FFA657;">Bit</span><span style="color:#C9D1D9;">.</span><span style="color:#FFA657;">ZERO</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">-&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FFA657;">Bit</span><span style="color:#C9D1D9;">.</span><span style="color:#FFA657;">ONE</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">-&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// &#39;else&#39; is not required because all cases are covered</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="包与导入" tabindex="-1">包与导入 <a class="header-anchor" href="#包与导入" aria-hidden="true">#</a></h2><h2 id="类与对象" tabindex="-1">类与对象 <a class="header-anchor" href="#类与对象" aria-hidden="true">#</a></h2><h3 id="委托" tabindex="-1">委托 <a class="header-anchor" href="#委托" aria-hidden="true">#</a></h3><blockquote><p>委托模式（delegation pattern）是软件设计模式中的一项基本技巧。在委托模式中，有两个对象参与处理同一个请求，接受请求的对象将请求委托给另一个对象来处理。委托模式是一项基本技巧，许多其他的模式，如状态模式、策略模式、访问者模式本质上是在更特殊的场合采用了委托模式。委托模式使得我们可以用聚合来替代继承，它还使我们可以模拟mixin。</p></blockquote><p><code>Derived</code> 类可以通过将其所有公有成员都委托给指定对象来实现一个接口 Base ：</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Base</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">print</span><span style="color:#C9D1D9;">()</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">BaseImpl</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> x</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Int</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Base</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">override</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">print</span><span style="color:#C9D1D9;">() { </span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">(x) }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Derived</span><span style="color:#C9D1D9;">(b</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Base</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">Base</span><span style="color:#C9D1D9;"> by b</span></span>
<span class="line"><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> b </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">BaseImpl</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">10</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FFA657;">Derived</span><span style="color:#C9D1D9;">(b).</span><span style="color:#79C0FF;">print</span><span style="color:#C9D1D9;">()</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>Derived</code> 的超类型列表中的 by 子句</p><h3 id="伴生对象" tabindex="-1">伴生对象 <a class="header-anchor" href="#伴生对象" aria-hidden="true">#</a></h3><blockquote><p>kotlin通过引入“伴生对象”的概念来替代java里的静态变量及方法。</p></blockquote><p>“伴生对象”这个名词听上去很古怪，其实非常简单：在类的内容使用companion来标记一个对象。所有需要“静态化”的变量和方法都放在这个对象里。</p><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">StaticTest</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">companion</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">object</span><span style="color:#C9D1D9;">{</span><span style="color:#8B949E;">//伴生对象是可以指定名字的，不过一般都省略掉。</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">var</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">STATIC_VAR</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">fun</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">staticMethod</span><span style="color:#C9D1D9;">(str</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">String?</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#79C0FF;">println</span><span style="color:#C9D1D9;">(str)</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-hidden="true">#</a></h2><h3 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-hidden="true">#</a></h3><h2 id="spring" tabindex="-1">Spring <a class="header-anchor" href="#spring" aria-hidden="true">#</a></h2><h3 id="自动注入" tabindex="-1">自动注入 <a class="header-anchor" href="#自动注入" aria-hidden="true">#</a></h3><div class="language-kotlin line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki github-dark has-highlighted-lines"><code><span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestClass</span><span style="color:#C9D1D9;"> (</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">// 自动注入的对象</span></span>
<span class="line highlighted"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">val</span><span style="color:#C9D1D9;"> serviceX</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ServiceX</span></span>
<span class="line"><span style="color:#C9D1D9;">) { yourCode }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,54),o=[e];function r(c,t,i,D,y,F){return a(),n("div",null,o)}const u=s(p,[["render",r]]);export{b as __pageData,u as default};
