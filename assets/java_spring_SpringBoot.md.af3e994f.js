import{_ as s,c as n,o as a,a as l}from"./app.10d45b38.js";const b=JSON.parse('{"title":"SpringBoot-基础入门","description":"","frontmatter":{},"headers":[{"level":2,"title":"1.SpringBoot简介","slug":"_1-springboot简介","link":"#_1-springboot简介","children":[{"level":3,"title":"1.1 为什么要学习SpringBoot","slug":"_1-1-为什么要学习springboot","link":"#_1-1-为什么要学习springboot","children":[]},{"level":3,"title":"1.2 SpringBoot是什么","slug":"_1-2-springboot是什么","link":"#_1-2-springboot是什么","children":[]}]},{"level":2,"title":"2.快速入门","slug":"_2-快速入门","link":"#_2-快速入门","children":[{"level":3,"title":"2.1 基本环境要求","slug":"_2-1-基本环境要求","link":"#_2-1-基本环境要求","children":[]},{"level":3,"title":"2.2 HelloWorld","slug":"_2-2-helloworld","link":"#_2-2-helloworld","children":[]},{"level":3,"title":"2.3 常见问题及其解决方案","slug":"_2-3-常见问题及其解决方案","link":"#_2-3-常见问题及其解决方案","children":[]},{"level":3,"title":"2.4 打包运行","slug":"_2-4-打包运行","link":"#_2-4-打包运行","children":[]},{"level":3,"title":"2.5 快速构建","slug":"_2-5-快速构建","link":"#_2-5-快速构建","children":[]}]},{"level":2,"title":"3.起步依赖","slug":"_3-起步依赖","link":"#_3-起步依赖","children":[{"level":3,"title":"3.0 依赖冲突及其解决方案","slug":"_3-0-依赖冲突及其解决方案","link":"#_3-0-依赖冲突及其解决方案","children":[]},{"level":3,"title":"3.1 版本锁定","slug":"_3-1-版本锁定","link":"#_3-1-版本锁定","children":[]},{"level":3,"title":"3.2 starter机制","slug":"_3-2-starter机制","link":"#_3-2-starter机制","children":[]}]},{"level":2,"title":"4.自动配置","slug":"_4-自动配置","link":"#_4-自动配置","children":[]},{"level":2,"title":"5.yaml配置","slug":"_5-yaml配置","link":"#_5-yaml配置","children":[{"level":3,"title":"5.1 简介","slug":"_5-1-简介","link":"#_5-1-简介","children":[]},{"level":3,"title":"5.2 语法","slug":"_5-2-语法","link":"#_5-2-语法","children":[]},{"level":3,"title":"5.3 SpringBoot读取yaml","slug":"_5-3-springboot读取yaml","link":"#_5-3-springboot读取yaml","children":[]},{"level":3,"title":"5.4.练习","slug":"_5-4-练习","link":"#_5-4-练习","children":[]},{"level":3,"title":"答案","slug":"答案","link":"#答案","children":[]},{"level":3,"title":"5.6 配置提示","slug":"_5-6-配置提示","link":"#_5-6-配置提示","children":[]}]},{"level":2,"title":"1.热部署","slug":"_1-热部署","link":"#_1-热部署","children":[{"level":3,"title":"1.1 准备工作","slug":"_1-1-准备工作","link":"#_1-1-准备工作","children":[]},{"level":3,"title":"1.2 使用","slug":"_1-2-使用","link":"#_1-2-使用","children":[]}]},{"level":2,"title":"2.单元测试","slug":"_2-单元测试","link":"#_2-单元测试","children":[{"level":3,"title":"2.1 使用","slug":"_2-1-使用","link":"#_2-1-使用","children":[]}]},{"level":2,"title":"3.整合Mybatis","slug":"_3-整合mybatis","link":"#_3-整合mybatis","children":[{"level":3,"title":"3.1 准备工作","slug":"_3-1-准备工作","link":"#_3-1-准备工作","children":[]},{"level":3,"title":"3.2 整合步骤","slug":"_3-2-整合步骤","link":"#_3-2-整合步骤","children":[]}]},{"level":2,"title":"4.Web开发","slug":"_4-web开发","link":"#_4-web开发","children":[{"level":3,"title":"4.1 静态资源访问","slug":"_4-1-静态资源访问","link":"#_4-1-静态资源访问","children":[]},{"level":3,"title":"4.2 设置请求映射规则@RequestMapping","slug":"_4-2-设置请求映射规则-requestmapping","link":"#_4-2-设置请求映射规则-requestmapping","children":[]},{"level":3,"title":"4.3 获取请求参数","slug":"_4-3-获取请求参数","link":"#_4-3-获取请求参数","children":[]},{"level":3,"title":"4.4 响应体相应数据","slug":"_4-4-响应体相应数据","link":"#_4-4-响应体相应数据","children":[]},{"level":3,"title":"4.5 跨域请求","slug":"_4-5-跨域请求","link":"#_4-5-跨域请求","children":[]},{"level":3,"title":"4.6 拦截器","slug":"_4-6-拦截器","link":"#_4-6-拦截器","children":[]},{"level":3,"title":"4.8 获取web原生对象","slug":"_4-8-获取web原生对象","link":"#_4-8-获取web原生对象","children":[]},{"level":3,"title":"4.9 自定义参数解析","slug":"_4-9-自定义参数解析","link":"#_4-9-自定义参数解析","children":[]},{"level":3,"title":"4.10 声明式事务","slug":"_4-10-声明式事务","link":"#_4-10-声明式事务","children":[]},{"level":3,"title":"4.11 AOP","slug":"_4-11-aop","link":"#_4-11-aop","children":[]},{"level":3,"title":"4.12 模板引擎相关-Thymeleaf","slug":"_4-12-模板引擎相关-thymeleaf","link":"#_4-12-模板引擎相关-thymeleaf","children":[]},{"level":3,"title":"5.整合Redis","slug":"_5-整合redis","link":"#_5-整合redis","children":[]},{"level":3,"title":"①依赖","slug":"_1依赖","link":"#_1依赖","children":[]},{"level":3,"title":"②配置Redis地址和端口号","slug":"_2配置redis地址和端口号","link":"#_2配置redis地址和端口号","children":[]},{"level":3,"title":"③注入RedisTemplate使用","slug":"_3注入redistemplate使用","link":"#_3注入redistemplate使用","children":[]}]},{"level":2,"title":"6.环境切换","slug":"_6-环境切换","link":"#_6-环境切换","children":[{"level":3,"title":"6.1 为什么要使用profile","slug":"_6-1-为什么要使用profile","link":"#_6-1-为什么要使用profile","children":[]},{"level":3,"title":"6.2 使用","slug":"_6-2-使用","link":"#_6-2-使用","children":[]}]},{"level":2,"title":"7.日志","slug":"_7-日志","link":"#_7-日志","children":[]},{"level":2,"title":"8.指标监控","slug":"_8-指标监控","link":"#_8-指标监控","children":[{"level":3,"title":"8.1 使用","slug":"_8-1-使用","link":"#_8-1-使用","children":[]},{"level":3,"title":"8.2 常用端点","slug":"_8-2-常用端点","link":"#_8-2-常用端点","children":[]}]},{"level":2,"title":"SpringBoot源码学习","slug":"springboot源码学习","link":"#springboot源码学习","children":[{"level":3,"title":"@Import注解","slug":"import注解","link":"#import注解","children":[]},{"level":3,"title":"@Import引入ImportSelector","slug":"import引入importselector","link":"#import引入importselector","children":[]}]}],"relativePath":"java/spring/SpringBoot.md","lastUpdated":1673527374000}'),p={name:"java/spring/SpringBoot.md"},e=l(`<h1 id="springboot-基础入门" tabindex="-1">SpringBoot-基础入门 <a class="header-anchor" href="#springboot-基础入门" aria-hidden="true">#</a></h1><h2 id="_1-springboot简介" tabindex="-1">1.SpringBoot简介 <a class="header-anchor" href="#_1-springboot简介" aria-hidden="true">#</a></h2><h3 id="_1-1-为什么要学习springboot" tabindex="-1">1.1 为什么要学习SpringBoot <a class="header-anchor" href="#_1-1-为什么要学习springboot" aria-hidden="true">#</a></h3><p>我们之前的SSM还是使用起来不够爽。</p><ul><li>还需要写很多的配置文件才能进行正常的使用。</li><li>实现一个功能需要引入很多的依赖，尤其是要自己去维护依赖的版本，特别容易出现依赖冲突等问题。</li></ul><p>SpringBoot就能很好的解决上述问题。</p><h3 id="_1-2-springboot是什么" tabindex="-1">1.2 SpringBoot是什么 <a class="header-anchor" href="#_1-2-springboot是什么" aria-hidden="true">#</a></h3><p>​ SpringBoot是基于Spring开发的全新框架，相当于对Spring做了又一层封装。</p><p>​ 其设计目的是用来简化Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。（自动配置）</p><p>​ 并且对第三方以来的添加也进行了封装简化。（起步依赖）</p><p>​ 所以Spring能做的他都能做，并且简化了配置。</p><p>​ 并且还提供了一些Spring没有的特性，比如：</p><ul><li>内嵌web容器，不再需要部署到web容器中</li><li>提供准备好的特性，如指标、健康检查和外部化配置</li></ul><p>最大特点：<strong>自动配置，起步依赖</strong></p><p>SpringBoot官网：<a href="https://spring.io/projects/spring-boot" target="_blank" rel="noreferrer">https://spring.io/projects/spring-boot</a></p><h2 id="_2-快速入门" tabindex="-1">2.快速入门 <a class="header-anchor" href="#_2-快速入门" aria-hidden="true">#</a></h2><h3 id="_2-1-基本环境要求" tabindex="-1">2.1 基本环境要求 <a class="header-anchor" href="#_2-1-基本环境要求" aria-hidden="true">#</a></h3><p>JDK：8</p><p>Maven：3.5.x</p><h4 id="maven配置" tabindex="-1">Maven配置 <a class="header-anchor" href="#maven配置" aria-hidden="true">#</a></h4><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">mirrors</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">mirror</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">id</span><span style="color:#C9D1D9;">&gt;aliyunmaven&lt;/</span><span style="color:#7EE787;">id</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">mirrorOf</span><span style="color:#C9D1D9;">&gt;central&lt;/</span><span style="color:#7EE787;">mirrorOf</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">&gt;aliyun maven&lt;/</span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">url</span><span style="color:#C9D1D9;">&gt;https://maven.aliyun.com/repository/public &lt;/</span><span style="color:#7EE787;">url</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">mirror</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;/</span><span style="color:#7EE787;">mirrors</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">  &lt;</span><span style="color:#7EE787;">profiles</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">profile</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">id</span><span style="color:#C9D1D9;">&gt;jdk-1.8&lt;/</span><span style="color:#7EE787;">id</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">activation</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">activeByDefault</span><span style="color:#C9D1D9;">&gt;true&lt;/</span><span style="color:#7EE787;">activeByDefault</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">jdk</span><span style="color:#C9D1D9;">&gt;1.8&lt;/</span><span style="color:#7EE787;">jdk</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;/</span><span style="color:#7EE787;">activation</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">properties</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">maven.compiler.source</span><span style="color:#C9D1D9;">&gt;1.8&lt;/</span><span style="color:#7EE787;">maven.compiler.source</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">maven.compiler.target</span><span style="color:#C9D1D9;">&gt;1.8&lt;/</span><span style="color:#7EE787;">maven.compiler.target</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">maven.compiler.compilerVersion</span><span style="color:#C9D1D9;">&gt;1.8&lt;/</span><span style="color:#7EE787;">maven.compiler.compilerVersion</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;/</span><span style="color:#7EE787;">properties</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">profile</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;/</span><span style="color:#7EE787;">profiles</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h4 id="清理maven仓库脚本" tabindex="-1">清理Maven仓库脚本 <a class="header-anchor" href="#清理maven仓库脚本" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">echo</span><span style="color:#C9D1D9;"> off</span></span>
<span class="line"><span style="color:#C9D1D9;">rem create by NettQun</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span></span>
<span class="line"><span style="color:#C9D1D9;">rem 这里写你的仓库路径</span></span>
<span class="line"><span style="color:#C9D1D9;">set REPOSITORY_PATH</span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">E</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;">\\Develop\\maven_rep</span></span>
<span class="line"><span style="color:#C9D1D9;">rem 正在搜索...</span></span>
<span class="line"><span style="color:#FF7B72;">for</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">/</span><span style="color:#C9D1D9;">f </span><span style="color:#A5D6FF;">&quot;delims=&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">%%</span><span style="color:#C9D1D9;">i </span><span style="color:#D2A8FF;">in</span><span style="color:#C9D1D9;"> (</span><span style="color:#A5D6FF;">&#39;dir /b /s &quot;%REPOSITORY_PATH%</span><span style="color:#79C0FF;">\\*</span><span style="color:#A5D6FF;">lastUpdated*&quot;&#39;</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">do</span><span style="color:#C9D1D9;"> (</span></span>
<span class="line"><span style="color:#C9D1D9;">    echo </span><span style="color:#FF7B72;">%%</span><span style="color:#C9D1D9;">i</span></span>
<span class="line"><span style="color:#C9D1D9;">    del </span><span style="color:#FF7B72;">/</span><span style="color:#C9D1D9;">s </span><span style="color:#FF7B72;">/</span><span style="color:#C9D1D9;">q </span><span style="color:#A5D6FF;">&quot;%%i&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">rem 搜索完毕</span></span>
<span class="line"><span style="color:#C9D1D9;">pause</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>创建一个bat文件，然后复制上述脚本进去，修改其中maven本地仓库的地址，保存后双击执行即可。</p><h3 id="_2-2-helloworld" tabindex="-1">2.2 HelloWorld <a class="header-anchor" href="#_2-2-helloworld" aria-hidden="true">#</a></h3><p>①继承父工程</p><p>在pom.xml中添加一下配置，继承spring-boot-starter-parent这个父工程</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;"> &lt;</span><span style="color:#7EE787;">parent</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework.boot&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-boot-starter-parent&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;2.5.0&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">parent</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>②添加依赖</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">   &lt;</span><span style="color:#7EE787;">dependencies</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework.boot&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">dependencies</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>③创建启动类</p><p>创建一个类在其加上@SpringBootApplication注解标识为启动类。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">SpringBootApplication</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">HelloApplication</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">main</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] </span><span style="color:#FFA657;">args</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        SpringApplication.</span><span style="color:#D2A8FF;">run</span><span style="color:#C9D1D9;">(HelloApplication.class,args);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>④定义Controller</p><p>创建Controller，主要Controller要放在启动类所在包或者其子包下。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span><span style="color:#8B949E;">//相当于Controller加上ResponseBody</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">HelloController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/hello&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">hello</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;helloSpringBoot&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>⑤运行测试</p><p>直接<strong>运行启动类的main方法</strong>即可。</p><h3 id="_2-3-常见问题及其解决方案" tabindex="-1">2.3 常见问题及其解决方案 <a class="header-anchor" href="#_2-3-常见问题及其解决方案" aria-hidden="true">#</a></h3><p>①访问时404</p><p>检查Controller是不是在启动类所在的包或者其子包下，如果不是需要进行修改。</p><p>②依赖报红</p><p>配置阿里云镜像后刷新maven项目让其下载。</p><h3 id="_2-4-打包运行" tabindex="-1">2.4 打包运行 <a class="header-anchor" href="#_2-4-打包运行" aria-hidden="true">#</a></h3><p>​ 我们可以把SpringBoot的项目打成jar包直接去运行。</p><p>①添加maven插件</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">   &lt;</span><span style="color:#7EE787;">build</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">plugins</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">&lt;!--springboot打包插件--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">plugin</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework.boot&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">                &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-boot-maven-plugin&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;/</span><span style="color:#7EE787;">plugin</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">plugins</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">build</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>②maven打包</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20220629001656080.png" alt="image-20220629001656080"></p><p>③运行jar包</p><p>在jar包所在目录执行命令</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#c9d1d9;">java -jar jar包名称</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>即可运行。</p><h3 id="_2-5-快速构建" tabindex="-1">2.5 快速构建 <a class="header-anchor" href="#_2-5-快速构建" aria-hidden="true">#</a></h3><p>​ <a href="https://start.spring.io/" target="_blank" rel="noreferrer">https://start.spring.io/</a></p><h2 id="_3-起步依赖" tabindex="-1">3.起步依赖 <a class="header-anchor" href="#_3-起步依赖" aria-hidden="true">#</a></h2><p>​ SpringBoot依靠父项目中的版本锁定和Starter机制让我们能更轻松的实现对依赖的管理。</p><h3 id="_3-0-依赖冲突及其解决方案" tabindex="-1">3.0 依赖冲突及其解决方案 <a class="header-anchor" href="#_3-0-依赖冲突及其解决方案" aria-hidden="true">#</a></h3><h4 id="_3-0-1-依赖冲突" tabindex="-1">3.0.1 依赖冲突 <a class="header-anchor" href="#_3-0-1-依赖冲突" aria-hidden="true">#</a></h4><p>​ 一般程序在运行时发生类似于java.lang.ClassNotFoundException,Method not found:&#39;...&#39;或者莫宁奇妙的异常信息，这种情况一般很大可能就是jar包依赖冲突的问题引起的了。</p><p>​ 一般是A依赖C（低版本），B也依赖C（高版本）。都是他们依赖的又是不同版本的C的时候会出现。</p><h4 id="_3-0-2-解决方案" tabindex="-1">3.0.2 解决方案 <a class="header-anchor" href="#_3-0-2-解决方案" aria-hidden="true">#</a></h4><p>​ 如果出现了类似于java.lang.ClassNotFoundException,Method not found:&#39;...&#39;：这些异常检查相关的依赖冲突问题，排除掉低版本的依赖，留下高版本的依赖。</p><p>​ 使用Maven Helper插件</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20220630104543695.png" alt="image-20220630104543695"></p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20220630104517869.png" alt="image-20220630104517869"></p><h3 id="_3-1-版本锁定" tabindex="-1">3.1 版本锁定 <a class="header-anchor" href="#_3-1-版本锁定" aria-hidden="true">#</a></h3><p>​ 我们的SpringBoot模块都需要继承一个父工程：spring-boot-starter-parent。在spring-boot-starter-parent的父工程spring-boot-dependencies中对常用的依赖进行了版本锁定。这样我们在添加依赖时，很多时候不需要添加依赖的版本号了。</p><p>​ 我们也可以采用覆盖properties配置或者直接指定版本号的方式修改依赖版本。</p><p>例如：</p><p>直接指定版本号</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.aspectj&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;aspectjweaver&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;1.7.2&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>覆盖properties配置</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">properties</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">      &lt;</span><span style="color:#7EE787;">aspectj.version</span><span style="color:#C9D1D9;">&gt;1.7.2&lt;/</span><span style="color:#7EE787;">aspectj.version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">properties</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-2-starter机制" tabindex="-1">3.2 starter机制 <a class="header-anchor" href="#_3-2-starter机制" aria-hidden="true">#</a></h3><p>​ 当我们需要使用某种功能时只需要引入对应的starter即可。一个starter针对一种特定的场景，其内部引入了该场景所需的依赖。这样我们就不需要单独引入多个依赖了。</p><p>​ 命名规律</p><ul><li>官方starter都是以<code>spring-boot-starter</code>开头后面跟上场景名称。例如：spring-boot-starter-data-jpa</li><li>非官方starter则是以 <code>场景名-spring-boot-starter</code>的格式，例如：mybatis-spring-boot-starter</li></ul><h2 id="_4-自动配置" tabindex="-1">4.自动配置 <a class="header-anchor" href="#_4-自动配置" aria-hidden="true">#</a></h2><p>​ SpringBoot中最重要的特性就是自动配置。</p><p>​ SpringBoot遵循“<strong>约定优于配置</strong>”的原则，自动进行了默认配置。这样我们就不需要做大量的配置。</p><p>​ 当我们需要使用什么场景时，就会自动配置这个场景相关的配置。</p><p>​ 如果它的默认配置不符合我们的需求时修改这部分配置即可。</p><h2 id="_5-yaml配置" tabindex="-1">5.yaml配置 <a class="header-anchor" href="#_5-yaml配置" aria-hidden="true">#</a></h2><h3 id="_5-1-简介" tabindex="-1">5.1 简介 <a class="header-anchor" href="#_5-1-简介" aria-hidden="true">#</a></h3><p>5.1.1yaml是什么</p><p>​ YAML（YAML Ain&#39;t a Markup Language) YAML 不是一种标记语言，通常以.yaml为后缀的文件，是一种只管的能够被电脑识别的数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，一种专门用来写配置文件的语言。</p><p>​ YAML试图用一种比XML更敏捷的方式，来完成XML所完成的任务。</p><p>​ 例如：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">student</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;"> </span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">dunxi</span></span>
<span class="line"><span style="color:#C9D1D9;"> </span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">15</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">student</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;"> &lt;</span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">&gt;dunxi&lt;/</span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">&gt;15&lt;/</span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">student</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_5-1-2yaml优点" tabindex="-1">5.1.2yaml优点 <a class="header-anchor" href="#_5-1-2yaml优点" aria-hidden="true">#</a></h4><ol><li><p>YAML易于人们阅读。</p></li><li><p>更加简洁明了</p></li></ol><h3 id="_5-2-语法" tabindex="-1">5.2 语法 <a class="header-anchor" href="#_5-2-语法" aria-hidden="true">#</a></h3><h4 id="_5-2-1-约定" tabindex="-1">5.2.1 约定 <a class="header-anchor" href="#_5-2-1-约定" aria-hidden="true">#</a></h4><ul><li>k: v 表示键值对关系，<strong>冒号后面必须要有一个空格</strong></li><li>使用空格的缩进表示层级关系，空格数目不重要，<strong>只要是左对齐的一列数据，都是同一个层级的</strong></li><li>大小写敏感</li><li>缩进时<strong>不允许使用tab键，只允许使用空格</strong>。</li><li>Java中对于驼峰命名法，可用原名或使用-代替驼峰，如java中的lastName属性，在yaml中使用lastName或者last-name都可以正确映射。</li><li>yaml中注释前面要加#</li></ul><h4 id="_5-2-2-键值关系" tabindex="-1">5.2.2 键值关系 <a class="header-anchor" href="#_5-2-2-键值关系" aria-hidden="true">#</a></h4><h5 id="普通值-字面量" tabindex="-1">普通值（字面量） <a class="header-anchor" href="#普通值-字面量" aria-hidden="true">#</a></h5><p>k: v:字面量直接写；</p><p>​ 字符串默认不用加上单引号或者双引号；</p><p>​ &quot;&quot;:双引号；转义字符能够起作用</p><p>​ name: &quot;dunxi \\n keji&quot;: 输出 ：dunxi 换行 keji</p><p>&#39;&#39;:单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">name1</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">dunxi</span><span style="color:#C9D1D9;"> </span></span>
<span class="line"><span style="color:#7EE787;">name2</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">&#39;dunxi  \\n keji&#39;</span></span>
<span class="line"><span style="color:#7EE787;">name3</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">&quot;dunxi  </span><span style="color:#79C0FF;">\\n</span><span style="color:#A5D6FF;"> keji&quot;</span></span>
<span class="line"><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">15</span></span>
<span class="line"><span style="color:#7EE787;">flag</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="日期" tabindex="-1">日期 <a class="header-anchor" href="#日期" aria-hidden="true">#</a></h5><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">date</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">2019/01/01</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="对象-属性和值-、map-键值对" tabindex="-1">对象（属性和值）、Map（键值对） <a class="header-anchor" href="#对象-属性和值-、map-键值对" aria-hidden="true">#</a></h5><p>多行写法：</p><p>在下一行来写对象的属性和值的关系，注意缩进</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">student</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">zhangsanfeng</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">20</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>行内写法：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">student</span><span style="color:#C9D1D9;">: {</span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">zhangsanfeng</span><span style="color:#C9D1D9;">,</span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">20</span><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="数组、list、set" tabindex="-1">数组、list、set <a class="header-anchor" href="#数组、list、set" aria-hidden="true">#</a></h5><p>用-值表示数组中的一个元素</p><p>多行写法：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">pets</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  - </span><span style="color:#A5D6FF;">dog</span></span>
<span class="line"><span style="color:#C9D1D9;">  - </span><span style="color:#A5D6FF;">pig</span></span>
<span class="line"><span style="color:#C9D1D9;">  - </span><span style="color:#A5D6FF;">cat</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>行内写法：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">pets</span><span style="color:#C9D1D9;">: [</span><span style="color:#A5D6FF;">dog</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">pig</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">cat</span><span style="color:#C9D1D9;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="对象数组、对象list、对象set" tabindex="-1">对象数组、对象list、对象set <a class="header-anchor" href="#对象数组、对象list、对象set" aria-hidden="true">#</a></h5><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">student</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;"> - </span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">zhangsan</span></span>
<span class="line"><span style="color:#C9D1D9;">   </span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">22</span></span>
<span class="line"><span style="color:#C9D1D9;"> - </span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">lisi</span></span>
<span class="line"><span style="color:#C9D1D9;">   </span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">20</span></span>
<span class="line"><span style="color:#C9D1D9;"> - {</span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">wangwu</span><span style="color:#C9D1D9;">,</span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">120</span><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_5-2-3-占位符赋值" tabindex="-1">5.2.3 占位符赋值 <a class="header-anchor" href="#_5-2-3-占位符赋值" aria-hidden="true">#</a></h4><p>可以使用\${key:defaultValue}的方式来赋值，若key不存在，则会使用defaultValue来赋值。</p><p>例如：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">server</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">port</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">\${myPort:88}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7EE787;">myPort</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">80</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_5-3-springboot读取yaml" tabindex="-1">5.3 SpringBoot读取yaml <a class="header-anchor" href="#_5-3-springboot读取yaml" aria-hidden="true">#</a></h3><h4 id="_5-3-1-value注解" tabindex="-1">5.3.1 @Value注解 <a class="header-anchor" href="#_5-3-1-value注解" aria-hidden="true">#</a></h4><p>​ 注意使用此注解只能获取简单类型的值（8种基本数据类型及其包装类，String，Date）</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">student</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">lastName</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">sangeng</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span><span style="color:#8B949E;">//相当于Controller加上ResponseBody</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">HelloController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;\${name}&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;\${date}&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Date</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">date;</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Value</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;\${student.age}&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">test</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;test&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>注意：加了@Value的类必须是交由Spring容器管理的</strong></p><h4 id="_5-3-2-configurationproperties" tabindex="-1">5.3.2 @ConfigurationProperties <a class="header-anchor" href="#_5-3-2-configurationproperties" aria-hidden="true">#</a></h4><p>​ yaml配置</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">student</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">dunxi</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">12</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>​ 在类上添加注解@Component和@ConfigurationProperties(prefix = &quot;配置前缀&quot;)</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ConfigurationProperties</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">prefix</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;student2&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Student</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​ 从spring容器中获取Student对象</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Student</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">student;</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">test</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(student);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;hi&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>​ 注意事项：要求对应的属性要有set/get方法，并且key要和成员变量名一致才可以对应的上。</p><p><strong>lombok讲解视频：</strong></p><p><a href="https://www.bilibili.com/video/BV1G54y1V7VG?p=12" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1G54y1V7VG?p=12</a></p><p><a href="https://www.bilibili.com/video/BV1G54y1V7VG?p=13" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1G54y1V7VG?p=13</a></p><h3 id="_5-4-练习" tabindex="-1">5.4.练习 <a class="header-anchor" href="#_5-4-练习" aria-hidden="true">#</a></h3><p>要求把下面实体类中的各个属性在yaml文件中进行赋值。然后想办法读取yaml配置的属性值，进行输出测试。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Student</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">lastName;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Boolean</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">boss;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Date</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">birthday;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Map</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">,</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">maps;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Map</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">,</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">maps2;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> List</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">Dog</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">list;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Dog</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">dog;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">arr;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">arr2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Map</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">,</span><span style="color:#FF7B72;">Dog</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">dogMap;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Dog</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="答案" tabindex="-1">答案 <a class="header-anchor" href="#答案" aria-hidden="true">#</a></h3><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">student</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">lastName</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">dunxi</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">12</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">boss</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">true</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">birthday</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">2022/1/3</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">maps</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">dunxi</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">12</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">maps2</span><span style="color:#C9D1D9;">: { </span><span style="color:#7EE787;">m1</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">m1</span><span style="color:#C9D1D9;">,</span><span style="color:#7EE787;">m2</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">m2</span><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">list</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    - </span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">dahuang</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">7</span></span>
<span class="line"><span style="color:#C9D1D9;">    - </span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">xiaohuang</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">7</span></span>
<span class="line"><span style="color:#C9D1D9;">    - {</span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">大黑</span><span style="color:#C9D1D9;">,</span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">3</span><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">dog</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">xiaohong</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">arr</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  - </span><span style="color:#A5D6FF;">arr1</span></span>
<span class="line"><span style="color:#C9D1D9;">  - </span><span style="color:#A5D6FF;">arr2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">arr2</span><span style="color:#C9D1D9;">: [</span><span style="color:#A5D6FF;">dunxi</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">keji</span><span style="color:#C9D1D9;">]</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">dogMap</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">xiaobai</span><span style="color:#C9D1D9;">: { </span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">dahuang</span><span style="color:#C9D1D9;">, </span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">8</span><span style="color:#C9D1D9;">}</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">xiaohong</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#7EE787;">name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">小红</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#7EE787;">age</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">3</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ConfigurationProperties</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">prefix</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;student&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Student</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">lastName;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Boolean</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">boss;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Date</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">birthday;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Map</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">,</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">maps;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Map</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">,</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">maps2;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> List</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">Dog</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">list;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Dog</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">dog;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">arr;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">arr2;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Map</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">,</span><span style="color:#FF7B72;">Dog</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">dogMap;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ConfigurationProperties</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">prefix</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;Dog&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Dog</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>5.5 yaml和properties配置的相互转换</p><p>​ 我们可以使用一些网站非常方便的实现yaml和properties格式配置的转换。</p><p>转换网站：<a href="https://www.toyaml.com/index.html" target="_blank" rel="noreferrer">https://www.toyaml.com/index.html</a></p><h3 id="_5-6-配置提示" tabindex="-1">5.6 配置提示 <a class="header-anchor" href="#_5-6-配置提示" aria-hidden="true">#</a></h3><p>​ 如果使用了@ConfigurationProperties注解，可以增加以下依赖，让我们在书写配置时有相应提示。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework.boot&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-boot-configuration-processor&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">optional</span><span style="color:#C9D1D9;">&gt;true&lt;/</span><span style="color:#7EE787;">optional</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>注意：添加完依赖加完注解后要运行一次程序才会有相应的提示。</strong></p><h1 id="springboot-常见场景" tabindex="-1">SpringBoot-常见场景 <a class="header-anchor" href="#springboot-常见场景" aria-hidden="true">#</a></h1><h2 id="_1-热部署" tabindex="-1">1.热部署 <a class="header-anchor" href="#_1-热部署" aria-hidden="true">#</a></h2><p>​ SpringBoot为我们提供了一个方便我们开发测试的工具dev-tools。使用后可以实现热部署效果。当我们运行了程序后对程序进行了修改，程序会自动重启。</p><p>​ 原理是使用了两个ClassLoder，一个ClassLoader加载哪些不会改变的类（第三方jar包），另一个ClassLoader加载会更改的类。称之为Restart ClassLoader，这样在有代码更改的时候，原来的Restart Classloader被丢弃，重新创建一个Restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启。</p><h3 id="_1-1-准备工作" tabindex="-1">1.1 准备工作 <a class="header-anchor" href="#_1-1-准备工作" aria-hidden="true">#</a></h3><p>①设置idea自动编译</p><p>​ 在idea中的setting做下面配置</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20220630102408854.png" alt="image-20220630102408854"></p><p>②设置允许程序运行时自动启动</p><p>​ ctrl+shift+alt+/ 这组快捷键后会有一个小弹窗，点击Registry就会进入下面的界面，找到下面的配置项并勾选啊，勾选后直接点击close</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20220630102601968.png" alt="image-20220630102601968"></p><h3 id="_1-2-使用" tabindex="-1">1.2 使用 <a class="header-anchor" href="#_1-2-使用" aria-hidden="true">#</a></h3><p>①添加依赖</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework.boot&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-boot-devtools&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">optional</span><span style="color:#C9D1D9;">&gt;true&lt;/</span><span style="color:#7EE787;">optional</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>②触发热部署</p><p>​ 当我们在修改完代码或者静态资源后可以切换到其他软件，让idea自动进行编译，自动编译后就会触发热部署。</p><p>​ 或者使用Ctrl+F9手动触发重新编译。</p><h2 id="_2-单元测试" tabindex="-1">2.单元测试 <a class="header-anchor" href="#_2-单元测试" aria-hidden="true">#</a></h2><p>​ 我们可以使用SpringBoot整合Junit进行单元测试。</p><p>​ <strong>Spring Boot 2.2.0 版本开始引入JUnit 5 作为单元测试默认库</strong></p><p>​ Junit5功能相比于Junit4也会更强大。但是本课程是SpringBoot的课程，所以主要针对SpringBoot如何整合Junit进行单元测试做讲解。暂时不针对Junit5的新功能做介绍。</p><h3 id="_2-1-使用" tabindex="-1">2.1 使用 <a class="header-anchor" href="#_2-1-使用" aria-hidden="true">#</a></h3><h4 id="_1添加依赖" tabindex="-1">①添加依赖 <a class="header-anchor" href="#_1添加依赖" aria-hidden="true">#</a></h4><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework.boot&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-boot-starter-test&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="_2编写测试类" tabindex="-1">②编写测试类 <a class="header-anchor" href="#_2编写测试类" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">SpringBootTest</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">classes</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> HelloApplication.class)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ApplicationTest</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    HelloController</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">helloController;</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Test</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">testJunit</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>注意：测试类所在的包需要和启动类是在同一个包下。否则就要使用如下写法指定启动类。</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">//指定启动类</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">SpringBootTest</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">classes</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> HelloApplication.class)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ApplicationTest</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    HelloController</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">helloController;</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Test</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">testJunit</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>2.2 兼容老版本</p><p>​ 如果是对老项目中的SpringBoot进行了版本升级会发现之前的单元测试代码出现了一些问题。</p><p>​ 因为Junit5和之前的Junit4有比较大的不同。</p><p>先看一张图：</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20220630163615349.png" alt="image-20220630163615349"></p><p>​ 从上图可以看出JUnit5 = Junit Platform + Junit Jupiter + Junit Vingtage</p><ul><li>Junit Platform: 这是Junit提供的平台功能模块，通过它，其他的测试引擎也可以接入</li><li>Junit Jupiter： 这个是Junit5的核心，是一个基于JunitPlatform的引擎实现，它包含许多丰富的新特性来使得自动化测试更加方便和强大。</li><li>Junit Vintage: 这个模块是兼容Junit3 、Junit4 版本的测试引擎，使得旧版本的自动化测试也可以在Junit5下正常运行。</li></ul><p>​ 虽然Junit5包含了Junit Vintage来兼容Junit3 和Junit4，但是SpringBoot 2.4以上的版本对应的<strong>spring-boot-starter-test</strong>移除了默认对Vintage的依赖。所以当我们仅仅依赖spring-boot-starter-test时会发现之前我们使用的@Test注解和@RunWith注解都不能用了。</p><p>​ 我们可以单独在依赖vintage来进行兼容。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.junit.vintage&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;junit-vintage-engine&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">scope</span><span style="color:#C9D1D9;">&gt;test&lt;/</span><span style="color:#7EE787;">scope</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意：</p><p>​ <strong>org.junit.Test对应的是Junit4的版本，就搭配@RunWith注解来使用。</strong></p><p>SpringBoot2.2.0之前版本的写法</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> com.dunxi.controller.HelloController;</span></span>
<span class="line"><span style="color:#8B949E;">//import org.junit.jupiter.api.Test;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.junit.Test;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.junit.runner.RunWith;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.boot.test.context.SpringBootTest;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.test.context.junit4.SpringRunner;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">//classes属性来指定启动类</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">SpringBootTest</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RunWith</span><span style="color:#C9D1D9;">(SpringRunner.class)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ApplicationTest</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> HelloController</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">helloController;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Test</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">testJunit</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(helloController);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h2 id="_3-整合mybatis" tabindex="-1">3.整合Mybatis <a class="header-anchor" href="#_3-整合mybatis" aria-hidden="true">#</a></h2><h3 id="_3-1-准备工作" tabindex="-1">3.1 准备工作 <a class="header-anchor" href="#_3-1-准备工作" aria-hidden="true">#</a></h3><p>①数据准备</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">/*Table structure for table \`user\` */</span></span>
<span class="line"><span style="color:#FF7B72;">DROP</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">TABLE</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">IF</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">EXISTS</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">\`user\`</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#FF7B72;">CREATE</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">TABLE</span><span style="color:#C9D1D9;"> \`</span><span style="color:#D2A8FF;">user</span><span style="color:#C9D1D9;">\` (</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#A5D6FF;">\`id\`</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">11</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">NOT NULL</span><span style="color:#C9D1D9;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#A5D6FF;">\`username\`</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">varchar</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">50</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">DEFAULT</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">NULL</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#A5D6FF;">\`age\`</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">11</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">DEFAULT</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">NULL</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#A5D6FF;">\`address\`</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">varchar</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">50</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">DEFAULT</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">NULL</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">PRIMARY KEY</span><span style="color:#C9D1D9;"> (</span><span style="color:#A5D6FF;">\`id\`</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">) ENGINE</span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">InnoDB AUTO_INCREMENT</span><span style="color:#FF7B72;">=</span><span style="color:#79C0FF;">10</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">DEFAULT</span><span style="color:#C9D1D9;"> CHARSET</span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">utf8;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">/*Data for the table \`user\` */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">insert  into</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">\`user\`</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">\`id\`</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">\`username\`</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">\`age\`</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">\`address\`</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">values</span><span style="color:#C9D1D9;"> (</span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;pdd&#39;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">25</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;上海&#39;</span><span style="color:#C9D1D9;">),(</span><span style="color:#79C0FF;">3</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;UZI&#39;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">19</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;上海11&#39;</span><span style="color:#C9D1D9;">),(</span><span style="color:#79C0FF;">4</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;RF&#39;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">19</span><span style="color:#C9D1D9;">,</span><span style="color:#FF7B72;">NULL</span><span style="color:#C9D1D9;">),(</span><span style="color:#79C0FF;">6</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;三更&#39;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">14</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;请问2&#39;</span><span style="color:#C9D1D9;">),(</span><span style="color:#79C0FF;">8</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;test1&#39;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">11</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;cc&#39;</span><span style="color:#C9D1D9;">),(</span><span style="color:#79C0FF;">9</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;test2&#39;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">12</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;cc2&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#8B949E;">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#8B949E;">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#8B949E;">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>②实体类</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> lombok.AllArgsConstructor;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> lombok.Data;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> lombok.NoArgsConstructor;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> net.bytebuddy.asm.Advice;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">User</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">id;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">username;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">address;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_3-2-整合步骤" tabindex="-1">3.2 整合步骤 <a class="header-anchor" href="#_3-2-整合步骤" aria-hidden="true">#</a></h3><p>​ GitHub： <a href="https://github.com/mybatis/spring-boot-starter/" target="_blank" rel="noreferrer">https://github.com/mybatis/spring-boot-starter/</a></p><h4 id="_1导入依赖" tabindex="-1">①导入依赖 <a class="header-anchor" href="#_1导入依赖" aria-hidden="true">#</a></h4><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--mybatis启动器--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.mybatis.spring.boot&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;mybatis-spring-boot-starter&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;2.2.0&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--mysql驱动--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;mysql&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;mysql-connector-java&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">scope</span><span style="color:#C9D1D9;">&gt;runtime&lt;/</span><span style="color:#7EE787;">scope</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_2配置数据库信息" tabindex="-1">②配置数据库信息 <a class="header-anchor" href="#_2配置数据库信息" aria-hidden="true">#</a></h4><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">datasource</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">url</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">jdbc:mysql://localhost:3306/springboot_test?characterEncoding=utf-8&amp;serverTimezone=UTC</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">username</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">root</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">password</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">123456</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">driver-class-name</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">com.mysql.cj.jdbc.Driver</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_3配置mybatis相关配置" tabindex="-1">③配置Mybatis相关配置 <a class="header-anchor" href="#_3配置mybatis相关配置" aria-hidden="true">#</a></h4><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">mybatis</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">mapper-locations</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">classpath:mapper/*Mapper.xml</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">#mapper映射文件的路径</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">type-aliases-package</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">com.dunxi.domain</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">#配置哪个包下的类有默认的别名</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_4编写mapper接口" tabindex="-1">④编写Mapper接口 <a class="header-anchor" href="#_4编写mapper接口" aria-hidden="true">#</a></h4><p>​ 注意在接口上加上@Mapper和@Repository注解。主要是假@Mapper，在加上@Repository之后就不会有红色波浪线了</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Mapper</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Repository</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserMapper</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> List&lt;</span><span style="color:#FF7B72;">User</span><span style="color:#C9D1D9;">&gt; </span><span style="color:#D2A8FF;">findAll</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_5编写mapper接口对应的xml文件" tabindex="-1">⑤编写mapper接口对应的xml文件 <a class="header-anchor" href="#_5编写mapper接口对应的xml文件" aria-hidden="true">#</a></h4><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;?</span><span style="color:#7EE787;">xml</span><span style="color:#79C0FF;"> version</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;1.0&quot;</span><span style="color:#79C0FF;"> encoding</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;"> ?&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;!</span><span style="color:#FF7B72;">DOCTYPE</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">mapper</span><span style="color:#C9D1D9;"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">mapper</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">namespace</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.mapper.UserMapper&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">select</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;findAll&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">resultType</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.domain.User&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        select * from user</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">select</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">mapper</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="_6测试" tabindex="-1">⑥测试 <a class="header-anchor" href="#_6测试" aria-hidden="true">#</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">SpringBootTest</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">classes</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> HelloApplication.class)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">SpringMyTest</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    UserMapper</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userMapper;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Test</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">tesMapper</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(userMapper.</span><span style="color:#D2A8FF;">findAll</span><span style="color:#C9D1D9;">());</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_4-web开发" tabindex="-1">4.Web开发 <a class="header-anchor" href="#_4-web开发" aria-hidden="true">#</a></h2><h3 id="_4-1-静态资源访问" tabindex="-1">4.1 静态资源访问 <a class="header-anchor" href="#_4-1-静态资源访问" aria-hidden="true">#</a></h3><p>​ 由于SpringBoot的项目是打成jar包的所以没有之前web项目的那些web资源目录（webapps).</p><p>​ 那么我们的静态资源要放到哪里呢？</p><p>​ 从SpringBoot官方文档中我们可以知道，我们可以把静态资源放到<code>resources/static</code>（或者<code>resources/public</code>或者<code>resources/resources</code>或者 <code>resources/META-INF/resources</code>)中即可。</p><p>​ 静态资源放完后，</p><p>​ 例如我们想访问文件：resources/static/index.html 只需要在访问时资源路径写/index.html即可。</p><p>​ 例如我们想访问文件：resources/static/pages/login.html 访问资源路径写成：/pages/login.html即可。</p><h4 id="_4-1-1-修改静态资源访问路径" tabindex="-1">4.1.1 修改静态资源访问路径 <a class="header-anchor" href="#_4-1-1-修改静态资源访问路径" aria-hidden="true">#</a></h4><p>​ SpringBoot默认的静态资源路径匹配为/**。如果是想要修改可以通过spring.mvc.static-path-patern这个配置进行修改。</p><p>​ 例如想要让访问静态资源的URL必须前缀有/res。例如：/res/index.html才能访问到static目录中的资源。我们可以修改如下：</p><p>在application.yaml中</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">mvc</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">static-path-pattern</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">/res/**</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">#修改静态资源访问路径</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_4-1-2-修改静态资源存放目录" tabindex="-1">4.1.2 修改静态资源存放目录 <a class="header-anchor" href="#_4-1-2-修改静态资源存放目录" aria-hidden="true">#</a></h4><p>​ 我们可以修改spring.web.resources.static-locations这个配置来修改静态资源存放目录。</p><p>例如：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">web</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">resources</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">     - </span><span style="color:#A5D6FF;">classpath:/sgstatic/</span></span>
<span class="line"><span style="color:#C9D1D9;">     - </span><span style="color:#A5D6FF;">classpath:/static/</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_4-2-设置请求映射规则-requestmapping" tabindex="-1">4.2 设置请求映射规则@RequestMapping <a class="header-anchor" href="#_4-2-设置请求映射规则-requestmapping" aria-hidden="true">#</a></h3><p>​ 详细讲解：<a href="https://www.bilibili.com/video/BV1AK4y1o74Y" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1AK4y1o74Y</a> P5-P12</p><p>​ 该注解可以加到方法上或者是类上。（查看其源码可知）</p><p>​ 我们可以用其来设定所能匹配请求的要求。只有符合了设置的要求，请求才能被加了该注解的方法或类处理。</p><h4 id="_4-2-1-指定请求路径" tabindex="-1">4.2.1 指定请求路径 <a class="header-anchor" href="#_4-2-1-指定请求路径" aria-hidden="true">#</a></h4><p>​ path或者value属性都可以用来指定请求路径。</p><p>例如：</p><p>​ 我们期望让请求的资源路径为**/test/testPath<strong>的请求能够被</strong>testPath**方法处理则可以写如下代码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">HelloController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testPath&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testPath</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testPath&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">HelloController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test/testPath&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testPath</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testPath&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="_4-2-2-指定请求方式" tabindex="-1">4.2.2 指定请求方式 <a class="header-anchor" href="#_4-2-2-指定请求方式" aria-hidden="true">#</a></h4><p>​ method属性可以用来指定可处理的请求方式。</p><p>例如：</p><p>​ 我们期望</p><p>让请求的资源路径为/test/testMethod/的POST请求能够被testMethod方法处理。则可以写如下代码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testMethod&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testMethod</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testMethod处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testMethod&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>注意：我们可以也可以运用如下注解来进行替换</p><ul><li><p>​ @PostMapping 等价于 @RequestMapping(method = RequestMethod.POST)</p></li><li><p>​ @GetMapping 等价于 @RequestMapping(method = RequestMethod.GET)</p></li><li><p>​ @PutMapping 等价于 @RequestMapping(method = RequestMethod.PUT)</p></li><li><p>​ @DeleteMapping 等价于 @RequestMapping(method = RequestMethod.DELETE)</p></li></ul><p>例如：</p><p>​ 上面的需求我们可以使用下面的写法实现</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">PostMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testMethod&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testMethod</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testMethod处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testMethod&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_4-2-3-指定请求参数" tabindex="-1">4.2.3 指定请求参数 <a class="header-anchor" href="#_4-2-3-指定请求参数" aria-hidden="true">#</a></h4><p>​ 我们可以使用params属性来对请求参数进行一些限制。可以要求必须具有某些参数，或者是某些参数是某个值，或者是某些参数不是某个值。</p><p>例如：</p><p>​ 我们期望让请求的资源路径为**/test/testParams<strong>的</strong>GET<strong>请求,并且请求参数中</strong>具有code参数**的请求能够被testParams方法处理。则可以写如下代码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testParams&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">params</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;code&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testParams</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testParams处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testParams&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​</p><p>​ 如果是要求<strong>不能有code</strong>这个参数可以把改成如下形式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testParams&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">params</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;!code&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testParams</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testParams处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testParams&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​</p><p>​ 如果要求有code这参数，并且这参数值必须<strong>是某个值</strong>可以改成如下形式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testParams&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">params</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;code=sgct&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testParams</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testParams处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testParams&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​ 如果要求有code这参数，并且这参数值必须<strong>不是某个值</strong>可以改成如下形式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testParams&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">params</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;code!=sgct&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testParams</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testParams处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testParams&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_4-2-4-指定请求头" tabindex="-1">4.2.4 指定请求头 <a class="header-anchor" href="#_4-2-4-指定请求头" aria-hidden="true">#</a></h4><p>​ 我们可以使用headers属性来对请求头进行一些限制。</p><p>例如：</p><p>​ 我们期望让请求的资源路径为/test/testHeaders的GET请求，并且请求头中具有deviceType的请求能够被testHeaders方法处理。则可以写如下代码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testHeaders&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">headers</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;deviceType&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testHeaders</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testHeaders处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testHeaders&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>​ 如果是要求不能有<strong>deviceType</strong>这个请求头可以把改成如下形式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testHeaders&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">headers</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;!deviceType&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testHeaders</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testHeaders处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testHeaders&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>​ 如果要求有deviceType这个请求头，并且其值必须<strong>是某个值</strong>可以改成如下形式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testHeaders&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">headers</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;deviceType=ios&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testHeaders</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testHeaders处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testHeaders&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>​ 如果要求有deviceType这个请求头，并且其值必须<strong>不是某个值</strong>可以改成如下形式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/test&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testHeaders&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET,</span><span style="color:#79C0FF;">headers</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;deviceType!=ios&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testHeaders</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testHeaders处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testHeaders&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="_4-2-4-指定请求头content-type" tabindex="-1">4.2.4 指定请求头Content-Type <a class="header-anchor" href="#_4-2-4-指定请求头content-type" aria-hidden="true">#</a></h4><p>​ 我们可以使用consumes属性来对Content-Type这个请求头进行一些限制。</p><h5 id="范例一" tabindex="-1">范例一 <a class="header-anchor" href="#范例一" aria-hidden="true">#</a></h5><p>我们期望让请求的资源路径为**/test/testConsumes**的POST请求,并且请求头中的Content-Type头必须为 <strong>multipart/from-data</strong> 的请求能够被testConsumes方法处理。则可以写如下代码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testConsumes&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.POST,</span><span style="color:#79C0FF;">consumes</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;multipart/from-data&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testConsumes</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testConsumes处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testConsumes&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="范例二" tabindex="-1">范例二 <a class="header-anchor" href="#范例二" aria-hidden="true">#</a></h5><p>​ 如果我们要求请求头Content-Type的值必须<strong>不能为某个multipart/from-data</strong>则可以改成如下形式：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/testConsumes&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.POST,</span><span style="color:#79C0FF;">consumes</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;!multipart/from-data&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testConsumes</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testConsumes处理了请求&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testConsumes&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_4-3-获取请求参数" tabindex="-1">4.3 获取请求参数 <a class="header-anchor" href="#_4-3-获取请求参数" aria-hidden="true">#</a></h3><h4 id="_4-3-1-获取路径参数" tabindex="-1">4.3.1 获取路径参数 <a class="header-anchor" href="#_4-3-1-获取路径参数" aria-hidden="true">#</a></h4><p>​ RestFul风格的接口一些参数是在请求路径上的。类似： /user/1 这里的1就是id。</p><p>​ 如果我们想获取这种格式的数据可以使用**@PathVariable**来实现。</p><h5 id="范例一-1" tabindex="-1">范例一 <a class="header-anchor" href="#范例一-1" aria-hidden="true">#</a></h5><p>​ 要求定义个RestFul风格的接口，该接口可以用来根据id查询用户。请求路径要求为 /user ，请求方式要求为GET。</p><p>​ 而请求参数id要写在请求路径上，例如 /user/1 这里的1就是id。</p><p>​ 我们可以定义如下方法，通过如下方式来获取路径参数：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/user/{id}&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">findUserById</span><span style="color:#C9D1D9;">( @</span><span style="color:#FF7B72;">PathVariable</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;">)Integer </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;findUserById&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(id);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;findUserById&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h5 id="范例二-1" tabindex="-1">范例二 <a class="header-anchor" href="#范例二-1" aria-hidden="true">#</a></h5><p>​ 如果这个接口，想根据id和username查询用户。请求路径要求为 /user ，请求方式要求为GET。</p><p>​ 而请求参数id和name要写在请求路径上，例如 /user/1/zs 这里的1就是id，zs是name</p><p>​ 我们可以定义如下方法，通过如下方式来获取路径参数：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/user/{id}/{name}&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.GET)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">findUser</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">PathVariable</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;">) Integer </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;">,@</span><span style="color:#FF7B72;">PathVariable</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">) String </span><span style="color:#FFA657;">name</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;findUser&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(id);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;findUser&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h4 id="_4-3-2-获取请求体中的json个数参数" tabindex="-1">4.3.2 获取请求体中的JSON个数参数 <a class="header-anchor" href="#_4-3-2-获取请求体中的json个数参数" aria-hidden="true">#</a></h4><p>​ RestFul风格的接口一些比较复杂的参数会转换成JSON通过请求体传递过来。这种时候我们可以使用@RequestBody注解获取请求体中的数据。</p><h5 id="_4-3-2-1-配置" tabindex="-1">4.3.2.1 配置 <a class="header-anchor" href="#_4-3-2-1-配置" aria-hidden="true">#</a></h5><p>​ SpringBoot的web启动器已经默认导入了Jackson的依赖，不再需要额外导入依赖了。</p><h5 id="_4-3-2-2-使用" tabindex="-1">4.3.2.2 使用 <a class="header-anchor" href="#_4-3-2-2-使用" aria-hidden="true">#</a></h5><h6 id="范例一-2" tabindex="-1">范例一 <a class="header-anchor" href="#范例一-2" aria-hidden="true">#</a></h6><p>​ 要求定义个RestFul风格的接口，该接口可以用来新建用户。请求路径要求为/user ,请求方式为POST。</p><p>用户数据会转换成json通过请求体传递。</p><p>​ 请求体数据</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">{</span><span style="color:#7EE787;">&quot;name&quot;</span><span style="color:#C9D1D9;">:</span><span style="color:#A5D6FF;">&quot;敦禧&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#7EE787;">&quot;age&quot;</span><span style="color:#C9D1D9;">:</span><span style="color:#79C0FF;">15</span><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>1.获取参数封装成实体对象</p><p>​ 如果我们想把Json数据获取出来封装User对象,我们可以这样定义方法：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/user&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">insertUser</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestBody</span><span style="color:#C9D1D9;"> User </span><span style="color:#FFA657;">user</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;insertUser&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(user);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;insertUser&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​ User实体类如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">User</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">id;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​</p><p>2.获取参数封装成Map集合</p><p>​ 也可以把该数据获取出来封装成Map集合：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/user&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">insertUser</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestBody</span><span style="color:#C9D1D9;"> Map map){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;insertUser&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(map);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;insertUser&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h6 id="范例二-2" tabindex="-1">范例二 <a class="header-anchor" href="#范例二-2" aria-hidden="true">#</a></h6><p>​ 如果请求体传递过来的数据是一个User集合转换成的json，Json数据可以这样定义：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">[{</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#FF7B72;">:</span><span style="color:#A5D6FF;">&quot;三更1&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;age&quot;</span><span style="color:#FF7B72;">:</span><span style="color:#79C0FF;">14</span><span style="color:#C9D1D9;">},{</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#FF7B72;">:</span><span style="color:#A5D6FF;">&quot;三更2&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;age&quot;</span><span style="color:#FF7B72;">:</span><span style="color:#79C0FF;">15</span><span style="color:#C9D1D9;">},{</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#FF7B72;">:</span><span style="color:#A5D6FF;">&quot;三更3&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;age&quot;</span><span style="color:#FF7B72;">:</span><span style="color:#79C0FF;">16</span><span style="color:#C9D1D9;">}]</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ 方法定义：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/users&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">method</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> RequestMethod.POST)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">insertUsers</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestBody</span><span style="color:#C9D1D9;"> List</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">User</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> users){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;insertUsers&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(users);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;insertUser&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h5 id="_4-3-2-3-注意事项" tabindex="-1">4.3.2.3 注意事项 <a class="header-anchor" href="#_4-3-2-3-注意事项" aria-hidden="true">#</a></h5><p>​ 如果需要使用@RequestBody来获取请求体中的json并且进行转换，要求请求头Content-Type的值要为：application/json。</p><h4 id="_4-3-3-获取querystring格式参数" tabindex="-1">4.3.3 获取QueryString格式参数 <a class="header-anchor" href="#_4-3-3-获取querystring格式参数" aria-hidden="true">#</a></h4><p>​ 如果接口的参数是使用QueryString的格式的话，我们也可以使用SpringMVC快速获取参数。</p><p>​ 我们可以使用**@RequestParam**来获取QueryString格式的参数。</p><h5 id="_4-3-3-1-使用" tabindex="-1">4.3.3.1 使用 <a class="header-anchor" href="#_4-3-3-1-使用" aria-hidden="true">#</a></h5><h6 id="范例一-3" tabindex="-1">范例一 <a class="header-anchor" href="#范例一-3" aria-hidden="true">#</a></h6><p>​ 要求定义个接口，该接口请求路径要求为 /testRequestParam，请求方式无要求。参数为id和name和likes。使用QueryString的格式传递。</p><p>1.参数单独的获取</p><p>​ 如果我们想把id，name，likes单独获取出来可以使用如下写法：</p><p>​ 在方法中定义方法参数，方法参数名要和请求参数名一致，这种情况下我们可以省略**@RequestParam**注解。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testRquestParam&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testRquestParam</span><span style="color:#C9D1D9;">(Integer id, String name, </span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] likes){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testRquestParam&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(id);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(Arrays.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(likes));</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testRquestParam&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​ 如果方法参数名和请求参数名不一致，我们可以加上**@RequestParam**注解例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testRquestParam&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testRquestParam</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;">) Integer uid,@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">) String name, @</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;likes&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] likes){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testRquestParam&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(uid);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(Arrays.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(likes));</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testRquestParam&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>2.获取参数封装成实体对象</p><p>​ 如果我们想把这些参数封装到一个User对象中可以使用如下写法：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testRquestParam&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testRquestParam</span><span style="color:#C9D1D9;">(User user){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testRquestParam&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(user);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testRquestParam&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>​ User类定义如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">User</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">id;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">name;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">age;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">likes;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>​ 测试时请求url如下：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">http</span><span style="color:#FF7B72;">:</span><span style="color:#8B949E;">//localhost:8080/testRquestParam?id=1&amp;name=三更草堂&amp;likes=编程&amp;likes=录课&amp;likes=烫头</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>​ <strong>注意：实体类中的成员变量要和请求参数名对应上。并且要提供对应的set/get方法。</strong></p><h4 id="_4-3-4-相关注解其他属性" tabindex="-1">4.3.4 相关注解其他属性 <a class="header-anchor" href="#_4-3-4-相关注解其他属性" aria-hidden="true">#</a></h4><h5 id="_4-3-4-1-required" tabindex="-1">4.3.4.1 required <a class="header-anchor" href="#_4-3-4-1-required" aria-hidden="true">#</a></h5><p>​ 代表是否必须，默认值为true也就是必须要有对应的参数。如果没有就会报错。</p><p>​ 如果对应的参数可传可不传则可以把其设置为fasle</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testRquestParam&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testRquestParam</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">required</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">) Integer uid,@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">) String name, @</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;likes&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] likes){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testRquestParam&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(uid);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(Arrays.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(likes));</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testRquestParam&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h5 id="_4-3-4-2-defaultvalue" tabindex="-1">4.3.4.2 defaultValue <a class="header-anchor" href="#_4-3-4-2-defaultvalue" aria-hidden="true">#</a></h5><p>​ 如果对应的参数没有，我们可以用defaultValue属性设置默认值。</p><p>例如：</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/testRquestParam&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">testRquestParam</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">value</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">required</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">defaultValue</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;777&quot;</span><span style="color:#C9D1D9;">) Integer uid,@</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">) String name, @</span><span style="color:#FF7B72;">RequestParam</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;likes&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#FF7B72;">String</span><span style="color:#C9D1D9;">[] likes){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;testRquestParam&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(uid);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(name);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(Arrays.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(likes));</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;testRquestParam&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_4-4-响应体相应数据" tabindex="-1">4.4 响应体相应数据 <a class="header-anchor" href="#_4-4-响应体相应数据" aria-hidden="true">#</a></h3><p>​ 无论是RestFul风格还是我们之前web阶段接触过的异步请求，都需要把数据转换成json放入响应体中。</p><h4 id="_4-4-1-数据放到响应体" tabindex="-1">4.4.1 数据放到响应体 <a class="header-anchor" href="#_4-4-1-数据放到响应体" aria-hidden="true">#</a></h4><p>​ 我们的SpringMVC为我们提供了**@ResponseBody**来非常方便的把JSON放到响应体中。</p><p>​ @ReponseBody可以加在哪些东西上面？类上和方法上</p><p>具体代码清参考范例。</p><h4 id="_4-4-2-数据转换成json" tabindex="-1">4.4.2 数据转换成json <a class="header-anchor" href="#_4-4-2-数据转换成json" aria-hidden="true">#</a></h4><h5 id="_4-4-2-1-配置" tabindex="-1">4.4.2.1 配置 <a class="header-anchor" href="#_4-4-2-1-配置" aria-hidden="true">#</a></h5><p>​ SpringBoot项目中使用了web的start后，不需要进行额外的依赖和配置</p><h5 id="_4-4-2-2-使用" tabindex="-1">4.4.2.2 使用 <a class="header-anchor" href="#_4-4-2-2-使用" aria-hidden="true">#</a></h5><p>​ 只要把要转换的数据作为方法的返回值返回即可。SpringMVC会帮我们把返回值转换为json。具体代码参考范例。</p><h4 id="_4-4-3-范例" tabindex="-1">4.4.3 范例 <a class="header-anchor" href="#_4-4-3-范例" aria-hidden="true">#</a></h4><h5 id="范例一-4" tabindex="-1">范例一 <a class="header-anchor" href="#范例一-4" aria-hidden="true">#</a></h5><p>​ 要求定义个RestFul风格的接口，该接口可以用来根据id查询用户。请求路径要求为 /response/user ，请求方式要求为GET。</p><p>​ 而请求参数id要写在请求路径上，例如 /response/user/1 这里的1就是id。</p><p>​ 要求获取参数id,去查询对应id的用户信息（模拟查询即可，可以选择直接new一个User对象），并且转换成json响应到响应体中。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/response&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ResponseController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/user/{id}&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">ResponseBody</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> User </span><span style="color:#D2A8FF;">findById</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">PathVariable</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;id&quot;</span><span style="color:#C9D1D9;">) Integer </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        User</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">user</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(id, </span><span style="color:#A5D6FF;">&quot;三更草堂&quot;</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">15</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> user;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_4-5-跨域请求" tabindex="-1">4.5 跨域请求 <a class="header-anchor" href="#_4-5-跨域请求" aria-hidden="true">#</a></h3><h4 id="_4-5-1-什么是跨域" tabindex="-1">4.5.1 什么是跨域 <a class="header-anchor" href="#_4-5-1-什么是跨域" aria-hidden="true">#</a></h4><p>​ 浏览器出于安全的考虑，使用XMLHttpRequest对象发起 HTTP请求时必须遵守同源策略，否则就是跨域的HTTP请求，默认情况下是被禁止的。同源策略要求源相同才能进行正常通信，即协议、域名、端口号完全一致。</p><h4 id="_4-5-2-cors解决跨域" tabindex="-1">4.5.2 CORS解决跨域 <a class="header-anchor" href="#_4-5-2-cors解决跨域" aria-hidden="true">#</a></h4><p>​ CORS是一个W3C标准，全称是“跨域资源共享”（Cross-origin resource sharing),允许浏览器向跨源服务器，发出XMLHttpRequest请求，从而克服了AJAX只能同源使用的限制。</p><p>​ 它通过服务器增加一个特殊的Header[Access-Control-Allow-Origin]来告诉客户端跨域的限制，如果浏览器支持CORS、并且判断Origin通过的话，就会允许XMLHttpRequest发起跨域请求。</p><h4 id="_4-5-3-springboot使用cors解决跨域" tabindex="-1">4.5.3 SpringBoot使用CORS解决跨域 <a class="header-anchor" href="#_4-5-3-springboot使用cors解决跨域" aria-hidden="true">#</a></h4><h5 id="_1-使用-crossorigin" tabindex="-1">1.使用@CrossOrigin <a class="header-anchor" href="#_1-使用-crossorigin" aria-hidden="true">#</a></h5><p>可以在支持跨域的方法上或者是Controller上加上注解@CrossOrigin注解</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/user&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">CrossOrigin</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> UserService</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/findAll&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> ResponseResult </span><span style="color:#D2A8FF;">findAll</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//调用service查询数据，进行返回</span></span>
<span class="line"><span style="color:#C9D1D9;">        List</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">User</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">users</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> userService.</span><span style="color:#D2A8FF;">findAll</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ResponseResult</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">200</span><span style="color:#C9D1D9;">,users);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="_2-使用webmvcconfigurer的addcorsmappings方法配置corsinterceptor" tabindex="-1">2.使用WebMvcConfigurer的addCorsMappings方法配置CorsInterceptor <a class="header-anchor" href="#_2-使用webmvcconfigurer的addcorsmappings方法配置corsinterceptor" aria-hidden="true">#</a></h5><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Configuration</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">CorsConfig</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">WebMvcConfigurer</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Override</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">addCorsMappings</span><span style="color:#C9D1D9;">(CorsRegistry </span><span style="color:#FFA657;">registry</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">// 设置允许跨域的路径</span></span>
<span class="line"><span style="color:#C9D1D9;">        registry.</span><span style="color:#D2A8FF;">addMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/**&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">// 设置允许跨域请求的域名</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">allowedOriginPatterns</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;*&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">// 是否允许cookie</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">allowCredentials</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">// 设置允许的请求方式</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">allowedMethods</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;GET&quot;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;POST&quot;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;DELETE&quot;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;PUT&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">// 设置允许的header属性</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">allowedHeaders</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;*&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">// 跨域允许时间</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">maxAge</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">3600</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="_4-6-拦截器" tabindex="-1">4.6 拦截器 <a class="header-anchor" href="#_4-6-拦截器" aria-hidden="true">#</a></h3><h4 id="_4-6-0-登录案例" tabindex="-1">4.6.0 登录案例 <a class="header-anchor" href="#_4-6-0-登录案例" aria-hidden="true">#</a></h4><h5 id="_4-6-0-1-思路分析" tabindex="-1">4.6.0.1 思路分析 <a class="header-anchor" href="#_4-6-0-1-思路分析" aria-hidden="true">#</a></h5><p>​ 在前后端分离的场景中，很多时候会采用token的方案进行登录校验。</p><p>​ 登录成功时，后端会根据一些用户信息生成token字符串返回给前端。</p><p>​ 前端会存储这个token。以后前端发送请求的时候如果有token就会把token放在请求头中发送给后端。</p><p>​ 后端接口就可以获得请求头中的token信息进行解析，如果解析不成功说明token超时了或者是不正确的token，相当于是未登录的状态。</p><p>​ 如果解析成功，说明前端是已经登录过的。</p><h5 id="_4-6-0-2-token生成方案-jwt" tabindex="-1">4.6.0.2 Token生成方案-JWT <a class="header-anchor" href="#_4-6-0-2-token生成方案-jwt" aria-hidden="true">#</a></h5><p>​ 本案例采用目前企业中运用比较多的JWT来生成token。</p><p>​ 使用时先引入相关依赖</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;io.jsonwebtoken&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;jjwt&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;0.9.0&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>​ 然后可以使用下面的工具类来生成和解析token</p><p>​ 然后可以使用下面的工具类来生成和解析token</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> io.jsonwebtoken.Claims;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> io.jsonwebtoken.JwtBuilder;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> io.jsonwebtoken.Jwts;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> io.jsonwebtoken.SignatureAlgorithm;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> javax.crypto.SecretKey;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> javax.crypto.spec.SecretKeySpec;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.util.Base64;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.util.Date;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.util.UUID;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">/**</span></span>
<span class="line"><span style="color:#8B949E;"> * JWT工具类</span></span>
<span class="line"><span style="color:#8B949E;"> */</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">JwtUtil</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//有效期为</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> Long</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">JWT_TTL</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">60</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">60</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">*</span><span style="color:#79C0FF;">1000L</span><span style="color:#C9D1D9;">;</span><span style="color:#8B949E;">// 60 * 60 *1000  一个小时</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//设置秘钥明文</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">final</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">JWT_KEY</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;sangeng&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">    /**</span></span>
<span class="line"><span style="color:#8B949E;">     * 创建token</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">id</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">subject</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">ttlMillis</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@return</span></span>
<span class="line"><span style="color:#8B949E;">     */</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">createJWT</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">id</span><span style="color:#C9D1D9;">, String </span><span style="color:#FFA657;">subject</span><span style="color:#C9D1D9;">, Long </span><span style="color:#FFA657;">ttlMillis</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        SignatureAlgorithm</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">signatureAlgorithm</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> SignatureAlgorithm.HS256;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">long</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">nowMillis</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> System.</span><span style="color:#D2A8FF;">currentTimeMillis</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        Date</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">now</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">Date</span><span style="color:#C9D1D9;">(nowMillis);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;">(ttlMillis</span><span style="color:#FF7B72;">==</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">            ttlMillis</span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">JwtUtil.JWT_TTL;</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">long</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">expMillis</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> nowMillis </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> ttlMillis;</span></span>
<span class="line"><span style="color:#C9D1D9;">        Date</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">expDate</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">Date</span><span style="color:#C9D1D9;">(expMillis);</span></span>
<span class="line"><span style="color:#C9D1D9;">        SecretKey</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">secretKey</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">generalKey</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        JwtBuilder</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">builder</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> Jwts.</span><span style="color:#D2A8FF;">builder</span><span style="color:#C9D1D9;">()</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">setId</span><span style="color:#C9D1D9;">(id)              </span><span style="color:#8B949E;">//唯一的ID</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">setSubject</span><span style="color:#C9D1D9;">(subject)   </span><span style="color:#8B949E;">// 主题  可以是JSON数据</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">setIssuer</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;sg&quot;</span><span style="color:#C9D1D9;">)     </span><span style="color:#8B949E;">// 签发者</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">setIssuedAt</span><span style="color:#C9D1D9;">(now)      </span><span style="color:#8B949E;">// 签发时间</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">signWith</span><span style="color:#C9D1D9;">(signatureAlgorithm, secretKey) </span><span style="color:#8B949E;">//使用HS256对称加密算法签名, 第二个参数为秘钥</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">setExpiration</span><span style="color:#C9D1D9;">(expDate);</span><span style="color:#8B949E;">// 设置过期时间</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> builder.</span><span style="color:#D2A8FF;">compact</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">    /**</span></span>
<span class="line"><span style="color:#8B949E;">     * 生成加密后的秘钥 secretKey</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@return</span></span>
<span class="line"><span style="color:#8B949E;">     */</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> SecretKey </span><span style="color:#D2A8FF;">generalKey</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">byte</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">encodedKey</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> Base64.</span><span style="color:#D2A8FF;">getDecoder</span><span style="color:#C9D1D9;">().</span><span style="color:#D2A8FF;">decode</span><span style="color:#C9D1D9;">(JwtUtil.JWT_KEY);</span></span>
<span class="line"><span style="color:#C9D1D9;">        SecretKey</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">key</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">SecretKeySpec</span><span style="color:#C9D1D9;">(encodedKey, </span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">, encodedKey.length, </span><span style="color:#A5D6FF;">&quot;AES&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> key;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#8B949E;">    /**</span></span>
<span class="line"><span style="color:#8B949E;">     * 解析</span></span>
<span class="line"><span style="color:#8B949E;">     *</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@param</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">jwt</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@return</span></span>
<span class="line"><span style="color:#8B949E;">     * </span><span style="color:#FF7B72;">@throws</span><span style="color:#8B949E;"> </span><span style="color:#FFA657;">Exception</span></span>
<span class="line"><span style="color:#8B949E;">     */</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">static</span><span style="color:#C9D1D9;"> Claims </span><span style="color:#D2A8FF;">parseJWT</span><span style="color:#C9D1D9;">(String </span><span style="color:#FFA657;">jwt</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">        SecretKey</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">secretKey</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">generalKey</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> Jwts.</span><span style="color:#D2A8FF;">parser</span><span style="color:#C9D1D9;">()</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">setSigningKey</span><span style="color:#C9D1D9;">(secretKey)</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">parseClaimsJws</span><span style="color:#C9D1D9;">(jwt)</span></span>
<span class="line"><span style="color:#C9D1D9;">                .</span><span style="color:#D2A8FF;">getBody</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div><h5 id="_4-6-0-3-登录接口实现" tabindex="-1">4.6.0.3 登录接口实现 <a class="header-anchor" href="#_4-6-0-3-登录接口实现" aria-hidden="true">#</a></h5><p>数据准备</p><div class="language-sql line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">DROP</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">TABLE</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">IF</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">EXISTS</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">\`sys_user\`</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#FF7B72;">CREATE</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">TABLE</span><span style="color:#C9D1D9;"> \`</span><span style="color:#D2A8FF;">sys_user</span><span style="color:#C9D1D9;">\` (</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#A5D6FF;">\`id\`</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">11</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">NOT NULL</span><span style="color:#C9D1D9;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#A5D6FF;">\`username\`</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">varchar</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">50</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">DEFAULT</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">NULL</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#A5D6FF;">\`password\`</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">varchar</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">50</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">DEFAULT</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">NULL</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#FF7B72;">PRIMARY KEY</span><span style="color:#C9D1D9;"> (</span><span style="color:#A5D6FF;">\`id\`</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">) ENGINE</span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">InnoDB AUTO_INCREMENT</span><span style="color:#FF7B72;">=</span><span style="color:#79C0FF;">3</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">DEFAULT</span><span style="color:#C9D1D9;"> CHARSET</span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">utf8;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">/*Data for the table \`sys_user\` */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">insert  into</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">\`sys_user\`</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">\`id\`</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">\`username\`</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">\`password\`</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">values</span><span style="color:#C9D1D9;"> (</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;root&#39;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;root&#39;</span><span style="color:#C9D1D9;">),(</span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;sangeng&#39;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&#39;caotang&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>实体类</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Data</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">SystemUser</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">id;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">username;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">password;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>SystemUserController</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">package</span><span style="color:#C9D1D9;"> com.dunxi.controller;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> com.dunxi.domain.ResponseResult;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> com.dunxi.domain.SystemUser;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> com.dunxi.service.SystemUserService;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> com.dunxi.service.UserService;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> com.dunxi.utils.JwtUtil;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> io.jsonwebtoken.Jwt;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.beans.factory.annotation.Autowired;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.web.bind.annotation.PostMapping;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.web.bind.annotation.RequestBody;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.web.bind.annotation.RequestMapping;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> org.springframework.web.bind.annotation.RestController;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.util.HashMap;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.util.Map;</span></span>
<span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> java.util.UUID;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/sys_user&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">SystemUserController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> SystemUserService</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">PostMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/login&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> ResponseResult </span><span style="color:#D2A8FF;">login</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">RequestBody</span><span style="color:#C9D1D9;"> SystemUser </span><span style="color:#FFA657;">user</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//校验用户名密码是否正确</span></span>
<span class="line"><span style="color:#C9D1D9;">        SystemUser</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">loginUser</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> userService.</span><span style="color:#D2A8FF;">login</span><span style="color:#C9D1D9;">(user);</span></span>
<span class="line"><span style="color:#C9D1D9;">        Map</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">, </span><span style="color:#FF7B72;">Object</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">map;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (loginUser </span><span style="color:#FF7B72;">!=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">//如果正确 生成token</span></span>
<span class="line"><span style="color:#C9D1D9;">            map </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> HashMap&lt;&gt;();</span></span>
<span class="line"><span style="color:#C9D1D9;">            String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">token</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> JwtUtil.</span><span style="color:#D2A8FF;">createJWT</span><span style="color:#C9D1D9;">(UUID.</span><span style="color:#D2A8FF;">randomUUID</span><span style="color:#C9D1D9;">().</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">(), String.</span><span style="color:#D2A8FF;">valueOf</span><span style="color:#C9D1D9;">(loginUser.</span><span style="color:#D2A8FF;">getId</span><span style="color:#C9D1D9;">()), </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">            map.</span><span style="color:#D2A8FF;">put</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;token&quot;</span><span style="color:#C9D1D9;">,token);</span></span>
<span class="line"><span style="color:#C9D1D9;">        } </span><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">//如果不正确 给出相应提示</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ResponseResult</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">300</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;用户名或密码错误，请重新登录&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ResponseResult</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">200</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;登录成功&quot;</span><span style="color:#C9D1D9;">, map);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>Service</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">SystemUserService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> SystemUser </span><span style="color:#D2A8FF;">login</span><span style="color:#C9D1D9;">(SystemUser </span><span style="color:#FFA657;">user</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">SystemUserServiceImpl</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">SystemUserService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> SystemUserMapper</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">systemUserMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Override</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> SystemUser </span><span style="color:#D2A8FF;">login</span><span style="color:#C9D1D9;">(SystemUser </span><span style="color:#FFA657;">user</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        SystemUser</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">loginUser</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> systemUserMapper.</span><span style="color:#D2A8FF;">login</span><span style="color:#C9D1D9;">(user);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> loginUser;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>dao</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Mapper</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Repository</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">SystemUserMapper</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    SystemUser </span><span style="color:#D2A8FF;">login</span><span style="color:#C9D1D9;">(SystemUser </span><span style="color:#FFA657;">user</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;?</span><span style="color:#7EE787;">xml</span><span style="color:#79C0FF;"> version</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;1.0&quot;</span><span style="color:#79C0FF;"> encoding</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;UTF-8&quot;</span><span style="color:#C9D1D9;"> ?&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;!</span><span style="color:#FF7B72;">DOCTYPE</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">mapper</span><span style="color:#C9D1D9;"> PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">mapper</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">namespace</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.mapper.SystemUserMapper&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;</span><span style="color:#7EE787;">select</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">id</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;login&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">resultType</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;com.dunxi.domain.SystemUser&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        select * from sys_user where username = #{username} and password=#{password}</span></span>
<span class="line"><span style="color:#C9D1D9;">    &lt;/</span><span style="color:#7EE787;">select</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">mapper</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="_4-6-0-4-登录页面" tabindex="-1">4.6.0.4 登录页面 <a class="header-anchor" href="#_4-6-0-4-登录页面" aria-hidden="true">#</a></h5><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">src</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">src</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">var</span><span style="color:#C9D1D9;"> v </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">Vue</span><span style="color:#C9D1D9;">({</span></span>
<span class="line"><span style="color:#C9D1D9;">        el:</span><span style="color:#A5D6FF;">&quot;#app&quot;</span><span style="color:#C9D1D9;">,</span></span>
<span class="line"><span style="color:#C9D1D9;">        data:{</span></span>
<span class="line"><span style="color:#C9D1D9;">            user:{}</span></span>
<span class="line"><span style="color:#C9D1D9;">        },</span></span>
<span class="line"><span style="color:#C9D1D9;">        methods:{</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#D2A8FF;">handleLogin</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">//请求后台登录接口，把接收到的数据渲染展示在页面中</span></span>
<span class="line"><span style="color:#C9D1D9;">                axios.</span><span style="color:#D2A8FF;">post</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;http://localhost:80/sys_user/login&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">this</span><span style="color:#C9D1D9;">.user).</span><span style="color:#D2A8FF;">then</span><span style="color:#C9D1D9;">((</span><span style="color:#FFA657;">res</span><span style="color:#C9D1D9;">)</span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;">{</span></span>
<span class="line"><span style="color:#C9D1D9;">                    </span><span style="color:#8B949E;">// console.log(res);</span></span>
<span class="line"><span style="color:#C9D1D9;">                    </span><span style="color:#8B949E;">//判断是否成功</span></span>
<span class="line"><span style="color:#C9D1D9;">                    </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;">(res.data.code </span><span style="color:#FF7B72;">==</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">200</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">                        </span><span style="color:#8B949E;">//登录成功</span></span>
<span class="line"><span style="color:#C9D1D9;">                        </span><span style="color:#8B949E;">// alert(&quot;登录成功&quot;)</span></span>
<span class="line"><span style="color:#C9D1D9;">                        </span><span style="color:#8B949E;">//存储token</span></span>
<span class="line"><span style="color:#C9D1D9;">                        localStorage.</span><span style="color:#D2A8FF;">setItem</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;token&quot;</span><span style="color:#C9D1D9;">,res.data.data.token);</span></span>
<span class="line"><span style="color:#C9D1D9;">                        </span><span style="color:#8B949E;">//跳转页面到index.html</span></span>
<span class="line"><span style="color:#C9D1D9;">                        location.href </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;/index.html&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">                    }</span><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;">{</span></span>
<span class="line"><span style="color:#C9D1D9;">                        </span><span style="color:#8B949E;">//登录失败</span></span>
<span class="line"><span style="color:#C9D1D9;">                        </span><span style="color:#D2A8FF;">alert</span><span style="color:#C9D1D9;">(res.data.msg)</span></span>
<span class="line"><span style="color:#C9D1D9;">                    }</span></span>
<span class="line"><span style="color:#C9D1D9;">                })</span><span style="color:#8B949E;">/*.catch(()=&gt;{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">               })*/</span></span>
<span class="line"><span style="color:#C9D1D9;">            }</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">    });</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h4 id="_4-6-1-拦截器的概念" tabindex="-1">4.6.1 拦截器的概念 <a class="header-anchor" href="#_4-6-1-拦截器的概念" aria-hidden="true">#</a></h4><p>​ 如果我们想在多个Handler方法执行之前或者之后都进行一些处理，甚至某些情况下需要拦截掉，不让Handler方法执行。那么可以使用SpringMVC为我们提供的拦截器。</p><h4 id="_4-6-1-使用步骤" tabindex="-1">4.6.1 使用步骤 <a class="header-anchor" href="#_4-6-1-使用步骤" aria-hidden="true">#</a></h4><h5 id="_1创建类实现handlerinterceptor接口" tabindex="-1">①创建类实现HandlerInterceptor接口 <a class="header-anchor" href="#_1创建类实现handlerinterceptor接口" aria-hidden="true">#</a></h5><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">LoginInterceptor</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">HandlerInterceptor</span><span style="color:#C9D1D9;"> {}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="_2实现方法" tabindex="-1">②实现方法 <a class="header-anchor" href="#_2实现方法" aria-hidden="true">#</a></h5><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">LoginInterceptor</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">HandlerInterceptor</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Override</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">boolean</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">preHandle</span><span style="color:#C9D1D9;">(HttpServletRequest </span><span style="color:#FFA657;">request</span><span style="color:#C9D1D9;">, HttpServletResponse </span><span style="color:#FFA657;">response</span><span style="color:#C9D1D9;">, Object </span><span style="color:#FFA657;">handler</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//获取请求头中的token</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">token</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> request.</span><span style="color:#D2A8FF;">getHeader</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;token&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//判断token是否为空，如果为空也代表未登录</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">!</span><span style="color:#C9D1D9;">StringUtils.</span><span style="color:#D2A8FF;">hasText</span><span style="color:#C9D1D9;">(token)){</span></span>
<span class="line"><span style="color:#C9D1D9;">            response.</span><span style="color:#D2A8FF;">sendError</span><span style="color:#C9D1D9;">(HttpServletResponse.SC_UNAUTHORIZED) ;</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//解析token判断看看是否成功</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">            Claims</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">claims</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> JwtUtil.</span><span style="color:#D2A8FF;">parseJWT</span><span style="color:#C9D1D9;">(token);</span></span>
<span class="line"><span style="color:#C9D1D9;">            String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">subject</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> claims.</span><span style="color:#D2A8FF;">getSubject</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">            System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(subject);</span></span>
<span class="line"><span style="color:#C9D1D9;">        } </span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;"> (Exception </span><span style="color:#FFA657;">e</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            e.</span><span style="color:#D2A8FF;">printStackTrace</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">//如果解析过程中没有出现异常,说明是登录状态</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">//如果出现了异常,说明未登录,提醒重新登录(401)</span></span>
<span class="line"><span style="color:#C9D1D9;">            response.</span><span style="color:#D2A8FF;">sendError</span><span style="color:#C9D1D9;">(HttpServletResponse.SC_UNAUTHORIZED) ;</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h5 id="_3配置拦截器" tabindex="-1">③配置拦截器 <a class="header-anchor" href="#_3配置拦截器" aria-hidden="true">#</a></h5><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Configuration</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">LoginConfig</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">WebMvcConfigurer</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> LoginInterceptor</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">loginInterceptor;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Override</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">addInterceptors</span><span style="color:#C9D1D9;">(InterceptorRegistry </span><span style="color:#FFA657;">registry</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        registry.</span><span style="color:#D2A8FF;">addInterceptor</span><span style="color:#C9D1D9;">(loginInterceptor)</span><span style="color:#8B949E;">//添加拦截器</span></span>
<span class="line"><span style="color:#C9D1D9;">        .</span><span style="color:#D2A8FF;">addPathPatterns</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/**&quot;</span><span style="color:#C9D1D9;">)</span><span style="color:#8B949E;">//配置拦截路径</span></span>
<span class="line"><span style="color:#C9D1D9;">        .</span><span style="color:#D2A8FF;">excludePathPatterns</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/sys_user/login&quot;</span><span style="color:#C9D1D9;">);</span><span style="color:#8B949E;">//配置排除路径</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>4.7 异常统一处理</p><h5 id="_1创建类加上-controlleradvice注解进行标识" tabindex="-1">①创建类加上@ControllerAdvice注解进行标识 <a class="header-anchor" href="#_1创建类加上-controlleradvice注解进行标识" aria-hidden="true">#</a></h5><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ControllerAdvice</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyControllerAdvice</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h5 id="_2定义异常处理方法" tabindex="-1">②定义异常处理方法 <a class="header-anchor" href="#_2定义异常处理方法" aria-hidden="true">#</a></h5><p>​ 定义异常处理方法，使用**@ExceptionHandler**标识可以处理的异常。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">ControllerAdvice</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MyControllerAdvice</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">ExceptionHandler</span><span style="color:#C9D1D9;">(RuntimeException.class)</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">ResponseBody</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> ResponseResult </span><span style="color:#D2A8FF;">handlerException</span><span style="color:#C9D1D9;">(Exception </span><span style="color:#FFA657;">e</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//获取异常信息，存入ResponseRust的msg属性</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">message</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> e.</span><span style="color:#D2A8FF;">getMessage</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        ResponseResult</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">result</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ResponseResult</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">300</span><span style="color:#C9D1D9;">,message);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//把ResponseRust作为返回值返回，要求到时候转换成json存入响应体中</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> result;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_4-8-获取web原生对象" tabindex="-1">4.8 获取web原生对象 <a class="header-anchor" href="#_4-8-获取web原生对象" aria-hidden="true">#</a></h3><p>​ 我们只需要在方法上添加对应类型的参数即可，但是注意数据类型不要写错了，SpringMVC会把我们需要的对象传给我们的形参。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">TestController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/getRequestAndResponse&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> ResponseResult </span><span style="color:#D2A8FF;">getRequestAndResponse</span><span style="color:#C9D1D9;">(HttpServletResponse </span><span style="color:#FFA657;">response</span><span style="color:#C9D1D9;">, HttpServletRequest </span><span style="color:#FFA657;">request</span><span style="color:#C9D1D9;">, HttpSession </span><span style="color:#FFA657;">session</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(request);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ResponseResult</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">200</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;成功&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_4-9-自定义参数解析" tabindex="-1">4.9 自定义参数解析 <a class="header-anchor" href="#_4-9-自定义参数解析" aria-hidden="true">#</a></h3><p>​ 如果我们想实现像获取请求体中的数据那样，在Handler方法的参数上增加一个@RequestBody注解就可以获取到对应的数据的话。</p><p>​ 可以使用HandlerMethodArgumentResolver来实现自定义参数解析。</p><p>①定义用来标识的注解</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Target</span><span style="color:#C9D1D9;">(ElementType.PARAMETER)</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Retention</span><span style="color:#C9D1D9;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> @</span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">CurrentUserId</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>②创建类实现HandlerMethodArgumentResolver接口并重写其中的方法</p><p><strong>注意加上@Component注解注入Spring容器</strong></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserIdArgumentResolver</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">HandlerMethodArgumentResolver</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//判断方法参数是否能使用当前的参数解析器进行解析</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Override</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">boolean</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">supportsParameter</span><span style="color:#C9D1D9;">(MethodParameter </span><span style="color:#FFA657;">methodParameter</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//如果方法参数有加上CurrentUserId注解，就能被我们的解析器所解析</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> methodParameter.</span><span style="color:#D2A8FF;">hasParameterAnnotation</span><span style="color:#C9D1D9;">(CurrentUserId.class);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//进行参数解析的方法，可以在方法中获取对应的数据，然后把数据作为返回值返回，方法的返回值就会赋值给对应的方法参数</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Override</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Object </span><span style="color:#D2A8FF;">resolveArgument</span><span style="color:#C9D1D9;">(MethodParameter </span><span style="color:#FFA657;">methodParameter</span><span style="color:#C9D1D9;">, ModelAndViewContainer </span><span style="color:#FFA657;">modelAndViewContainer</span><span style="color:#C9D1D9;">, NativeWebRequest </span><span style="color:#FFA657;">nativeWebRequest</span><span style="color:#C9D1D9;">, WebDataBinderFactory </span><span style="color:#FFA657;">webDataBinderFactory</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//获取请求头中的token</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">token</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> nativeWebRequest.</span><span style="color:#D2A8FF;">getHeader</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;token&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//解析token，获取userId</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (StringUtils.</span><span style="color:#D2A8FF;">hasText</span><span style="color:#C9D1D9;">(token)){</span></span>
<span class="line"><span style="color:#C9D1D9;">            Claims</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">claims</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> JwtUtil.</span><span style="color:#D2A8FF;">parseJWT</span><span style="color:#C9D1D9;">(token);</span></span>
<span class="line"><span style="color:#C9D1D9;">            String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userId</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> claims.</span><span style="color:#D2A8FF;">getSubject</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> userId;</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//返回结果</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>③配置参数解析器</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Configuration</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ArgumentResolverConfig</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">WebMvcConfigurer</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> UserIdArgumentResolver</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userIdArgumentResolver;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Override</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">addArgumentResolvers</span><span style="color:#C9D1D9;">(List&lt;</span><span style="color:#FF7B72;">HandlerMethodArgumentResolver</span><span style="color:#C9D1D9;">&gt; </span><span style="color:#FFA657;">resolvers</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        resolvers.</span><span style="color:#D2A8FF;">add</span><span style="color:#C9D1D9;">(userIdArgumentResolver);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>④测试</p><p>在需要获取UserId的方法中增加对应的方法参数，然后使用@CurrentUserId进行标识即可获取到数据</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/user&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">RestController</span></span>
<span class="line"><span style="color:#8B949E;">//@CrossOrigin</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> UserService</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/findAll&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> ResponseResult </span><span style="color:#D2A8FF;">findAll</span><span style="color:#C9D1D9;">(@</span><span style="color:#FF7B72;">CurrentUserId</span><span style="color:#C9D1D9;"> String </span><span style="color:#FFA657;">userId</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">throws</span><span style="color:#C9D1D9;"> Exception {</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(userId);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//调用service查询数据，进行返回</span></span>
<span class="line"><span style="color:#C9D1D9;">        List</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">User</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">users</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> userService.</span><span style="color:#D2A8FF;">findAll</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">ResponseResult</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">200</span><span style="color:#C9D1D9;">,users);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_4-10-声明式事务" tabindex="-1">4.10 声明式事务 <a class="header-anchor" href="#_4-10-声明式事务" aria-hidden="true">#</a></h3><p>​ 直接在需要事务控制的方法上加上对应的注解@Transactional，如果方法执行的过程中出现了异常，回滚到之前的版本。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserServiceImpl</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">UserService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> UserMapper</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Override</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> List&lt;</span><span style="color:#FF7B72;">User</span><span style="color:#C9D1D9;">&gt; </span><span style="color:#D2A8FF;">findAll</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> userMapper.</span><span style="color:#D2A8FF;">findAll</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Override</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Transactional</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">insertUser</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//添加两个用户</span></span>
<span class="line"><span style="color:#C9D1D9;">        User</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">user</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;dunxi&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">15</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;泰安&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        User</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">user2</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">User</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;dunxi2&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">13</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;济南&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        userMapper.</span><span style="color:#D2A8FF;">insertUser</span><span style="color:#C9D1D9;">(user);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">1</span><span style="color:#FF7B72;">/</span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        userMapper.</span><span style="color:#D2A8FF;">insertUser</span><span style="color:#C9D1D9;">(user2);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="_4-11-aop" tabindex="-1">4.11 AOP <a class="header-anchor" href="#_4-11-aop" aria-hidden="true">#</a></h3><p>​ AOP详细知识学习见：<a href="https://space.bilibili.com/663528522" target="_blank" rel="noreferrer">https://space.bilibili.com/663528522</a> 中的Spring教程</p><p>​ 在SpringBoot中默认是开启AOP功能的。如果不想开启AOP功能可以使用如下配置设置为false</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">aop</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">auto</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_4-11-1-使用步骤" tabindex="-1">4.11.1 使用步骤 <a class="header-anchor" href="#_4-11-1-使用步骤" aria-hidden="true">#</a></h4><p>①添加依赖</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework.boot&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-boot-starter-aop&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>②自定义注解</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Target</span><span style="color:#C9D1D9;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Retention</span><span style="color:#C9D1D9;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> @</span><span style="color:#FF7B72;">interface</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">InvokeLog</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>③定义切面类</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Aspect</span><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">//标识这是一个切面类</span></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Component</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">InvokeLogAspect</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//确定切点</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Pointcut</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;@annotation(com.dunxi.aop.InvokeLog)&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">pt</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Around</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;pt()&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> Object </span><span style="color:#D2A8FF;">printInvokeLog</span><span style="color:#C9D1D9;">(ProceedingJoinPoint </span><span style="color:#FFA657;">joinPoint</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//目标方法调用前</span></span>
<span class="line"><span style="color:#C9D1D9;">        Object</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">proceed</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">null</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        MethodSignature</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">signature</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (MethodSignature) joinPoint.</span><span style="color:#D2A8FF;">getSignature</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">methodName</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> signature.</span><span style="color:#D2A8FF;">getMethod</span><span style="color:#C9D1D9;">().</span><span style="color:#D2A8FF;">getName</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(methodName</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;即将被调用&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">try</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">            proceed </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> joinPoint.</span><span style="color:#D2A8FF;">proceed</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">//目标方法调用后</span></span>
<span class="line"><span style="color:#C9D1D9;">            System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(methodName</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;被调用&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        } </span><span style="color:#FF7B72;">catch</span><span style="color:#C9D1D9;"> (Throwable </span><span style="color:#FFA657;">throwable</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            throwable.</span><span style="color:#D2A8FF;">printStackTrace</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">//目标方法出现异常了</span></span>
<span class="line"><span style="color:#C9D1D9;">            System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(methodName</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;出现了异常&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> proceed;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>④在需要增强的地方增加对应的注解</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Service</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">UserServiceImpl</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">implements</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">UserService</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> UserMapper</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userMapper;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Override</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">InvokeLog</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> List&lt;</span><span style="color:#FF7B72;">User</span><span style="color:#C9D1D9;">&gt; </span><span style="color:#D2A8FF;">findAll</span><span style="color:#C9D1D9;">() {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> userMapper.</span><span style="color:#D2A8FF;">findAll</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="_4-11-2-切换动态代理" tabindex="-1">4.11.2 切换动态代理 <a class="header-anchor" href="#_4-11-2-切换动态代理" aria-hidden="true">#</a></h4><p>​ 有的时候我们需要修改AOP的代理方式.</p><p>​ 我们可以使用以下方式修改:</p><p>​ 在配置文件中配置spring.aop.proxy-target-class为false这为使用jdk动态代理.该配置默认为true,代表使用cglib动态代理.</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">aop</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">proxy-target-class</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">false</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">#切换动态代理的方式</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_4-12-模板引擎相关-thymeleaf" tabindex="-1">4.12 模板引擎相关-Thymeleaf <a class="header-anchor" href="#_4-12-模板引擎相关-thymeleaf" aria-hidden="true">#</a></h3><h4 id="_4-12-1-快速入门" tabindex="-1">4.12.1 快速入门 <a class="header-anchor" href="#_4-12-1-快速入门" aria-hidden="true">#</a></h4><h5 id="_4-12-1-1-依赖" tabindex="-1">4.12.1.1 依赖 <a class="header-anchor" href="#_4-12-1-1-依赖" aria-hidden="true">#</a></h5><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--thymeleaf依赖--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework.boot&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-boot-starter-thymeleaf&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="_4-12-1-2-定义controller" tabindex="-1">4.12.1.2 定义Controller <a class="header-anchor" href="#_4-12-1-2-定义controller" aria-hidden="true">#</a></h5><p>在controller中往域中存放数据,并且跳转</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Controller</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">ThymeleafController</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> UserService</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userService;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">RequestMapping</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;/thymeleaf/users&quot;</span><span style="color:#C9D1D9;">)</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> String </span><span style="color:#D2A8FF;">users</span><span style="color:#C9D1D9;">(Model </span><span style="color:#FFA657;">model</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//获取数据</span></span>
<span class="line"><span style="color:#C9D1D9;">        List</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">User</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">users</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> userService.</span><span style="color:#D2A8FF;">findAll</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//往域中存入数据</span></span>
<span class="line"><span style="color:#C9D1D9;">        model.</span><span style="color:#D2A8FF;">addAttribute</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;users&quot;</span><span style="color:#C9D1D9;">,users);</span></span>
<span class="line"><span style="color:#C9D1D9;">        model.</span><span style="color:#D2A8FF;">addAttribute</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;msg&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;hello thymeleaf&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//页面跳转</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;table-standard&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>4.12.1.3 html</p><p>在<strong>resources\\templates</strong>下存放模板页面.</p><p>在html标签中加上xmlns:th=&quot;<a href="http://www.thymeleaf.org" target="_blank" rel="noreferrer">http://www.thymeleaf.org</a>&quot;</p><p>获取域中的name属性的值可以使用:\${name} 注意要在th开头的属性中使用</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">html</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">lang</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;en&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;no-ie&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">xmlns:th</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;http://www.thymeleaf.org&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    ....</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">div</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">class</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;panel-heading&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:text</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${msg}&quot;</span><span style="color:#C9D1D9;">&gt;Kitchen Sink&lt;/</span><span style="color:#7EE787;">div</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果需要引入静态资源，需要使用如下写法。</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">link</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">rel</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;stylesheet&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:href</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;@{/app/css/bootstrap.css}&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!-- Vendor CSS--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">link</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">rel</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;stylesheet&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:href</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;@{/vendor/fontawesome/css/font-awesome.min.css}&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">link</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">rel</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;stylesheet&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:href</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;@{/vendor/animo/animate+animo.css}&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">link</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">rel</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;stylesheet&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:href</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;@{/vendor/csspinner/csspinner.min.css}&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!-- START Page Custom CSS--&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!-- END Page Custom CSS--&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!-- App CSS--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">link</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">rel</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;stylesheet&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:href</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;@{/app/css/app.css}&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!-- Modernizr JS Script--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:src</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;@{/vendor/modernizr/modernizr.js}&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">type</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;application/javascript&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#8B949E;">&lt;!-- FastClick for mobiles--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:src</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;@{/vendor/fastclick/fastclick.js}&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">type</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;application/javascript&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">script</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>遍历语法:遍历的语法 th:each=&quot;自定义的元素变量名称：\${集合变量名称}&quot;</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">tr</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:each</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;user:\${users}&quot;</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">   &lt;</span><span style="color:#7EE787;">td</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:text</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${user.id}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">td</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">   &lt;</span><span style="color:#7EE787;">td</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:text</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${user.username}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">td</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">   &lt;</span><span style="color:#7EE787;">td</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:text</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${user.age}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">td</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">   &lt;</span><span style="color:#7EE787;">td</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">th:text</span><span style="color:#C9D1D9;">=</span><span style="color:#A5D6FF;">&quot;\${user.address}&quot;</span><span style="color:#C9D1D9;">&gt;&lt;/</span><span style="color:#7EE787;">td</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">tr</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_5-整合redis" tabindex="-1">5.整合Redis <a class="header-anchor" href="#_5-整合redis" aria-hidden="true">#</a></h3><h3 id="_1依赖" tabindex="-1">①依赖 <a class="header-anchor" href="#_1依赖" aria-hidden="true">#</a></h3><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">&lt;!--redis--&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework.boot&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_2配置redis地址和端口号" tabindex="-1">②配置Redis地址和端口号 <a class="header-anchor" href="#_2配置redis地址和端口号" aria-hidden="true">#</a></h3><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">redis</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">host</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">127.0.0.1</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">#redis服务器ip地址</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">port</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">6379</span><span style="color:#C9D1D9;">  </span><span style="color:#8B949E;">#redis端口号</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3注入redistemplate使用" tabindex="-1">③注入RedisTemplate使用 <a class="header-anchor" href="#_3注入redistemplate使用" aria-hidden="true">#</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Autowired</span></span>
<span class="line"><span style="color:#FF7B72;">private</span><span style="color:#C9D1D9;"> StringRedisTemplate</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">redisTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">@</span><span style="color:#FF7B72;">Test</span></span>
<span class="line"><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">testRedis</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">    redisTemplate.</span><span style="color:#D2A8FF;">opsForValue</span><span style="color:#C9D1D9;">().</span><span style="color:#D2A8FF;">set</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;name&quot;</span><span style="color:#C9D1D9;">,</span><span style="color:#A5D6FF;">&quot;三更&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="_6-环境切换" tabindex="-1">6.环境切换 <a class="header-anchor" href="#_6-环境切换" aria-hidden="true">#</a></h2><h3 id="_6-1-为什么要使用profile" tabindex="-1">6.1 为什么要使用profile <a class="header-anchor" href="#_6-1-为什么要使用profile" aria-hidden="true">#</a></h3><p>​ 在实际项目开发环境中，我们存放在开发环境的配置，部署环境的配置，测试环境的配置等等，里面的配置信息很多时，例如：端口、上下文路径、数据库配置等等、若每次初切环境时，我们都需要修改这些信息，会比较麻烦，profile的出现就是为了解决这个问题。它可以让我们针对不同的环境进行不同的配置，然后可以通过激活、指定参数等方式来快速切换环境。</p><h3 id="_6-2-使用" tabindex="-1">6.2 使用 <a class="header-anchor" href="#_6-2-使用" aria-hidden="true">#</a></h3><h4 id="_6-2-1-创建profile配置文件" tabindex="-1">6.2.1 创建profile配置文件 <a class="header-anchor" href="#_6-2-1-创建profile配置文件" aria-hidden="true">#</a></h4><p>​ 我们可以使用application-xxx.yaml的命名方式来创建配置文件，其中xxxx可以根据自己的需求来定义。</p><p>例如：</p><p>​ 我们需要一个测试环境的配置文件，则可以命名为：application-test.yaml</p><p>​ 需要一个生产环境的配置文件，可以命名为：application-prod.yaml</p><p>我们可以不同环境下不同的配置放到对应的profile文件中进行配置。然后把不同环境下都相同的配置放到application.yaml文件中配置。</p><h4 id="_6-2-2-激活环境" tabindex="-1">6.2.2 激活环境 <a class="header-anchor" href="#_6-2-2-激活环境" aria-hidden="true">#</a></h4><p>​ 我们可以在application.yaml文件中使用spring.profiles.active属性来配置激活哪个环境</p><p>​ 也可以使用虚拟机参数来指定激活环境.例如:-Dspring.proflies.active=test</p><p>​ 也可以使用命令行参数来激活环境.例如: --spring.profiles.active =test</p><h2 id="_7-日志" tabindex="-1">7.日志 <a class="header-anchor" href="#_7-日志" aria-hidden="true">#</a></h2><p>​ 开启日志</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">debug</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">#开启日志</span></span>
<span class="line"><span style="color:#7EE787;">logging</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">level</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">com.sangeng</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">debug</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">#设置日志级别</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_8-指标监控" tabindex="-1">8.指标监控 <a class="header-anchor" href="#_8-指标监控" aria-hidden="true">#</a></h2><p>​ 我们在日常开发中需要对程序内部的运行情况进行监控,比如:健康度,运行指标,日志信息,线程状况,等等.而SpringBoot的监控,Actuator就可以帮我们解决这些问题.</p><h3 id="_8-1-使用" tabindex="-1">8.1 使用 <a class="header-anchor" href="#_8-1-使用" aria-hidden="true">#</a></h3><p>①添加依赖</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">&lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;org.springframework.boot&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">  &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-boot-starter-actuator&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">&lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>②访问监控接口</p><p><code>http://localhost:81/actuator</code></p><p>③配置启用监控端点</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">management</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">endpoints</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">enabled-by-default</span><span style="color:#C9D1D9;">: </span><span style="color:#79C0FF;">true</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">#配置启用所有端点</span></span>
<span class="line"><span style="color:#C9D1D9;"> </span><span style="color:#7EE787;">web</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#7EE787;">exposure</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#7EE787;">include</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">&quot;*&quot;</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">#web端暴露所有端点</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_8-2-常用端点" tabindex="-1">8.2 常用端点 <a class="header-anchor" href="#_8-2-常用端点" aria-hidden="true">#</a></h3><table><thead><tr><th style="text-align:left;">端点名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>beans</code></td><td style="text-align:left;">显示应用程序中所有Spring Bean的完整列表。</td></tr><tr><td style="text-align:left;"><code>health</code></td><td style="text-align:left;">显示应用程序运行状况信息。</td></tr><tr><td style="text-align:left;"><code>info</code></td><td style="text-align:left;">显示应用程序信息。</td></tr><tr><td style="text-align:left;"><code>loggers</code></td><td style="text-align:left;">显示和修改应用程序中日志的配置。</td></tr><tr><td style="text-align:left;"><code>metrics</code></td><td style="text-align:left;">显示当前应用程序的“指标”信息。</td></tr><tr><td style="text-align:left;"><code>mappings</code></td><td style="text-align:left;">显示所有<code>@RequestMapping</code>路径列表。</td></tr><tr><td style="text-align:left;"><code>scheduledtasks</code></td><td style="text-align:left;">显示应用程序中的计划任务。</td></tr></tbody></table><p>8.3 图形化界面 SpringBoot Admin</p><p>①创建SpringBoot Admin Server应用</p><p>要求引入spring-boot-admin-starter-server依赖</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;de.codecentric&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-boot-admin-starter-server&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>然后在启动类上加上@EnableAdminServer注解</p><p>②配置SpringBoot Admin client应用</p><p>在需要监控的应用中加上spring-boot-admin-starter-client依赖</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">        &lt;</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;de.codecentric&lt;/</span><span style="color:#7EE787;">groupId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;spring-boot-admin-starter-client&lt;/</span><span style="color:#7EE787;">artifactId</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">            &lt;</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;2.3.1&lt;/</span><span style="color:#7EE787;">version</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        &lt;/</span><span style="color:#7EE787;">dependency</span><span style="color:#C9D1D9;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>然后配置SpringBoot Admin Server的地址</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#7EE787;">spring</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">  </span><span style="color:#7EE787;">boot</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">admin</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">      </span><span style="color:#7EE787;">client</span><span style="color:#C9D1D9;">:</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#7EE787;">url</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">http://localhost:8888</span><span style="color:#C9D1D9;"> </span><span style="color:#8B949E;">#配置 Admin Server的地址</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h6 id="小练习" tabindex="-1">小练习 <a class="header-anchor" href="#小练习" aria-hidden="true">#</a></h6><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">    @</span><span style="color:#FF7B72;">Test</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">testVolunteer</span><span style="color:#C9D1D9;">(){</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//考生分数</span></span>
<span class="line"><span style="color:#C9D1D9;">        Segment22</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">segment22</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">Segment22</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">467</span><span style="color:#C9D1D9;">,</span><span style="color:#79C0FF;">208438</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//线差法计算今年考的分数对应去年的分数</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">double</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">fractionDif</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> segment22.</span><span style="color:#D2A8FF;">getFraction</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;"> (</span><span style="color:#79C0FF;">437</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">444</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(fractionDif);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//两年的比例</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//21年本科线排名/22年本科线排名*22年排名=21年排名=21年分数</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">double</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">scale</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">double</span><span style="color:#C9D1D9;">) </span><span style="color:#79C0FF;">274805</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">/</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">301611</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//计算今年对应去年的位次</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">rank</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;">) (scale </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> segment22.</span><span style="color:#D2A8FF;">getAddUp</span><span style="color:#C9D1D9;">());</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(rank);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//查表</span></span>
<span class="line"><span style="color:#C9D1D9;">        List</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">Integer</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">list</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> sm.</span><span style="color:#D2A8FF;">selectAddUp</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//根据换算后的位次查出对应21年的排名</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">addUp21</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">search</span><span style="color:#C9D1D9;">(list, rank);</span></span>
<span class="line"><span style="color:#C9D1D9;">        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(addUp21);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//用排名去查出对应的分数</span></span>
<span class="line"><span style="color:#C9D1D9;">        Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">fraction21</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> sm.</span><span style="color:#D2A8FF;">selectByaddUp</span><span style="color:#C9D1D9;">(addUp21);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//取两个方法的平均值，降低一下误差</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">aveScore</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;">) ((fraction21 </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> fractionDif) </span><span style="color:#FF7B72;">/</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//根据平均成绩查表，对应位次</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">aveRank</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">search</span><span style="color:#C9D1D9;">(list,aveScore);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#8B949E;">//用户21年的成绩和位次</span></span>
<span class="line"><span style="color:#C9D1D9;">        Segment21</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">userSegment</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">Segment21</span><span style="color:#C9D1D9;">(aveScore,aveRank);</span></span>
<span class="line"><span style="color:#8B949E;">//        Segment21 userSegment = new Segment21(467,208438);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        List</span><span style="color:#FFA657;">&lt;</span><span style="color:#FF7B72;">VolunteerContent</span><span style="color:#FFA657;">&gt; </span><span style="color:#C9D1D9;">volunteerContents</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="color:#C9D1D9;">        String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">s</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;3-2-1&quot;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">String</span><span style="color:#FFA657;">[] </span><span style="color:#C9D1D9;">subjects</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> SubjectUtils.</span><span style="color:#D2A8FF;">getSubjects</span><span style="color:#C9D1D9;">(s);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">for</span><span style="color:#C9D1D9;"> (String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">subject</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> subjects) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            volunteerContents.</span><span style="color:#D2A8FF;">addAll</span><span style="color:#C9D1D9;">(vcm.</span><span style="color:#D2A8FF;">selectBySubject</span><span style="color:#C9D1D9;">(subject));</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        userSegment.</span><span style="color:#D2A8FF;">setFraction</span><span style="color:#C9D1D9;">(</span><span style="color:#79C0FF;">650</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#8B949E;">//        VolunteerContent volunteerContent = new VolunteerContent(208438,467);</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">for</span><span style="color:#C9D1D9;"> (VolunteerContent</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">volunteerContent</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> volunteerContents) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;">(volunteerContent.</span><span style="color:#D2A8FF;">getLowestScore</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">&gt;=</span><span style="color:#C9D1D9;"> userSegment.</span><span style="color:#D2A8FF;">getFraction</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">&amp;&amp;</span><span style="color:#C9D1D9;"> volunteerContent.</span><span style="color:#D2A8FF;">getLowestScore</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">&lt;=</span><span style="color:#C9D1D9;"> userSegment.</span><span style="color:#D2A8FF;">getFraction</span><span style="color:#C9D1D9;">()</span><span style="color:#FF7B72;">+</span><span style="color:#79C0FF;">50</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">                Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">useraddup</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1695</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">                Integer</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">volunteeraddup</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> volunteerContent.</span><span style="color:#D2A8FF;">getLowestRank</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">double</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">currentScore</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> volunteerContent.</span><span style="color:#D2A8FF;">getLowestScore</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">double</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">difScore</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">  currentScore </span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;"> userSegment.</span><span style="color:#D2A8FF;">getFraction</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">//差值</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">double</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">percentScore</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> difScore </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0.005</span><span style="color:#C9D1D9;">;</span><span style="color:#8B949E;">//成绩差的百分点之和</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">double</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">percentRank</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (((</span><span style="color:#FF7B72;">double</span><span style="color:#C9D1D9;">)useraddup </span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">double</span><span style="color:#C9D1D9;">)volunteeraddup) </span><span style="color:#FF7B72;">/</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">double</span><span style="color:#C9D1D9;">)useraddup) </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">10</span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;">percentScore;</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#8B949E;">//成绩</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">double</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">percent</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> percentRank </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> percentScore;</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;">((</span><span style="color:#79C0FF;">0.65</span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;">percent) </span><span style="color:#FF7B72;">&lt;=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0.01</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#8B949E;">//                    System.out.println(&quot;1%&quot;);</span></span>
<span class="line"><span style="color:#C9D1D9;">                    </span><span style="color:#FF7B72;">continue</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">                }</span><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;">{</span></span>
<span class="line"><span style="color:#C9D1D9;">                    </span><span style="color:#FF7B72;">double</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">a</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (</span><span style="color:#79C0FF;">0.65</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;"> percent) </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">100</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">                    a</span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">double</span><span style="color:#C9D1D9;">)Math.</span><span style="color:#D2A8FF;">round</span><span style="color:#C9D1D9;">(a</span><span style="color:#FF7B72;">*</span><span style="color:#79C0FF;">100</span><span style="color:#C9D1D9;">)</span><span style="color:#FF7B72;">/</span><span style="color:#79C0FF;">100</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">                    DecimalFormat</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">decimalFormat</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">new</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">DecimalFormat</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;0.00#&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">                    String</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">scoreStr</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> decimalFormat.</span><span style="color:#D2A8FF;">format</span><span style="color:#C9D1D9;">(a);</span></span>
<span class="line"><span style="color:#C9D1D9;">                    </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (a </span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">30</span><span style="color:#C9D1D9;">){</span></span>
<span class="line"><span style="color:#C9D1D9;">                        System.out.</span><span style="color:#D2A8FF;">printf</span><span style="color:#C9D1D9;">(volunteerContent.</span><span style="color:#D2A8FF;">toString</span><span style="color:#C9D1D9;">()</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;------&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">percentRank</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;---&quot;</span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;">percentScore</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;----&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">                        System.out.</span><span style="color:#D2A8FF;">println</span><span style="color:#C9D1D9;">(scoreStr</span><span style="color:#FF7B72;">+</span><span style="color:#A5D6FF;">&quot;%&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">                    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">                }</span></span>
<span class="line"><span style="color:#C9D1D9;">            }</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#8B949E;">/*else if(volunteerContent.getLowestScore() &gt;= userSegment.getFraction()-20 &amp;&amp; volunteerContent.getLowestScore() &lt;= userSegment.getFraction()){</span></span>
<span class="line"><span style="color:#8B949E;">                double percentRank = ( ( (double)volunteerContent.getLowestRank() - (double)userSegment.getAddUp()  ) / (double)volunteerContent.getLowestRank()) * 0.5;</span></span>
<span class="line"><span style="color:#8B949E;">                //成绩</span></span>
<span class="line"><span style="color:#8B949E;">                double currentScore = volunteerContent.getLowestScore();</span></span>
<span class="line"><span style="color:#8B949E;">                double difScore =  userSegment.getFraction() - currentScore;//专业分数跟考生分数的差值</span></span>
<span class="line"><span style="color:#8B949E;">                double percentScore = difScore * 0.005;//成绩差的百分点之和</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">                double percent = percentRank + percentScore;</span></span>
<span class="line"><span style="color:#8B949E;">                if((percent) &gt;= 1){</span></span>
<span class="line"><span style="color:#8B949E;">                    System.out.println(&quot;99%&quot;);</span></span>
<span class="line"><span style="color:#8B949E;">//                    continue;</span></span>
<span class="line"><span style="color:#8B949E;">                }else{</span></span>
<span class="line"><span style="color:#8B949E;">                    if ((percent) &lt; 100) {</span></span>
<span class="line"><span style="color:#8B949E;">                        System.out.println((percent)  + &quot;%&quot;);</span></span>
<span class="line"><span style="color:#8B949E;">                    }</span></span>
<span class="line"><span style="color:#8B949E;">                }</span></span>
<span class="line"><span style="color:#8B949E;">            }*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#8B949E;">//二分查找，快速找到表中对应的位次和分数</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">search</span><span style="color:#C9D1D9;">( List</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">Integer</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> nums, </span><span style="color:#FF7B72;">int</span><span style="color:#C9D1D9;"> target) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">low</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">high</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> nums.</span><span style="color:#D2A8FF;">size</span><span style="color:#C9D1D9;">()</span><span style="color:#FF7B72;">-</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">int</span><span style="color:#FFA657;"> </span><span style="color:#C9D1D9;">mid</span><span style="color:#FFA657;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">while</span><span style="color:#C9D1D9;"> (low </span><span style="color:#FF7B72;">&lt;=</span><span style="color:#C9D1D9;"> high) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            mid </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> low </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> (high </span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;"> low) </span><span style="color:#FF7B72;">/</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (nums.</span><span style="color:#D2A8FF;">get</span><span style="color:#C9D1D9;">(mid) </span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> target)</span></span>
<span class="line"><span style="color:#C9D1D9;">                high </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> mid </span><span style="color:#FF7B72;">-</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">else</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (nums.</span><span style="color:#D2A8FF;">get</span><span style="color:#C9D1D9;">(mid) </span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;"> target)</span></span>
<span class="line"><span style="color:#C9D1D9;">                low </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> mid </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">else</span></span>
<span class="line"><span style="color:#C9D1D9;">                </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> nums.</span><span style="color:#D2A8FF;">get</span><span style="color:#C9D1D9;">(mid);</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> nums.</span><span style="color:#D2A8FF;">get</span><span style="color:#C9D1D9;">(mid</span><span style="color:#FF7B72;">+</span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br></div></div><h2 id="springboot源码学习" tabindex="-1">SpringBoot源码学习 <a class="header-anchor" href="#springboot源码学习" aria-hidden="true">#</a></h2><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221022160547968.png" alt="image-20221022160547968"></p><h3 id="import注解" tabindex="-1">@Import注解 <a class="header-anchor" href="#import注解" aria-hidden="true">#</a></h3><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221026091503592.png" alt="image-20221026091503592"></p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221025151146740.png" alt="image-20221025151146740"></p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221026091757033.png" alt="image-20221026091757033"></p><h3 id="import引入importselector" tabindex="-1">@Import引入ImportSelector <a class="header-anchor" href="#import引入importselector" aria-hidden="true">#</a></h3><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221026093145166.png" alt="image-20221026093145166"></p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221119144425069.png" alt="image-20221119144425069"></p><p>\\表示换行</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221119145445716.png" alt="image-20221119145445716"></p><p><strong>lambda表达式看不懂的情况下可以把光标点在小箭头前面alt加回车 选择转换成匿名内部类的写法先看懂</strong></p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221119145147405.png" alt="image-20221119145147405"></p><p>排除类名，写在里面的类不会被加载到Spring容器中</p><p><img src="https://bed-1309358403.cos.ap-shanghai.myqcloud.com/img/image-20221119153451757.png" alt="image-20221119153451757"></p>`,547),o=[e];function r(t,c,i,D,y,F){return a(),n("div",null,o)}const C=s(p,[["render",r]]);export{b as __pageData,C as default};
